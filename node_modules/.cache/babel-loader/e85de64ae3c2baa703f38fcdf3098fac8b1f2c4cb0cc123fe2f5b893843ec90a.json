{"ast":null,"code":"var _jsxFileName = \"/Users/jegaljin-u/workspace/thinking-guide/src/components/CompleteGameSystem.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CompleteGameSystem = ({\n  onAction,\n  playerStats,\n  setPlayerStats,\n  currentUser\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const gameLoopRef = useRef();\n  const [frameCount, setFrameCount] = useState(0);\n\n  // Player persistent data\n  const [playerData, setPlayerData] = useState({\n    id: currentUser.user_id,\n    name: \"Hero\",\n    level: 1,\n    experience: 0,\n    gold: 1000,\n    gems: 50,\n    energy: 100,\n    maxEnergy: 100,\n    unlockedStages: 1,\n    inventory: [{\n      id: 'sword1',\n      name: 'Iron Sword',\n      type: 'weapon',\n      rarity: 'common',\n      quantity: 1,\n      stats: {\n        attack: 10\n      }\n    }, {\n      id: 'potion1',\n      name: 'Health Potion',\n      type: 'consumable',\n      rarity: 'common',\n      quantity: 5,\n      stats: {\n        heal: 50\n      }\n    }],\n    completedStages: [],\n    achievements: [],\n    totalPlayTime: 0,\n    lastLogin: new Date().toISOString()\n  });\n\n  // Game state\n  const [gameState, setGameState] = useState({\n    currentScene: 'lobby',\n    selectedStage: null,\n    battleState: {\n      wave: 1,\n      lives: 20,\n      score: 0,\n      isWaveActive: false,\n      towers: [],\n      enemies: [],\n      waveProgress: 0,\n      battleTime: 0\n    },\n    stageResults: null,\n    cameraX: 0,\n    cameraY: 0,\n    selectedTower: null,\n    selectedTowerType: null\n  });\n\n  // Stage definitions\n  const stageDefinitions = [{\n    id: 1,\n    name: \"Green Fields\",\n    difficulty: 'Easy',\n    energyCost: 10,\n    recommendedLevel: 1,\n    rewards: [{\n      type: 'gold',\n      amount: 100\n    }, {\n      type: 'exp',\n      amount: 50\n    }],\n    isUnlocked: true,\n    path: [{\n      x: 0,\n      y: 200\n    }, {\n      x: 150,\n      y: 200\n    }, {\n      x: 150,\n      y: 100\n    }, {\n      x: 300,\n      y: 100\n    }, {\n      x: 300,\n      y: 300\n    }, {\n      x: 600,\n      y: 300\n    }],\n    enemies: [{\n      enemies: [],\n      spawnDelay: 60\n    }],\n    background: '#2d5016'\n  }, {\n    id: 2,\n    name: \"Dark Forest\",\n    difficulty: 'Normal',\n    energyCost: 15,\n    recommendedLevel: 3,\n    rewards: [{\n      type: 'gold',\n      amount: 200\n    }, {\n      type: 'exp',\n      amount: 80\n    }, {\n      type: 'gem',\n      amount: 5\n    }],\n    isUnlocked: false,\n    path: [{\n      x: 0,\n      y: 150\n    }, {\n      x: 100,\n      y: 150\n    }, {\n      x: 100,\n      y: 50\n    }, {\n      x: 250,\n      y: 50\n    }, {\n      x: 250,\n      y: 250\n    }, {\n      x: 400,\n      y: 250\n    }, {\n      x: 400,\n      y: 100\n    }, {\n      x: 600,\n      y: 100\n    }],\n    enemies: [{\n      enemies: [],\n      spawnDelay: 50\n    }],\n    background: '#1a3d1a'\n  }, {\n    id: 3,\n    name: \"Ancient Ruins\",\n    difficulty: 'Hard',\n    energyCost: 20,\n    recommendedLevel: 5,\n    rewards: [{\n      type: 'gold',\n      amount: 350\n    }, {\n      type: 'exp',\n      amount: 120\n    }, {\n      type: 'gem',\n      amount: 10\n    }],\n    isUnlocked: false,\n    path: [{\n      x: 0,\n      y: 200\n    }, {\n      x: 80,\n      y: 200\n    }, {\n      x: 80,\n      y: 80\n    }, {\n      x: 200,\n      y: 80\n    }, {\n      x: 200,\n      y: 320\n    }, {\n      x: 320,\n      y: 320\n    }, {\n      x: 320,\n      y: 120\n    }, {\n      x: 500,\n      y: 120\n    }, {\n      x: 500,\n      y: 280\n    }, {\n      x: 600,\n      y: 280\n    }],\n    enemies: [{\n      enemies: [],\n      spawnDelay: 40\n    }],\n    background: '#4a4a2a'\n  }, {\n    id: 4,\n    name: \"Dragon's Lair\",\n    difficulty: 'Expert',\n    energyCost: 25,\n    recommendedLevel: 8,\n    rewards: [{\n      type: 'gold',\n      amount: 500\n    }, {\n      type: 'exp',\n      amount: 200\n    }, {\n      type: 'gem',\n      amount: 20\n    }],\n    isUnlocked: false,\n    path: [{\n      x: 0,\n      y: 200\n    }, {\n      x: 150,\n      y: 200\n    }, {\n      x: 150,\n      y: 100\n    }, {\n      x: 450,\n      y: 100\n    }, {\n      x: 450,\n      y: 300\n    }, {\n      x: 600,\n      y: 300\n    }],\n    enemies: [{\n      enemies: [],\n      spawnDelay: 35\n    }],\n    background: '#5d1a1a'\n  }, {\n    id: 5,\n    name: \"Demon Realm\",\n    difficulty: 'Hell',\n    energyCost: 30,\n    recommendedLevel: 12,\n    rewards: [{\n      type: 'gold',\n      amount: 1000\n    }, {\n      type: 'exp',\n      amount: 400\n    }, {\n      type: 'gem',\n      amount: 50\n    }],\n    isUnlocked: false,\n    path: [{\n      x: 0,\n      y: 200\n    }, {\n      x: 100,\n      y: 200\n    }, {\n      x: 200,\n      y: 200\n    }, {\n      x: 300,\n      y: 200\n    }, {\n      x: 400,\n      y: 200\n    }, {\n      x: 500,\n      y: 200\n    }, {\n      x: 600,\n      y: 200\n    }],\n    enemies: [{\n      enemies: [],\n      spawnDelay: 30\n    }],\n    background: '#2d0d0d'\n  }];\n\n  // Tower types\n  const towerTypes = {\n    'archer': {\n      cost: 80,\n      damage: 25,\n      range: 120,\n      speed: 30,\n      color: '#8B4513',\n      icon: '🏹'\n    },\n    'cannon': {\n      cost: 150,\n      damage: 60,\n      range: 100,\n      speed: 60,\n      color: '#696969',\n      icon: '💣'\n    },\n    'magic': {\n      cost: 220,\n      damage: 40,\n      range: 140,\n      speed: 40,\n      color: '#9400D3',\n      icon: '✨'\n    },\n    'ice': {\n      cost: 180,\n      damage: 20,\n      range: 110,\n      speed: 35,\n      color: '#00BFFF',\n      icon: '❄️'\n    },\n    'lightning': {\n      cost: 300,\n      damage: 80,\n      range: 150,\n      speed: 50,\n      color: '#FFD700',\n      icon: '⚡'\n    }\n  };\n\n  // Enemy types\n  const enemyTypes = {\n    'goblin': {\n      health: 80,\n      speed: 2,\n      reward: 15,\n      color: '#228B22',\n      icon: '👹',\n      armor: 0\n    },\n    'orc': {\n      health: 150,\n      speed: 1.5,\n      reward: 25,\n      color: '#8B4513',\n      icon: '🗡️',\n      armor: 2\n    },\n    'troll': {\n      health: 300,\n      speed: 1,\n      reward: 40,\n      color: '#2F4F4F',\n      icon: '🏔️',\n      armor: 5\n    },\n    'dragon': {\n      health: 500,\n      speed: 0.8,\n      reward: 80,\n      color: '#DC143C',\n      icon: '🐉',\n      armor: 8\n    },\n    'demon': {\n      health: 800,\n      speed: 0.6,\n      reward: 150,\n      color: '#8B0000',\n      icon: '😈',\n      armor: 12\n    }\n  };\n\n  // Initialize session\n  useEffect(() => {\n    onAction('session_started', {\n      player_id: playerData.id,\n      player_level: playerData.level,\n      total_gold: playerData.gold,\n      unlocked_stages: playerData.unlockedStages,\n      login_streak: 1\n    });\n  }, []);\n\n  // Energy regeneration\n  useEffect(() => {\n    const energyRegen = setInterval(() => {\n      setPlayerData(prev => ({\n        ...prev,\n        energy: Math.min(prev.maxEnergy, prev.energy + 1)\n      }));\n    }, 60000); // 1 energy per minute\n\n    return () => clearInterval(energyRegen);\n  }, []);\n\n  // Level up check\n  useEffect(() => {\n    const expNeeded = playerData.level * 100;\n    if (playerData.experience >= expNeeded) {\n      const newLevel = playerData.level + 1;\n      setPlayerData(prev => ({\n        ...prev,\n        level: newLevel,\n        experience: prev.experience - expNeeded,\n        maxEnergy: prev.maxEnergy + 10\n      }));\n      onAction('player_level_up', {\n        player_id: playerData.id,\n        old_level: playerData.level,\n        new_level: newLevel,\n        new_max_energy: playerData.maxEnergy + 10,\n        total_playtime: playerData.totalPlayTime\n      });\n    }\n  }, [playerData.experience, playerData.level, playerData.maxEnergy, playerData.totalPlayTime, playerData.id, onAction]);\n\n  // Keyboard handling\n  const handleKeyDown = useCallback(e => {\n    // Prevent page scrolling\n    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'w', 'a', 's', 'd', ' ', 'Enter', 'Escape'].includes(e.key)) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    switch (e.key.toLowerCase()) {\n      case 'escape':\n        if (gameState.currentScene === 'battle') {\n          pauseBattle();\n        } else if (gameState.currentScene !== 'lobby') {\n          setGameState(prev => ({\n            ...prev,\n            currentScene: 'lobby'\n          }));\n        }\n        break;\n      case ' ':\n        if (gameState.currentScene === 'battle') {\n          startWave();\n        }\n        break;\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n        if (gameState.currentScene === 'battle') {\n          const towerIndex = parseInt(e.key) - 1;\n          const towerTypeKeys = Object.keys(towerTypes);\n          if (towerIndex < towerTypeKeys.length) {\n            setGameState(prev => ({\n              ...prev,\n              selectedTowerType: towerTypeKeys[towerIndex],\n              selectedTower: null\n            }));\n          }\n        }\n        break;\n    }\n  }, [gameState.currentScene]);\n\n  // Mouse/Click handling\n  const handleCanvasClick = useCallback(e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    switch (gameState.currentScene) {\n      case 'lobby':\n        handleLobbyClick(x, y);\n        break;\n      case 'dungeon':\n        handleDungeonClick(x, y);\n        break;\n      case 'battle':\n        handleBattleClick(x, y);\n        break;\n      case 'stageComplete':\n      case 'stageFailed':\n        handleResultsClick(x, y);\n        break;\n    }\n  }, [gameState.currentScene]);\n  const handleLobbyClick = (x, y) => {\n    // Dungeon button\n    if (x >= 250 && x <= 350 && y >= 200 && y <= 250) {\n      setGameState(prev => ({\n        ...prev,\n        currentScene: 'dungeon'\n      }));\n      onAction('menu_navigation', {\n        player_id: playerData.id,\n        from_scene: 'lobby',\n        to_scene: 'dungeon',\n        player_level: playerData.level\n      });\n    }\n\n    // Shop button\n    if (x >= 100 && x <= 200 && y >= 300 && y <= 350) {\n      setGameState(prev => ({\n        ...prev,\n        currentScene: 'shop'\n      }));\n      onAction('menu_navigation', {\n        player_id: playerData.id,\n        from_scene: 'lobby',\n        to_scene: 'shop',\n        player_level: playerData.level\n      });\n    }\n\n    // Inventory button\n    if (x >= 400 && x <= 500 && y >= 300 && y <= 350) {\n      setGameState(prev => ({\n        ...prev,\n        currentScene: 'inventory'\n      }));\n      onAction('menu_navigation', {\n        player_id: playerData.id,\n        from_scene: 'lobby',\n        to_scene: 'inventory',\n        player_level: playerData.level\n      });\n    }\n  };\n  const handleDungeonClick = (x, y) => {\n    // Stage selection\n    stageDefinitions.forEach((stage, index) => {\n      const stageX = 50 + index % 3 * 200;\n      const stageY = 100 + Math.floor(index / 3) * 150;\n      if (x >= stageX && x <= stageX + 150 && y >= stageY && y <= stageY + 100) {\n        if (stage.id <= playerData.unlockedStages && playerData.energy >= stage.energyCost) {\n          enterStage(stage.id);\n        }\n      }\n    });\n\n    // Back button\n    if (x >= 50 && x <= 150 && y >= 350 && y <= 380) {\n      setGameState(prev => ({\n        ...prev,\n        currentScene: 'lobby'\n      }));\n    }\n  };\n  const enterStage = stageId => {\n    const stage = stageDefinitions.find(s => s.id === stageId);\n    if (!stage) return;\n\n    // Consume energy\n    setPlayerData(prev => ({\n      ...prev,\n      energy: prev.energy - stage.energyCost\n    }));\n\n    // Initialize battle\n    setGameState(prev => ({\n      ...prev,\n      currentScene: 'battle',\n      selectedStage: stageId,\n      battleState: {\n        wave: 1,\n        lives: 20,\n        score: 0,\n        isWaveActive: false,\n        towers: [],\n        enemies: [],\n        waveProgress: 0,\n        battleTime: 0\n      }\n    }));\n    onAction('stage_entered', {\n      player_id: playerData.id,\n      stage_id: stageId,\n      stage_name: stage.name,\n      energy_cost: stage.energyCost,\n      remaining_energy: playerData.energy - stage.energyCost,\n      player_level: playerData.level,\n      recommended_level: stage.recommendedLevel\n    });\n  };\n  const handleBattleClick = (x, y) => {\n    // UI area (bottom 80px)\n    if (y > 320) return;\n    if (gameState.selectedTowerType) {\n      // Place tower\n      if (canPlaceTower(x, y)) {\n        placeTower(x, y, gameState.selectedTowerType);\n      }\n    } else {\n      // Select existing tower\n      const clickedTower = gameState.battleState.towers.find(tower => {\n        const distance = Math.sqrt((x - tower.x) ** 2 + (y - tower.y) ** 2);\n        return distance < 25;\n      });\n      if (clickedTower) {\n        setGameState(prev => ({\n          ...prev,\n          selectedTower: clickedTower,\n          selectedTowerType: null\n        }));\n      }\n    }\n  };\n  const canPlaceTower = (x, y) => {\n    if (!gameState.selectedStage) return false;\n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return false;\n\n    // Check distance from path\n    for (const point of stage.path) {\n      const distance = Math.sqrt((x - point.x) ** 2 + (y - point.y) ** 2);\n      if (distance < 40) return false;\n    }\n\n    // Check distance from other towers\n    for (const tower of gameState.battleState.towers) {\n      const distance = Math.sqrt((x - tower.x) ** 2 + (y - tower.y) ** 2);\n      if (distance < 50) return false;\n    }\n    return x > 25 && x < 575 && y > 25 && y < 295;\n  };\n  const placeTower = (x, y, type) => {\n    const towerConfig = towerTypes[type];\n    if (playerData.gold < towerConfig.cost) return;\n    const newTower = {\n      id: `tower_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      x,\n      y,\n      type,\n      level: 1,\n      damage: towerConfig.damage,\n      range: towerConfig.range,\n      attackSpeed: towerConfig.speed,\n      lastAttack: 0,\n      cost: towerConfig.cost,\n      kills: 0\n    };\n    setPlayerData(prev => ({\n      ...prev,\n      gold: prev.gold - towerConfig.cost\n    }));\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        towers: [...prev.battleState.towers, newTower]\n      },\n      selectedTowerType: null\n    }));\n    onAction('tower_placed', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      tower_type: type,\n      tower_cost: towerConfig.cost,\n      position_x: x,\n      position_y: y,\n      remaining_gold: playerData.gold - towerConfig.cost,\n      wave_number: gameState.battleState.wave\n    });\n  };\n  const startWave = () => {\n    if (gameState.battleState.isWaveActive) return;\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        isWaveActive: true,\n        waveProgress: 0\n      }\n    }));\n    onAction('wave_started', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      wave_number: gameState.battleState.wave,\n      towers_count: gameState.battleState.towers.length,\n      current_gold: playerData.gold\n    });\n\n    // Spawn enemies\n    spawnEnemyWave();\n  };\n  const spawnEnemyWave = () => {\n    if (!gameState.selectedStage) return;\n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n    const enemyCount = 8 + gameState.battleState.wave * 2;\n    const enemyTypeKeys = Object.keys(enemyTypes);\n    for (let i = 0; i < enemyCount; i++) {\n      setTimeout(() => {\n        const enemyType = enemyTypeKeys[Math.min(gameState.battleState.wave - 1, enemyTypeKeys.length - 1)];\n        const enemyConfig = enemyTypes[enemyType];\n        const newEnemy = {\n          id: `enemy_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n          x: stage.path[0].x,\n          y: stage.path[0].y,\n          health: enemyConfig.health * gameState.selectedStage,\n          maxHealth: enemyConfig.health * gameState.selectedStage,\n          speed: enemyConfig.speed,\n          type: enemyType,\n          pathIndex: 0,\n          alive: true,\n          armor: enemyConfig.armor,\n          reward: [{\n            type: 'gold',\n            amount: enemyConfig.reward\n          }, {\n            type: 'exp',\n            amount: enemyConfig.reward / 2\n          }]\n        };\n        setGameState(prev => ({\n          ...prev,\n          battleState: {\n            ...prev.battleState,\n            enemies: [...prev.battleState.enemies, newEnemy]\n          }\n        }));\n      }, i * 800);\n    }\n  };\n  const pauseBattle = () => {\n    onAction('battle_paused', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      wave_number: gameState.battleState.wave,\n      battle_time: gameState.battleState.battleTime,\n      current_score: gameState.battleState.score\n    });\n  };\n  const completeStage = victory => {\n    var _rewards$find, _rewards$find2;\n    if (!gameState.selectedStage) return;\n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n    const starsEarned = victory ? calculateStars() : 0;\n    const rewards = victory ? stage.rewards : [];\n\n    // Apply rewards\n    if (victory) {\n      let goldGained = 0;\n      let expGained = 0;\n      let gemsGained = 0;\n      rewards.forEach(reward => {\n        switch (reward.type) {\n          case 'gold':\n            goldGained += reward.amount;\n            break;\n          case 'exp':\n            expGained += reward.amount;\n            break;\n          case 'gem':\n            gemsGained += reward.amount;\n            break;\n        }\n      });\n      setPlayerData(prev => ({\n        ...prev,\n        gold: prev.gold + goldGained,\n        experience: prev.experience + expGained,\n        gems: prev.gems + gemsGained,\n        unlockedStages: Math.max(prev.unlockedStages, gameState.selectedStage + 1)\n      }));\n\n      // Record completion\n      const completion = {\n        stageId: gameState.selectedStage,\n        bestScore: gameState.battleState.score,\n        completionTime: gameState.battleState.battleTime,\n        starsEarned,\n        completedAt: new Date().toISOString()\n      };\n      setPlayerData(prev => {\n        const existingIndex = prev.completedStages.findIndex(c => c.stageId === gameState.selectedStage);\n        const newCompletedStages = [...prev.completedStages];\n        if (existingIndex >= 0) {\n          newCompletedStages[existingIndex] = completion;\n        } else {\n          newCompletedStages.push(completion);\n        }\n        return {\n          ...prev,\n          completedStages: newCompletedStages\n        };\n      });\n    }\n    const results = {\n      victory,\n      score: gameState.battleState.score,\n      starsEarned,\n      timeBonus: victory ? Math.max(0, 300 - gameState.battleState.battleTime) : 0,\n      rewards,\n      newUnlocks: victory && gameState.selectedStage === playerData.unlockedStages ? [`Stage ${gameState.selectedStage + 1} Unlocked!`] : []\n    };\n    setGameState(prev => ({\n      ...prev,\n      currentScene: victory ? 'stageComplete' : 'stageFailed',\n      stageResults: results\n    }));\n    onAction(victory ? 'stage_victory' : 'stage_defeat', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      stage_name: stage.name,\n      final_score: gameState.battleState.score,\n      stars_earned: starsEarned,\n      battle_time: gameState.battleState.battleTime,\n      towers_built: gameState.battleState.towers.length,\n      waves_completed: gameState.battleState.wave,\n      gold_gained: victory ? ((_rewards$find = rewards.find(r => r.type === 'gold')) === null || _rewards$find === void 0 ? void 0 : _rewards$find.amount) || 0 : 0,\n      exp_gained: victory ? ((_rewards$find2 = rewards.find(r => r.type === 'exp')) === null || _rewards$find2 === void 0 ? void 0 : _rewards$find2.amount) || 0 : 0,\n      new_unlocks: results.newUnlocks\n    });\n  };\n  const calculateStars = () => {\n    const baseScore = gameState.battleState.score;\n    const timeBonus = Math.max(0, 300 - gameState.battleState.battleTime);\n    const livesBonus = gameState.battleState.lives * 10;\n    const totalScore = baseScore + timeBonus + livesBonus;\n    if (totalScore >= 1000) return 3;\n    if (totalScore >= 500) return 2;\n    return 1;\n  };\n  const handleResultsClick = (x, y) => {\n    // Continue button\n    if (x >= 200 && x <= 400 && y >= 300 && y <= 350) {\n      setGameState(prev => ({\n        ...prev,\n        currentScene: 'lobby',\n        stageResults: null,\n        selectedStage: null\n      }));\n    }\n  };\n\n  // Game loop updates\n  const updateBattle = useCallback(() => {\n    if (gameState.currentScene !== 'battle' || !gameState.battleState.isWaveActive) return;\n\n    // Update battle time\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        battleTime: prev.battleState.battleTime + 1\n      }\n    }));\n\n    // Update enemies\n    updateEnemies();\n\n    // Update towers\n    updateTowers();\n\n    // Check win/lose conditions\n    checkBattleEnd();\n  }, [gameState.currentScene, gameState.battleState.isWaveActive]);\n  const updateEnemies = () => {\n    if (!gameState.selectedStage) return;\n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        enemies: prev.battleState.enemies.map(enemy => {\n          if (!enemy.alive) return enemy;\n          const currentTarget = stage.path[enemy.pathIndex + 1];\n          if (currentTarget) {\n            const dx = currentTarget.x - enemy.x;\n            const dy = currentTarget.y - enemy.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            if (distance < 5) {\n              enemy.pathIndex++;\n              if (enemy.pathIndex >= stage.path.length - 1) {\n                // Enemy reached end\n                setGameState(prev2 => ({\n                  ...prev2,\n                  battleState: {\n                    ...prev2.battleState,\n                    lives: prev2.battleState.lives - 1\n                  }\n                }));\n                onAction('life_lost', {\n                  player_id: playerData.id,\n                  stage_id: gameState.selectedStage,\n                  enemy_type: enemy.type,\n                  remaining_lives: gameState.battleState.lives - 1,\n                  wave_number: gameState.battleState.wave\n                });\n                return {\n                  ...enemy,\n                  alive: false\n                };\n              }\n            } else {\n              const moveX = dx / distance * enemy.speed;\n              const moveY = dy / distance * enemy.speed;\n              enemy.x += moveX;\n              enemy.y += moveY;\n            }\n          }\n          return enemy;\n        }).filter(enemy => enemy.alive || enemy.pathIndex < stage.path.length - 1)\n      }\n    }));\n  };\n  const updateTowers = () => {\n    gameState.battleState.towers.forEach(tower => {\n      if (frameCount - tower.lastAttack < tower.attackSpeed) return;\n      const enemiesInRange = gameState.battleState.enemies.filter(enemy => {\n        if (!enemy.alive) return false;\n        const distance = Math.sqrt((enemy.x - tower.x) ** 2 + (enemy.y - tower.y) ** 2);\n        return distance <= tower.range;\n      });\n      if (enemiesInRange.length > 0) {\n        const target = enemiesInRange.reduce((best, current) => current.pathIndex > best.pathIndex ? current : best);\n        const actualDamage = Math.max(1, tower.damage - target.armor);\n        setGameState(prev => ({\n          ...prev,\n          battleState: {\n            ...prev.battleState,\n            enemies: prev.battleState.enemies.map(enemy => {\n              if (enemy.id === target.id) {\n                const newHealth = Math.max(0, enemy.health - actualDamage);\n                const killed = newHealth <= 0;\n                if (killed) {\n                  var _enemy$reward$find, _enemy$reward$find2;\n                  // Apply rewards\n                  const goldGain = ((_enemy$reward$find = enemy.reward.find(r => r.type === 'gold')) === null || _enemy$reward$find === void 0 ? void 0 : _enemy$reward$find.amount) || 0;\n                  const expGain = ((_enemy$reward$find2 = enemy.reward.find(r => r.type === 'exp')) === null || _enemy$reward$find2 === void 0 ? void 0 : _enemy$reward$find2.amount) || 0;\n                  setPlayerData(prev2 => ({\n                    ...prev2,\n                    gold: prev2.gold + goldGain,\n                    experience: prev2.experience + expGain\n                  }));\n                  setGameState(prev2 => ({\n                    ...prev2,\n                    battleState: {\n                      ...prev2.battleState,\n                      score: prev2.battleState.score + goldGain * 10,\n                      towers: prev2.battleState.towers.map(t => t.id === tower.id ? {\n                        ...t,\n                        kills: t.kills + 1\n                      } : t)\n                    }\n                  }));\n                  if (enemy.type === 'demon') {\n                    onAction('boss_defeated', {\n                      player_id: playerData.id,\n                      stage_id: gameState.selectedStage,\n                      boss_type: enemy.type,\n                      tower_type: tower.type,\n                      gold_gained: goldGain,\n                      exp_gained: expGain\n                    });\n                  }\n                  return {\n                    ...enemy,\n                    health: 0,\n                    alive: false\n                  };\n                }\n                return {\n                  ...enemy,\n                  health: newHealth\n                };\n              }\n              return enemy;\n            })\n          }\n        }));\n        tower.lastAttack = frameCount;\n      }\n    });\n  };\n  const checkBattleEnd = () => {\n    if (gameState.battleState.lives <= 0) {\n      completeStage(false);\n      return;\n    }\n    const aliveEnemies = gameState.battleState.enemies.filter(e => e.alive);\n    if (aliveEnemies.length === 0 && gameState.battleState.waveProgress > 100) {\n      if (gameState.battleState.wave >= 3) {\n        completeStage(true);\n      } else {\n        // Next wave\n        setGameState(prev => ({\n          ...prev,\n          battleState: {\n            ...prev.battleState,\n            wave: prev.battleState.wave + 1,\n            isWaveActive: false,\n            waveProgress: 0\n          }\n        }));\n      }\n    }\n  };\n\n  // Drawing functions\n  const drawLobby = (ctx, canvas) => {\n    // Background\n    ctx.fillStyle = '#1a1a2e';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Title\n    ctx.fillStyle = '#FFD700';\n    ctx.font = 'bold 32px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('🏰 TOWER DEFENSE', canvas.width / 2, 80);\n\n    // Player info panel\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';\n    ctx.fillRect(50, 100, 500, 80);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '16px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`${playerData.name} - Level ${playerData.level}`, 70, 125);\n    ctx.fillText(`Gold: ${playerData.gold} | Gems: ${playerData.gems}`, 70, 145);\n    ctx.fillText(`Energy: ${playerData.energy}/${playerData.maxEnergy}`, 70, 165);\n\n    // Experience bar\n    const expNeeded = playerData.level * 100;\n    const expPercent = playerData.experience / expNeeded;\n    ctx.fillStyle = '#444';\n    ctx.fillRect(350, 140, 180, 12);\n    ctx.fillStyle = '#FFD700';\n    ctx.fillRect(350, 140, 180 * expPercent, 12);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '12px Arial';\n    ctx.fillText(`EXP: ${playerData.experience}/${expNeeded}`, 355, 150);\n\n    // Menu buttons\n    const buttons = [{\n      text: '⚔️ DUNGEON',\n      x: 250,\n      y: 200,\n      w: 100,\n      h: 50\n    }, {\n      text: '🛒 SHOP',\n      x: 100,\n      y: 300,\n      w: 100,\n      h: 50\n    }, {\n      text: '🎒 INVENTORY',\n      x: 400,\n      y: 300,\n      w: 100,\n      h: 50\n    }];\n    buttons.forEach(button => {\n      ctx.fillStyle = 'rgba(74, 144, 226, 0.8)';\n      ctx.fillRect(button.x, button.y, button.w, button.h);\n      ctx.strokeStyle = '#FFFFFF';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(button.x, button.y, button.w, button.h);\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(button.text, button.x + button.w / 2, button.y + button.h / 2 + 5);\n    });\n  };\n  const drawDungeon = (ctx, canvas) => {\n    // Background\n    ctx.fillStyle = '#0f1419';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Title\n    ctx.fillStyle = '#FFD700';\n    ctx.font = 'bold 24px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('🗡️ DUNGEON SELECT', canvas.width / 2, 40);\n\n    // Stage cards\n    stageDefinitions.forEach((stage, index) => {\n      const x = 50 + index % 3 * 200;\n      const y = 70 + Math.floor(index / 3) * 120;\n      const isUnlocked = stage.id <= playerData.unlockedStages;\n      const hasEnergy = playerData.energy >= stage.energyCost;\n      const canEnter = isUnlocked && hasEnergy;\n\n      // Stage card background\n      ctx.fillStyle = canEnter ? 'rgba(74, 144, 226, 0.8)' : 'rgba(100, 100, 100, 0.5)';\n      ctx.fillRect(x, y, 150, 100);\n      ctx.strokeStyle = canEnter ? '#4a90e2' : '#666';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(x, y, 150, 100);\n\n      // Stage info\n      ctx.fillStyle = canEnter ? '#FFFFFF' : '#999';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(`Stage ${stage.id}`, x + 75, y + 20);\n      ctx.font = '12px Arial';\n      ctx.fillText(stage.name, x + 75, y + 35);\n      ctx.fillText(stage.difficulty, x + 75, y + 50);\n      ctx.fillText(`Energy: ${stage.energyCost}`, x + 75, y + 65);\n      ctx.fillText(`Lv.${stage.recommendedLevel} Rec.`, x + 75, y + 80);\n\n      // Lock indicator\n      if (!isUnlocked) {\n        ctx.fillStyle = '#FF0000';\n        ctx.font = 'bold 20px Arial';\n        ctx.fillText('🔒', x + 75, y + 55);\n      }\n\n      // Completion stars\n      const completed = playerData.completedStages.find(c => c.stageId === stage.id);\n      if (completed) {\n        for (let i = 0; i < completed.starsEarned; i++) {\n          ctx.fillStyle = '#FFD700';\n          ctx.font = '16px Arial';\n          ctx.fillText('⭐', x + 20 + i * 20, y + 95);\n        }\n      }\n    });\n\n    // Back button\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.8)';\n    ctx.fillRect(50, 350, 100, 30);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('← BACK', 100, 370);\n  };\n  const drawBattle = (ctx, canvas) => {\n    if (!gameState.selectedStage) return;\n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n\n    // Background\n    ctx.fillStyle = stage.background;\n    ctx.fillRect(0, 0, canvas.width, 320);\n\n    // Draw path\n    ctx.strokeStyle = '#8B4513';\n    ctx.lineWidth = 20;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    ctx.beginPath();\n    ctx.moveTo(stage.path[0].x, stage.path[0].y);\n    stage.path.slice(1).forEach(point => {\n      ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n    ctx.strokeStyle = '#DEB887';\n    ctx.lineWidth = 12;\n    ctx.beginPath();\n    ctx.moveTo(stage.path[0].x, stage.path[0].y);\n    stage.path.slice(1).forEach(point => {\n      ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n\n    // Draw towers\n    gameState.battleState.towers.forEach(tower => {\n      var _gameState$selectedTo;\n      const config = towerTypes[tower.type];\n      const isSelected = ((_gameState$selectedTo = gameState.selectedTower) === null || _gameState$selectedTo === void 0 ? void 0 : _gameState$selectedTo.id) === tower.id;\n\n      // Tower base\n      ctx.fillStyle = isSelected ? '#FFD700' : '#696969';\n      ctx.beginPath();\n      ctx.arc(tower.x, tower.y, 18, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Tower body\n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(tower.x, tower.y, 14, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Tower icon\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '12px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(config.icon, tower.x, tower.y + 4);\n\n      // Level indicator\n      ctx.fillStyle = '#FFD700';\n      ctx.font = '10px Arial';\n      ctx.fillText(`Lv.${tower.level}`, tower.x, tower.y - 25);\n\n      // Range for selected tower\n      if (isSelected) {\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n        ctx.lineWidth = 2;\n        ctx.setLineDash([5, 5]);\n        ctx.beginPath();\n        ctx.arc(tower.x, tower.y, tower.range, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.setLineDash([]);\n      }\n    });\n\n    // Draw enemies\n    gameState.battleState.enemies.forEach(enemy => {\n      if (!enemy.alive) return;\n      const config = enemyTypes[enemy.type];\n\n      // Enemy body\n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(enemy.x, enemy.y, 12, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Enemy icon\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '12px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(config.icon, enemy.x, enemy.y + 4);\n\n      // Health bar\n      const barWidth = 20;\n      const barHeight = 4;\n      const healthPercent = enemy.health / enemy.maxHealth;\n      ctx.fillStyle = '#FF0000';\n      ctx.fillRect(enemy.x - barWidth / 2, enemy.y - 18, barWidth, barHeight);\n      ctx.fillStyle = '#00FF00';\n      ctx.fillRect(enemy.x - barWidth / 2, enemy.y - 18, barWidth * healthPercent, barHeight);\n    });\n\n    // UI Panel\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n    ctx.fillRect(0, 320, canvas.width, 80);\n\n    // Battle stats\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`Stage ${gameState.selectedStage}: ${stage.name}`, 10, 340);\n    ctx.fillText(`Wave: ${gameState.battleState.wave}/3`, 10, 355);\n    ctx.fillText(`Lives: ${gameState.battleState.lives}`, 10, 370);\n    ctx.fillText(`Score: ${gameState.battleState.score}`, 10, 385);\n    ctx.fillText(`Gold: ${playerData.gold}`, 150, 340);\n    ctx.fillText(`Towers: ${gameState.battleState.towers.length}`, 150, 355);\n\n    // Tower selection buttons\n    Object.entries(towerTypes).forEach(([type, config], index) => {\n      const x = 300 + index * 60;\n      const y = 340;\n      const isSelected = gameState.selectedTowerType === type;\n      const canAfford = playerData.gold >= config.cost;\n      ctx.fillStyle = isSelected ? 'rgba(255, 255, 0, 0.5)' : canAfford ? 'rgba(255, 255, 255, 0.2)' : 'rgba(255, 0, 0, 0.2)';\n      ctx.fillRect(x, y, 50, 50);\n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(x + 25, y + 20, 12, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.fillStyle = canAfford ? '#FFFFFF' : '#FF6666';\n      ctx.font = '10px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(`${index + 1}: $${config.cost}`, x + 25, y + 45);\n    });\n\n    // Wave control\n    if (!gameState.battleState.isWaveActive) {\n      ctx.fillStyle = 'rgba(0, 255, 0, 0.8)';\n      ctx.fillRect(450, 350, 100, 30);\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('START WAVE', 500, 370);\n    }\n\n    // Pause button\n    ctx.fillStyle = 'rgba(255, 200, 0, 0.8)';\n    ctx.fillRect(560, 350, 30, 30);\n    ctx.fillStyle = '#000';\n    ctx.font = '16px Arial';\n    ctx.fillText('⏸', 575, 370);\n  };\n  const drawResults = (ctx, canvas) => {\n    if (!gameState.stageResults) return;\n    const results = gameState.stageResults;\n\n    // Overlay\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Results panel\n    ctx.fillStyle = 'rgba(50, 50, 50, 0.95)';\n    ctx.fillRect(100, 50, 400, 300);\n    ctx.strokeStyle = '#FFD700';\n    ctx.lineWidth = 3;\n    ctx.strokeRect(100, 50, 400, 300);\n\n    // Title\n    ctx.fillStyle = results.victory ? '#00FF00' : '#FF0000';\n    ctx.font = 'bold 24px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(results.victory ? '🎉 VICTORY!' : '💀 DEFEAT!', 300, 90);\n\n    // Results\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '16px Arial';\n    ctx.textAlign = 'left';\n    let yPos = 120;\n    ctx.fillText(`Score: ${results.score}`, 120, yPos);\n    yPos += 25;\n    if (results.victory) {\n      ctx.fillText(`Stars: ${'⭐'.repeat(results.starsEarned)}`, 120, yPos);\n      yPos += 25;\n      ctx.fillText('Rewards:', 120, yPos);\n      yPos += 20;\n      results.rewards.forEach(reward => {\n        const iconMap = {\n          gold: '💰',\n          exp: '⭐',\n          gem: '💎',\n          item: '🎁'\n        };\n        const icon = iconMap[reward.type] || '🎁';\n        ctx.fillText(`${icon} +${reward.amount}`, 140, yPos);\n        yPos += 20;\n      });\n      if (results.newUnlocks.length > 0) {\n        yPos += 10;\n        ctx.fillStyle = '#FFD700';\n        results.newUnlocks.forEach(unlock => {\n          ctx.fillText(`🔓 ${unlock}`, 120, yPos);\n          yPos += 20;\n        });\n      }\n    }\n\n    // Continue button\n    ctx.fillStyle = 'rgba(74, 144, 226, 0.8)';\n    ctx.fillRect(200, 300, 200, 50);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = 'bold 16px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('CONTINUE', 300, 330);\n  };\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    switch (gameState.currentScene) {\n      case 'lobby':\n        drawLobby(ctx, canvas);\n        break;\n      case 'dungeon':\n        drawDungeon(ctx, canvas);\n        break;\n      case 'battle':\n        drawBattle(ctx, canvas);\n        break;\n      case 'stageComplete':\n      case 'stageFailed':\n        drawBattle(ctx, canvas);\n        drawResults(ctx, canvas);\n        break;\n      case 'shop':\n        drawLobby(ctx, canvas);\n        // Add shop overlay\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = '#FFD700';\n        ctx.font = 'bold 24px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText('🛒 SHOP (Coming Soon)', canvas.width / 2, canvas.height / 2);\n        break;\n      case 'inventory':\n        drawLobby(ctx, canvas);\n        // Add inventory overlay\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = '#FFD700';\n        ctx.font = 'bold 24px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText('🎒 INVENTORY (Coming Soon)', canvas.width / 2, canvas.height / 2);\n        break;\n    }\n  }, [gameState, playerData]);\n\n  // Game loop\n  useEffect(() => {\n    const gameLoop = () => {\n      updateBattle();\n      draw();\n      setFrameCount(prev => prev + 1);\n      gameLoopRef.current = requestAnimationFrame(gameLoop);\n    };\n    gameLoopRef.current = requestAnimationFrame(gameLoop);\n    return () => {\n      if (gameLoopRef.current) {\n        cancelAnimationFrame(gameLoopRef.current);\n      }\n    };\n  }, [updateBattle, draw]);\n\n  // Event listeners\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      background: '#0a0a0a',\n      borderRadius: '12px',\n      padding: '16px',\n      border: '2px solid #2d3748',\n      maxHeight: '500px',\n      overflowY: 'auto',\n      overflowX: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 600,\n      height: 400,\n      style: {\n        border: '2px solid #4a5568',\n        borderRadius: '8px',\n        cursor: gameState.selectedTowerType ? 'crosshair' : 'pointer',\n        maxWidth: '100%',\n        height: 'auto'\n      },\n      onClick: handleCanvasClick,\n      tabIndex: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1399,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '12px',\n        color: '#ffffff',\n        fontSize: '14px',\n        textAlign: 'center',\n        maxWidth: '600px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD83C\\uDFF0 \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Complete Tower Defense RPG\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1421,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1421,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [gameState.currentScene === 'lobby' && '로비에서 던전을 선택하세요!', gameState.currentScene === 'dungeon' && '스테이지를 선택하세요!', gameState.currentScene === 'battle' && `Stage ${gameState.selectedStage} - Space로 웨이브 시작!`, (gameState.currentScene === 'stageComplete' || gameState.currentScene === 'stageFailed') && '결과를 확인하고 계속하세요!']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1422,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Level \", playerData.level, \" | Gold: \", playerData.gold, \" | Energy: \", playerData.energy, \"/\", playerData.maxEnergy]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1428,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1414,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1387,\n    columnNumber: 5\n  }, this);\n};\n_s(CompleteGameSystem, \"+DjE93kOZfkb/4NNjOY29O/M1qw=\");\n_c = CompleteGameSystem;\nvar _c;\n$RefreshReg$(_c, \"CompleteGameSystem\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","jsxDEV","_jsxDEV","CompleteGameSystem","onAction","playerStats","setPlayerStats","currentUser","_s","canvasRef","gameLoopRef","frameCount","setFrameCount","playerData","setPlayerData","id","user_id","name","level","experience","gold","gems","energy","maxEnergy","unlockedStages","inventory","type","rarity","quantity","stats","attack","heal","completedStages","achievements","totalPlayTime","lastLogin","Date","toISOString","gameState","setGameState","currentScene","selectedStage","battleState","wave","lives","score","isWaveActive","towers","enemies","waveProgress","battleTime","stageResults","cameraX","cameraY","selectedTower","selectedTowerType","stageDefinitions","difficulty","energyCost","recommendedLevel","rewards","amount","isUnlocked","path","x","y","spawnDelay","background","towerTypes","cost","damage","range","speed","color","icon","enemyTypes","health","reward","armor","player_id","player_level","total_gold","unlocked_stages","login_streak","energyRegen","setInterval","prev","Math","min","clearInterval","expNeeded","newLevel","old_level","new_level","new_max_energy","total_playtime","handleKeyDown","e","includes","key","preventDefault","stopPropagation","toLowerCase","pauseBattle","startWave","towerIndex","parseInt","towerTypeKeys","Object","keys","length","handleCanvasClick","canvas","current","rect","getBoundingClientRect","clientX","left","clientY","top","handleLobbyClick","handleDungeonClick","handleBattleClick","handleResultsClick","from_scene","to_scene","forEach","stage","index","stageX","stageY","floor","enterStage","stageId","find","s","stage_id","stage_name","energy_cost","remaining_energy","recommended_level","canPlaceTower","placeTower","clickedTower","tower","distance","sqrt","point","towerConfig","newTower","now","random","toString","substr","attackSpeed","lastAttack","kills","tower_type","tower_cost","position_x","position_y","remaining_gold","wave_number","towers_count","current_gold","spawnEnemyWave","enemyCount","enemyTypeKeys","i","setTimeout","enemyType","enemyConfig","newEnemy","maxHealth","pathIndex","alive","battle_time","current_score","completeStage","victory","_rewards$find","_rewards$find2","starsEarned","calculateStars","goldGained","expGained","gemsGained","max","completion","bestScore","completionTime","completedAt","existingIndex","findIndex","c","newCompletedStages","push","results","timeBonus","newUnlocks","final_score","stars_earned","towers_built","waves_completed","gold_gained","r","exp_gained","new_unlocks","baseScore","livesBonus","totalScore","updateBattle","updateEnemies","updateTowers","checkBattleEnd","map","enemy","currentTarget","dx","dy","prev2","enemy_type","remaining_lives","moveX","moveY","filter","enemiesInRange","target","reduce","best","actualDamage","newHealth","killed","_enemy$reward$find","_enemy$reward$find2","goldGain","expGain","t","boss_type","aliveEnemies","drawLobby","ctx","fillStyle","fillRect","width","height","font","textAlign","fillText","expPercent","buttons","text","w","h","button","strokeStyle","lineWidth","strokeRect","drawDungeon","hasEnergy","canEnter","completed","drawBattle","lineCap","lineJoin","beginPath","moveTo","slice","lineTo","stroke","_gameState$selectedTo","config","isSelected","arc","PI","fill","setLineDash","barWidth","barHeight","healthPercent","entries","canAfford","drawResults","yPos","repeat","iconMap","exp","gem","item","unlock","draw","getContext","clearRect","gameLoop","requestAnimationFrame","cancelAnimationFrame","document","addEventListener","removeEventListener","style","display","flexDirection","alignItems","borderRadius","padding","border","maxHeight","overflowY","overflowX","children","ref","cursor","maxWidth","onClick","tabIndex","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","fontSize","_c","$RefreshReg$"],"sources":["/Users/jegaljin-u/workspace/thinking-guide/src/components/CompleteGameSystem.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\n\ninterface GameProps {\n  onAction: (eventType: string, data: any) => void;\n  isSimulating: boolean;\n  currentAction: string | null;\n  playerStats: any;\n  setPlayerStats: (stats: any) => void;\n  currentUser: any;\n}\n\ninterface PlayerData {\n  id: string;\n  name: string;\n  level: number;\n  experience: number;\n  gold: number;\n  gems: number;\n  energy: number;\n  maxEnergy: number;\n  unlockedStages: number;\n  inventory: InventoryItem[];\n  completedStages: CompletedStage[];\n  achievements: string[];\n  totalPlayTime: number;\n  lastLogin: string;\n}\n\ninterface InventoryItem {\n  id: string;\n  name: string;\n  type: 'weapon' | 'armor' | 'consumable' | 'material';\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  quantity: number;\n  stats: any;\n}\n\ninterface CompletedStage {\n  stageId: number;\n  bestScore: number;\n  completionTime: number;\n  starsEarned: number;\n  completedAt: string;\n}\n\ninterface StageData {\n  id: number;\n  name: string;\n  difficulty: 'Easy' | 'Normal' | 'Hard' | 'Expert' | 'Hell';\n  energyCost: number;\n  recommendedLevel: number;\n  rewards: StageReward[];\n  isUnlocked: boolean;\n  path: { x: number; y: number }[];\n  enemies: EnemyWave[];\n  background: string;\n}\n\ninterface StageReward {\n  type: 'gold' | 'exp' | 'item' | 'gem';\n  amount: number;\n  item?: InventoryItem;\n}\n\ninterface EnemyWave {\n  enemies: Enemy[];\n  spawnDelay: number;\n}\n\ninterface Enemy {\n  id: string;\n  x: number;\n  y: number;\n  health: number;\n  maxHealth: number;\n  speed: number;\n  type: string;\n  pathIndex: number;\n  alive: boolean;\n  armor: number;\n  reward: StageReward[];\n}\n\ninterface Tower {\n  id: string;\n  x: number;\n  y: number;\n  type: string;\n  level: number;\n  damage: number;\n  range: number;\n  attackSpeed: number;\n  lastAttack: number;\n  cost: number;\n  kills: number;\n}\n\ninterface GameState {\n  currentScene: 'lobby' | 'dungeon' | 'stage' | 'shop' | 'inventory' | 'battle' | 'stageComplete' | 'stageFailed';\n  selectedStage: number | null;\n  battleState: BattleState;\n  stageResults: StageResults | null;\n  cameraX: number;\n  cameraY: number;\n  selectedTower: Tower | null;\n  selectedTowerType: string | null;\n}\n\ninterface BattleState {\n  wave: number;\n  lives: number;\n  score: number;\n  isWaveActive: boolean;\n  towers: Tower[];\n  enemies: Enemy[];\n  waveProgress: number;\n  battleTime: number;\n}\n\ninterface StageResults {\n  victory: boolean;\n  score: number;\n  starsEarned: number;\n  timeBonus: number;\n  rewards: StageReward[];\n  newUnlocks: string[];\n}\n\nexport const CompleteGameSystem: React.FC<GameProps> = ({\n  onAction,\n  playerStats,\n  setPlayerStats,\n  currentUser\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const gameLoopRef = useRef<number>();\n  const [frameCount, setFrameCount] = useState(0);\n\n  // Player persistent data\n  const [playerData, setPlayerData] = useState<PlayerData>({\n    id: currentUser.user_id,\n    name: \"Hero\",\n    level: 1,\n    experience: 0,\n    gold: 1000,\n    gems: 50,\n    energy: 100,\n    maxEnergy: 100,\n    unlockedStages: 1,\n    inventory: [\n      { id: 'sword1', name: 'Iron Sword', type: 'weapon', rarity: 'common', quantity: 1, stats: { attack: 10 } },\n      { id: 'potion1', name: 'Health Potion', type: 'consumable', rarity: 'common', quantity: 5, stats: { heal: 50 } }\n    ],\n    completedStages: [],\n    achievements: [],\n    totalPlayTime: 0,\n    lastLogin: new Date().toISOString()\n  });\n\n  // Game state\n  const [gameState, setGameState] = useState<GameState>({\n    currentScene: 'lobby',\n    selectedStage: null,\n    battleState: {\n      wave: 1,\n      lives: 20,\n      score: 0,\n      isWaveActive: false,\n      towers: [],\n      enemies: [],\n      waveProgress: 0,\n      battleTime: 0\n    },\n    stageResults: null,\n    cameraX: 0,\n    cameraY: 0,\n    selectedTower: null,\n    selectedTowerType: null\n  });\n\n  // Stage definitions\n  const stageDefinitions: StageData[] = [\n    {\n      id: 1,\n      name: \"Green Fields\",\n      difficulty: 'Easy',\n      energyCost: 10,\n      recommendedLevel: 1,\n      rewards: [\n        { type: 'gold', amount: 100 },\n        { type: 'exp', amount: 50 }\n      ],\n      isUnlocked: true,\n      path: [\n        { x: 0, y: 200 }, { x: 150, y: 200 }, { x: 150, y: 100 },\n        { x: 300, y: 100 }, { x: 300, y: 300 }, { x: 600, y: 300 }\n      ],\n      enemies: [\n        { enemies: [], spawnDelay: 60 }\n      ],\n      background: '#2d5016'\n    },\n    {\n      id: 2,\n      name: \"Dark Forest\",\n      difficulty: 'Normal',\n      energyCost: 15,\n      recommendedLevel: 3,\n      rewards: [\n        { type: 'gold', amount: 200 },\n        { type: 'exp', amount: 80 },\n        { type: 'gem', amount: 5 }\n      ],\n      isUnlocked: false,\n      path: [\n        { x: 0, y: 150 }, { x: 100, y: 150 }, { x: 100, y: 50 },\n        { x: 250, y: 50 }, { x: 250, y: 250 }, { x: 400, y: 250 },\n        { x: 400, y: 100 }, { x: 600, y: 100 }\n      ],\n      enemies: [\n        { enemies: [], spawnDelay: 50 }\n      ],\n      background: '#1a3d1a'\n    },\n    {\n      id: 3,\n      name: \"Ancient Ruins\",\n      difficulty: 'Hard',\n      energyCost: 20,\n      recommendedLevel: 5,\n      rewards: [\n        { type: 'gold', amount: 350 },\n        { type: 'exp', amount: 120 },\n        { type: 'gem', amount: 10 }\n      ],\n      isUnlocked: false,\n      path: [\n        { x: 0, y: 200 }, { x: 80, y: 200 }, { x: 80, y: 80 },\n        { x: 200, y: 80 }, { x: 200, y: 320 }, { x: 320, y: 320 },\n        { x: 320, y: 120 }, { x: 500, y: 120 }, { x: 500, y: 280 },\n        { x: 600, y: 280 }\n      ],\n      enemies: [\n        { enemies: [], spawnDelay: 40 }\n      ],\n      background: '#4a4a2a'\n    },\n    {\n      id: 4,\n      name: \"Dragon's Lair\",\n      difficulty: 'Expert',\n      energyCost: 25,\n      recommendedLevel: 8,\n      rewards: [\n        { type: 'gold', amount: 500 },\n        { type: 'exp', amount: 200 },\n        { type: 'gem', amount: 20 }\n      ],\n      isUnlocked: false,\n      path: [\n        { x: 0, y: 200 }, { x: 150, y: 200 }, { x: 150, y: 100 },\n        { x: 450, y: 100 }, { x: 450, y: 300 }, { x: 600, y: 300 }\n      ],\n      enemies: [\n        { enemies: [], spawnDelay: 35 }\n      ],\n      background: '#5d1a1a'\n    },\n    {\n      id: 5,\n      name: \"Demon Realm\",\n      difficulty: 'Hell',\n      energyCost: 30,\n      recommendedLevel: 12,\n      rewards: [\n        { type: 'gold', amount: 1000 },\n        { type: 'exp', amount: 400 },\n        { type: 'gem', amount: 50 }\n      ],\n      isUnlocked: false,\n      path: [\n        { x: 0, y: 200 }, { x: 100, y: 200 }, { x: 200, y: 200 },\n        { x: 300, y: 200 }, { x: 400, y: 200 }, { x: 500, y: 200 },\n        { x: 600, y: 200 }\n      ],\n      enemies: [\n        { enemies: [], spawnDelay: 30 }\n      ],\n      background: '#2d0d0d'\n    }\n  ];\n\n  // Tower types\n  const towerTypes = {\n    'archer': { cost: 80, damage: 25, range: 120, speed: 30, color: '#8B4513', icon: '🏹' },\n    'cannon': { cost: 150, damage: 60, range: 100, speed: 60, color: '#696969', icon: '💣' },\n    'magic': { cost: 220, damage: 40, range: 140, speed: 40, color: '#9400D3', icon: '✨' },\n    'ice': { cost: 180, damage: 20, range: 110, speed: 35, color: '#00BFFF', icon: '❄️' },\n    'lightning': { cost: 300, damage: 80, range: 150, speed: 50, color: '#FFD700', icon: '⚡' }\n  };\n\n  // Enemy types\n  const enemyTypes = {\n    'goblin': { health: 80, speed: 2, reward: 15, color: '#228B22', icon: '👹', armor: 0 },\n    'orc': { health: 150, speed: 1.5, reward: 25, color: '#8B4513', icon: '🗡️', armor: 2 },\n    'troll': { health: 300, speed: 1, reward: 40, color: '#2F4F4F', icon: '🏔️', armor: 5 },\n    'dragon': { health: 500, speed: 0.8, reward: 80, color: '#DC143C', icon: '🐉', armor: 8 },\n    'demon': { health: 800, speed: 0.6, reward: 150, color: '#8B0000', icon: '😈', armor: 12 }\n  };\n\n  // Initialize session\n  useEffect(() => {\n    onAction('session_started', {\n      player_id: playerData.id,\n      player_level: playerData.level,\n      total_gold: playerData.gold,\n      unlocked_stages: playerData.unlockedStages,\n      login_streak: 1\n    });\n  }, []);\n\n  // Energy regeneration\n  useEffect(() => {\n    const energyRegen = setInterval(() => {\n      setPlayerData(prev => ({\n        ...prev,\n        energy: Math.min(prev.maxEnergy, prev.energy + 1)\n      }));\n    }, 60000); // 1 energy per minute\n\n    return () => clearInterval(energyRegen);\n  }, []);\n\n  // Level up check\n  useEffect(() => {\n    const expNeeded = playerData.level * 100;\n    if (playerData.experience >= expNeeded) {\n      const newLevel = playerData.level + 1;\n      setPlayerData(prev => ({\n        ...prev,\n        level: newLevel,\n        experience: prev.experience - expNeeded,\n        maxEnergy: prev.maxEnergy + 10\n      }));\n\n      onAction('player_level_up', {\n        player_id: playerData.id,\n        old_level: playerData.level,\n        new_level: newLevel,\n        new_max_energy: playerData.maxEnergy + 10,\n        total_playtime: playerData.totalPlayTime\n      });\n    }\n  }, [playerData.experience, playerData.level, playerData.maxEnergy, playerData.totalPlayTime, playerData.id, onAction]);\n\n  // Keyboard handling\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    // Prevent page scrolling\n    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'w', 'a', 's', 'd', ' ', 'Enter', 'Escape'].includes(e.key)) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    switch (e.key.toLowerCase()) {\n      case 'escape':\n        if (gameState.currentScene === 'battle') {\n          pauseBattle();\n        } else if (gameState.currentScene !== 'lobby') {\n          setGameState(prev => ({ ...prev, currentScene: 'lobby' }));\n        }\n        break;\n      case ' ':\n        if (gameState.currentScene === 'battle') {\n          startWave();\n        }\n        break;\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n        if (gameState.currentScene === 'battle') {\n          const towerIndex = parseInt(e.key) - 1;\n          const towerTypeKeys = Object.keys(towerTypes);\n          if (towerIndex < towerTypeKeys.length) {\n            setGameState(prev => ({\n              ...prev,\n              selectedTowerType: towerTypeKeys[towerIndex],\n              selectedTower: null\n            }));\n          }\n        }\n        break;\n    }\n  }, [gameState.currentScene]);\n\n  // Mouse/Click handling\n  const handleCanvasClick = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    switch (gameState.currentScene) {\n      case 'lobby':\n        handleLobbyClick(x, y);\n        break;\n      case 'dungeon':\n        handleDungeonClick(x, y);\n        break;\n      case 'battle':\n        handleBattleClick(x, y);\n        break;\n      case 'stageComplete':\n      case 'stageFailed':\n        handleResultsClick(x, y);\n        break;\n    }\n  }, [gameState.currentScene]);\n\n  const handleLobbyClick = (x: number, y: number) => {\n    // Dungeon button\n    if (x >= 250 && x <= 350 && y >= 200 && y <= 250) {\n      setGameState(prev => ({ ...prev, currentScene: 'dungeon' }));\n      \n      onAction('menu_navigation', {\n        player_id: playerData.id,\n        from_scene: 'lobby',\n        to_scene: 'dungeon',\n        player_level: playerData.level\n      });\n    }\n    \n    // Shop button\n    if (x >= 100 && x <= 200 && y >= 300 && y <= 350) {\n      setGameState(prev => ({ ...prev, currentScene: 'shop' }));\n      \n      onAction('menu_navigation', {\n        player_id: playerData.id,\n        from_scene: 'lobby',\n        to_scene: 'shop',\n        player_level: playerData.level\n      });\n    }\n\n    // Inventory button\n    if (x >= 400 && x <= 500 && y >= 300 && y <= 350) {\n      setGameState(prev => ({ ...prev, currentScene: 'inventory' }));\n      \n      onAction('menu_navigation', {\n        player_id: playerData.id,\n        from_scene: 'lobby',\n        to_scene: 'inventory',\n        player_level: playerData.level\n      });\n    }\n  };\n\n  const handleDungeonClick = (x: number, y: number) => {\n    // Stage selection\n    stageDefinitions.forEach((stage, index) => {\n      const stageX = 50 + (index % 3) * 200;\n      const stageY = 100 + Math.floor(index / 3) * 150;\n      \n      if (x >= stageX && x <= stageX + 150 && y >= stageY && y <= stageY + 100) {\n        if (stage.id <= playerData.unlockedStages && playerData.energy >= stage.energyCost) {\n          enterStage(stage.id);\n        }\n      }\n    });\n\n    // Back button\n    if (x >= 50 && x <= 150 && y >= 350 && y <= 380) {\n      setGameState(prev => ({ ...prev, currentScene: 'lobby' }));\n    }\n  };\n\n  const enterStage = (stageId: number) => {\n    const stage = stageDefinitions.find(s => s.id === stageId);\n    if (!stage) return;\n\n    // Consume energy\n    setPlayerData(prev => ({ ...prev, energy: prev.energy - stage.energyCost }));\n\n    // Initialize battle\n    setGameState(prev => ({\n      ...prev,\n      currentScene: 'battle',\n      selectedStage: stageId,\n      battleState: {\n        wave: 1,\n        lives: 20,\n        score: 0,\n        isWaveActive: false,\n        towers: [],\n        enemies: [],\n        waveProgress: 0,\n        battleTime: 0\n      }\n    }));\n\n    onAction('stage_entered', {\n      player_id: playerData.id,\n      stage_id: stageId,\n      stage_name: stage.name,\n      energy_cost: stage.energyCost,\n      remaining_energy: playerData.energy - stage.energyCost,\n      player_level: playerData.level,\n      recommended_level: stage.recommendedLevel\n    });\n  };\n\n  const handleBattleClick = (x: number, y: number) => {\n    // UI area (bottom 80px)\n    if (y > 320) return;\n\n    if (gameState.selectedTowerType) {\n      // Place tower\n      if (canPlaceTower(x, y)) {\n        placeTower(x, y, gameState.selectedTowerType);\n      }\n    } else {\n      // Select existing tower\n      const clickedTower = gameState.battleState.towers.find(tower => {\n        const distance = Math.sqrt((x - tower.x) ** 2 + (y - tower.y) ** 2);\n        return distance < 25;\n      });\n\n      if (clickedTower) {\n        setGameState(prev => ({\n          ...prev,\n          selectedTower: clickedTower,\n          selectedTowerType: null\n        }));\n      }\n    }\n  };\n\n  const canPlaceTower = (x: number, y: number): boolean => {\n    if (!gameState.selectedStage) return false;\n    \n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return false;\n\n    // Check distance from path\n    for (const point of stage.path) {\n      const distance = Math.sqrt((x - point.x) ** 2 + (y - point.y) ** 2);\n      if (distance < 40) return false;\n    }\n\n    // Check distance from other towers\n    for (const tower of gameState.battleState.towers) {\n      const distance = Math.sqrt((x - tower.x) ** 2 + (y - tower.y) ** 2);\n      if (distance < 50) return false;\n    }\n\n    return x > 25 && x < 575 && y > 25 && y < 295;\n  };\n\n  const placeTower = (x: number, y: number, type: string) => {\n    const towerConfig = towerTypes[type as keyof typeof towerTypes];\n    if (playerData.gold < towerConfig.cost) return;\n\n    const newTower: Tower = {\n      id: `tower_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      x, y, type,\n      level: 1,\n      damage: towerConfig.damage,\n      range: towerConfig.range,\n      attackSpeed: towerConfig.speed,\n      lastAttack: 0,\n      cost: towerConfig.cost,\n      kills: 0\n    };\n\n    setPlayerData(prev => ({ ...prev, gold: prev.gold - towerConfig.cost }));\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        towers: [...prev.battleState.towers, newTower]\n      },\n      selectedTowerType: null\n    }));\n\n    onAction('tower_placed', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      tower_type: type,\n      tower_cost: towerConfig.cost,\n      position_x: x,\n      position_y: y,\n      remaining_gold: playerData.gold - towerConfig.cost,\n      wave_number: gameState.battleState.wave\n    });\n  };\n\n  const startWave = () => {\n    if (gameState.battleState.isWaveActive) return;\n\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        isWaveActive: true,\n        waveProgress: 0\n      }\n    }));\n\n    onAction('wave_started', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      wave_number: gameState.battleState.wave,\n      towers_count: gameState.battleState.towers.length,\n      current_gold: playerData.gold\n    });\n\n    // Spawn enemies\n    spawnEnemyWave();\n  };\n\n  const spawnEnemyWave = () => {\n    if (!gameState.selectedStage) return;\n    \n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n\n    const enemyCount = 8 + gameState.battleState.wave * 2;\n    const enemyTypeKeys = Object.keys(enemyTypes);\n    \n    for (let i = 0; i < enemyCount; i++) {\n      setTimeout(() => {\n        const enemyType = enemyTypeKeys[Math.min(gameState.battleState.wave - 1, enemyTypeKeys.length - 1)];\n        const enemyConfig = enemyTypes[enemyType as keyof typeof enemyTypes];\n        \n        const newEnemy: Enemy = {\n          id: `enemy_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n          x: stage.path[0].x,\n          y: stage.path[0].y,\n          health: enemyConfig.health * gameState.selectedStage!,\n          maxHealth: enemyConfig.health * gameState.selectedStage!,\n          speed: enemyConfig.speed,\n          type: enemyType,\n          pathIndex: 0,\n          alive: true,\n          armor: enemyConfig.armor,\n          reward: [\n            { type: 'gold', amount: enemyConfig.reward },\n            { type: 'exp', amount: enemyConfig.reward / 2 }\n          ]\n        };\n\n        setGameState(prev => ({\n          ...prev,\n          battleState: {\n            ...prev.battleState,\n            enemies: [...prev.battleState.enemies, newEnemy]\n          }\n        }));\n      }, i * 800);\n    }\n  };\n\n  const pauseBattle = () => {\n    onAction('battle_paused', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      wave_number: gameState.battleState.wave,\n      battle_time: gameState.battleState.battleTime,\n      current_score: gameState.battleState.score\n    });\n  };\n\n  const completeStage = (victory: boolean) => {\n    if (!gameState.selectedStage) return;\n\n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n\n    const starsEarned = victory ? calculateStars() : 0;\n    const rewards = victory ? stage.rewards : [];\n    \n    // Apply rewards\n    if (victory) {\n      let goldGained = 0;\n      let expGained = 0;\n      let gemsGained = 0;\n\n      rewards.forEach(reward => {\n        switch (reward.type) {\n          case 'gold':\n            goldGained += reward.amount;\n            break;\n          case 'exp':\n            expGained += reward.amount;\n            break;\n          case 'gem':\n            gemsGained += reward.amount;\n            break;\n        }\n      });\n\n      setPlayerData(prev => ({\n        ...prev,\n        gold: prev.gold + goldGained,\n        experience: prev.experience + expGained,\n        gems: prev.gems + gemsGained,\n        unlockedStages: Math.max(prev.unlockedStages, gameState.selectedStage! + 1)\n      }));\n\n      // Record completion\n      const completion: CompletedStage = {\n        stageId: gameState.selectedStage,\n        bestScore: gameState.battleState.score,\n        completionTime: gameState.battleState.battleTime,\n        starsEarned,\n        completedAt: new Date().toISOString()\n      };\n\n      setPlayerData(prev => {\n        const existingIndex = prev.completedStages.findIndex(c => c.stageId === gameState.selectedStage);\n        const newCompletedStages = [...prev.completedStages];\n        \n        if (existingIndex >= 0) {\n          newCompletedStages[existingIndex] = completion;\n        } else {\n          newCompletedStages.push(completion);\n        }\n\n        return { ...prev, completedStages: newCompletedStages };\n      });\n    }\n\n    const results: StageResults = {\n      victory,\n      score: gameState.battleState.score,\n      starsEarned,\n      timeBonus: victory ? Math.max(0, 300 - gameState.battleState.battleTime) : 0,\n      rewards,\n      newUnlocks: victory && gameState.selectedStage === playerData.unlockedStages ? \n        [`Stage ${gameState.selectedStage + 1} Unlocked!`] : []\n    };\n\n    setGameState(prev => ({\n      ...prev,\n      currentScene: victory ? 'stageComplete' : 'stageFailed',\n      stageResults: results\n    }));\n\n    onAction(victory ? 'stage_victory' : 'stage_defeat', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      stage_name: stage.name,\n      final_score: gameState.battleState.score,\n      stars_earned: starsEarned,\n      battle_time: gameState.battleState.battleTime,\n      towers_built: gameState.battleState.towers.length,\n      waves_completed: gameState.battleState.wave,\n      gold_gained: victory ? rewards.find(r => r.type === 'gold')?.amount || 0 : 0,\n      exp_gained: victory ? rewards.find(r => r.type === 'exp')?.amount || 0 : 0,\n      new_unlocks: results.newUnlocks\n    });\n  };\n\n  const calculateStars = (): number => {\n    const baseScore = gameState.battleState.score;\n    const timeBonus = Math.max(0, 300 - gameState.battleState.battleTime);\n    const livesBonus = gameState.battleState.lives * 10;\n    \n    const totalScore = baseScore + timeBonus + livesBonus;\n    \n    if (totalScore >= 1000) return 3;\n    if (totalScore >= 500) return 2;\n    return 1;\n  };\n\n  const handleResultsClick = (x: number, y: number) => {\n    // Continue button\n    if (x >= 200 && x <= 400 && y >= 300 && y <= 350) {\n      setGameState(prev => ({\n        ...prev,\n        currentScene: 'lobby',\n        stageResults: null,\n        selectedStage: null\n      }));\n    }\n  };\n\n  // Game loop updates\n  const updateBattle = useCallback(() => {\n    if (gameState.currentScene !== 'battle' || !gameState.battleState.isWaveActive) return;\n\n    // Update battle time\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        battleTime: prev.battleState.battleTime + 1\n      }\n    }));\n\n    // Update enemies\n    updateEnemies();\n    \n    // Update towers\n    updateTowers();\n\n    // Check win/lose conditions\n    checkBattleEnd();\n  }, [gameState.currentScene, gameState.battleState.isWaveActive]);\n\n  const updateEnemies = () => {\n    if (!gameState.selectedStage) return;\n    \n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        enemies: prev.battleState.enemies.map(enemy => {\n          if (!enemy.alive) return enemy;\n\n          const currentTarget = stage.path[enemy.pathIndex + 1];\n          if (currentTarget) {\n            const dx = currentTarget.x - enemy.x;\n            const dy = currentTarget.y - enemy.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n\n            if (distance < 5) {\n              enemy.pathIndex++;\n              if (enemy.pathIndex >= stage.path.length - 1) {\n                // Enemy reached end\n                setGameState(prev2 => ({\n                  ...prev2,\n                  battleState: {\n                    ...prev2.battleState,\n                    lives: prev2.battleState.lives - 1\n                  }\n                }));\n\n                onAction('life_lost', {\n                  player_id: playerData.id,\n                  stage_id: gameState.selectedStage,\n                  enemy_type: enemy.type,\n                  remaining_lives: gameState.battleState.lives - 1,\n                  wave_number: gameState.battleState.wave\n                });\n\n                return { ...enemy, alive: false };\n              }\n            } else {\n              const moveX = (dx / distance) * enemy.speed;\n              const moveY = (dy / distance) * enemy.speed;\n              enemy.x += moveX;\n              enemy.y += moveY;\n            }\n          }\n\n          return enemy;\n        }).filter(enemy => enemy.alive || enemy.pathIndex < stage.path.length - 1)\n      }\n    }));\n  };\n\n  const updateTowers = () => {\n    gameState.battleState.towers.forEach(tower => {\n      if (frameCount - tower.lastAttack < tower.attackSpeed) return;\n\n      const enemiesInRange = gameState.battleState.enemies.filter(enemy => {\n        if (!enemy.alive) return false;\n        const distance = Math.sqrt((enemy.x - tower.x) ** 2 + (enemy.y - tower.y) ** 2);\n        return distance <= tower.range;\n      });\n\n      if (enemiesInRange.length > 0) {\n        const target = enemiesInRange.reduce((best, current) => \n          current.pathIndex > best.pathIndex ? current : best\n        );\n\n        const actualDamage = Math.max(1, tower.damage - target.armor);\n        \n        setGameState(prev => ({\n          ...prev,\n          battleState: {\n            ...prev.battleState,\n            enemies: prev.battleState.enemies.map(enemy => {\n              if (enemy.id === target.id) {\n                const newHealth = Math.max(0, enemy.health - actualDamage);\n                const killed = newHealth <= 0;\n\n                if (killed) {\n                  // Apply rewards\n                  const goldGain = enemy.reward.find(r => r.type === 'gold')?.amount || 0;\n                  const expGain = enemy.reward.find(r => r.type === 'exp')?.amount || 0;\n                  \n                  setPlayerData(prev2 => ({\n                    ...prev2,\n                    gold: prev2.gold + goldGain,\n                    experience: prev2.experience + expGain\n                  }));\n\n                  setGameState(prev2 => ({\n                    ...prev2,\n                    battleState: {\n                      ...prev2.battleState,\n                      score: prev2.battleState.score + goldGain * 10,\n                      towers: prev2.battleState.towers.map(t => \n                        t.id === tower.id ? { ...t, kills: t.kills + 1 } : t\n                      )\n                    }\n                  }));\n\n                  if (enemy.type === 'demon') {\n                    onAction('boss_defeated', {\n                      player_id: playerData.id,\n                      stage_id: gameState.selectedStage,\n                      boss_type: enemy.type,\n                      tower_type: tower.type,\n                      gold_gained: goldGain,\n                      exp_gained: expGain\n                    });\n                  }\n\n                  return { ...enemy, health: 0, alive: false };\n                }\n\n                return { ...enemy, health: newHealth };\n              }\n              return enemy;\n            })\n          }\n        }));\n\n        tower.lastAttack = frameCount;\n      }\n    });\n  };\n\n  const checkBattleEnd = () => {\n    if (gameState.battleState.lives <= 0) {\n      completeStage(false);\n      return;\n    }\n\n    const aliveEnemies = gameState.battleState.enemies.filter(e => e.alive);\n    if (aliveEnemies.length === 0 && gameState.battleState.waveProgress > 100) {\n      if (gameState.battleState.wave >= 3) {\n        completeStage(true);\n      } else {\n        // Next wave\n        setGameState(prev => ({\n          ...prev,\n          battleState: {\n            ...prev.battleState,\n            wave: prev.battleState.wave + 1,\n            isWaveActive: false,\n            waveProgress: 0\n          }\n        }));\n      }\n    }\n  };\n\n  // Drawing functions\n  const drawLobby = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    // Background\n    ctx.fillStyle = '#1a1a2e';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Title\n    ctx.fillStyle = '#FFD700';\n    ctx.font = 'bold 32px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('🏰 TOWER DEFENSE', canvas.width / 2, 80);\n\n    // Player info panel\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';\n    ctx.fillRect(50, 100, 500, 80);\n    \n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '16px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`${playerData.name} - Level ${playerData.level}`, 70, 125);\n    ctx.fillText(`Gold: ${playerData.gold} | Gems: ${playerData.gems}`, 70, 145);\n    ctx.fillText(`Energy: ${playerData.energy}/${playerData.maxEnergy}`, 70, 165);\n    \n    // Experience bar\n    const expNeeded = playerData.level * 100;\n    const expPercent = playerData.experience / expNeeded;\n    ctx.fillStyle = '#444';\n    ctx.fillRect(350, 140, 180, 12);\n    ctx.fillStyle = '#FFD700';\n    ctx.fillRect(350, 140, 180 * expPercent, 12);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '12px Arial';\n    ctx.fillText(`EXP: ${playerData.experience}/${expNeeded}`, 355, 150);\n\n    // Menu buttons\n    const buttons = [\n      { text: '⚔️ DUNGEON', x: 250, y: 200, w: 100, h: 50 },\n      { text: '🛒 SHOP', x: 100, y: 300, w: 100, h: 50 },\n      { text: '🎒 INVENTORY', x: 400, y: 300, w: 100, h: 50 }\n    ];\n\n    buttons.forEach(button => {\n      ctx.fillStyle = 'rgba(74, 144, 226, 0.8)';\n      ctx.fillRect(button.x, button.y, button.w, button.h);\n      \n      ctx.strokeStyle = '#FFFFFF';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(button.x, button.y, button.w, button.h);\n      \n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(button.text, button.x + button.w/2, button.y + button.h/2 + 5);\n    });\n  };\n\n  const drawDungeon = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    // Background\n    ctx.fillStyle = '#0f1419';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Title\n    ctx.fillStyle = '#FFD700';\n    ctx.font = 'bold 24px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('🗡️ DUNGEON SELECT', canvas.width / 2, 40);\n\n    // Stage cards\n    stageDefinitions.forEach((stage, index) => {\n      const x = 50 + (index % 3) * 200;\n      const y = 70 + Math.floor(index / 3) * 120;\n      \n      const isUnlocked = stage.id <= playerData.unlockedStages;\n      const hasEnergy = playerData.energy >= stage.energyCost;\n      const canEnter = isUnlocked && hasEnergy;\n\n      // Stage card background\n      ctx.fillStyle = canEnter ? 'rgba(74, 144, 226, 0.8)' : 'rgba(100, 100, 100, 0.5)';\n      ctx.fillRect(x, y, 150, 100);\n      \n      ctx.strokeStyle = canEnter ? '#4a90e2' : '#666';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(x, y, 150, 100);\n\n      // Stage info\n      ctx.fillStyle = canEnter ? '#FFFFFF' : '#999';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(`Stage ${stage.id}`, x + 75, y + 20);\n      \n      ctx.font = '12px Arial';\n      ctx.fillText(stage.name, x + 75, y + 35);\n      ctx.fillText(stage.difficulty, x + 75, y + 50);\n      ctx.fillText(`Energy: ${stage.energyCost}`, x + 75, y + 65);\n      ctx.fillText(`Lv.${stage.recommendedLevel} Rec.`, x + 75, y + 80);\n\n      // Lock indicator\n      if (!isUnlocked) {\n        ctx.fillStyle = '#FF0000';\n        ctx.font = 'bold 20px Arial';\n        ctx.fillText('🔒', x + 75, y + 55);\n      }\n\n      // Completion stars\n      const completed = playerData.completedStages.find(c => c.stageId === stage.id);\n      if (completed) {\n        for (let i = 0; i < completed.starsEarned; i++) {\n          ctx.fillStyle = '#FFD700';\n          ctx.font = '16px Arial';\n          ctx.fillText('⭐', x + 20 + i * 20, y + 95);\n        }\n      }\n    });\n\n    // Back button\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.8)';\n    ctx.fillRect(50, 350, 100, 30);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('← BACK', 100, 370);\n  };\n\n  const drawBattle = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    if (!gameState.selectedStage) return;\n    \n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n\n    // Background\n    ctx.fillStyle = stage.background;\n    ctx.fillRect(0, 0, canvas.width, 320);\n\n    // Draw path\n    ctx.strokeStyle = '#8B4513';\n    ctx.lineWidth = 20;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    \n    ctx.beginPath();\n    ctx.moveTo(stage.path[0].x, stage.path[0].y);\n    stage.path.slice(1).forEach(point => {\n      ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n\n    ctx.strokeStyle = '#DEB887';\n    ctx.lineWidth = 12;\n    ctx.beginPath();\n    ctx.moveTo(stage.path[0].x, stage.path[0].y);\n    stage.path.slice(1).forEach(point => {\n      ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n\n    // Draw towers\n    gameState.battleState.towers.forEach(tower => {\n      const config = towerTypes[tower.type as keyof typeof towerTypes];\n      const isSelected = gameState.selectedTower?.id === tower.id;\n      \n      // Tower base\n      ctx.fillStyle = isSelected ? '#FFD700' : '#696969';\n      ctx.beginPath();\n      ctx.arc(tower.x, tower.y, 18, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Tower body\n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(tower.x, tower.y, 14, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Tower icon\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '12px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(config.icon, tower.x, tower.y + 4);\n\n      // Level indicator\n      ctx.fillStyle = '#FFD700';\n      ctx.font = '10px Arial';\n      ctx.fillText(`Lv.${tower.level}`, tower.x, tower.y - 25);\n\n      // Range for selected tower\n      if (isSelected) {\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n        ctx.lineWidth = 2;\n        ctx.setLineDash([5, 5]);\n        ctx.beginPath();\n        ctx.arc(tower.x, tower.y, tower.range, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.setLineDash([]);\n      }\n    });\n\n    // Draw enemies\n    gameState.battleState.enemies.forEach(enemy => {\n      if (!enemy.alive) return;\n\n      const config = enemyTypes[enemy.type as keyof typeof enemyTypes];\n      \n      // Enemy body\n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(enemy.x, enemy.y, 12, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Enemy icon\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '12px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(config.icon, enemy.x, enemy.y + 4);\n\n      // Health bar\n      const barWidth = 20;\n      const barHeight = 4;\n      const healthPercent = enemy.health / enemy.maxHealth;\n      \n      ctx.fillStyle = '#FF0000';\n      ctx.fillRect(enemy.x - barWidth/2, enemy.y - 18, barWidth, barHeight);\n      ctx.fillStyle = '#00FF00';\n      ctx.fillRect(enemy.x - barWidth/2, enemy.y - 18, barWidth * healthPercent, barHeight);\n    });\n\n    // UI Panel\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n    ctx.fillRect(0, 320, canvas.width, 80);\n\n    // Battle stats\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`Stage ${gameState.selectedStage}: ${stage.name}`, 10, 340);\n    ctx.fillText(`Wave: ${gameState.battleState.wave}/3`, 10, 355);\n    ctx.fillText(`Lives: ${gameState.battleState.lives}`, 10, 370);\n    ctx.fillText(`Score: ${gameState.battleState.score}`, 10, 385);\n    ctx.fillText(`Gold: ${playerData.gold}`, 150, 340);\n    ctx.fillText(`Towers: ${gameState.battleState.towers.length}`, 150, 355);\n\n    // Tower selection buttons\n    Object.entries(towerTypes).forEach(([type, config], index) => {\n      const x = 300 + index * 60;\n      const y = 340;\n      const isSelected = gameState.selectedTowerType === type;\n      const canAfford = playerData.gold >= config.cost;\n\n      ctx.fillStyle = isSelected ? 'rgba(255, 255, 0, 0.5)' : \n                     canAfford ? 'rgba(255, 255, 255, 0.2)' : 'rgba(255, 0, 0, 0.2)';\n      ctx.fillRect(x, y, 50, 50);\n\n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(x + 25, y + 20, 12, 0, 2 * Math.PI);\n      ctx.fill();\n\n      ctx.fillStyle = canAfford ? '#FFFFFF' : '#FF6666';\n      ctx.font = '10px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(`${index + 1}: $${config.cost}`, x + 25, y + 45);\n    });\n\n    // Wave control\n    if (!gameState.battleState.isWaveActive) {\n      ctx.fillStyle = 'rgba(0, 255, 0, 0.8)';\n      ctx.fillRect(450, 350, 100, 30);\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('START WAVE', 500, 370);\n    }\n\n    // Pause button\n    ctx.fillStyle = 'rgba(255, 200, 0, 0.8)';\n    ctx.fillRect(560, 350, 30, 30);\n    ctx.fillStyle = '#000';\n    ctx.font = '16px Arial';\n    ctx.fillText('⏸', 575, 370);\n  };\n\n  const drawResults = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    if (!gameState.stageResults) return;\n\n    const results = gameState.stageResults;\n    \n    // Overlay\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Results panel\n    ctx.fillStyle = 'rgba(50, 50, 50, 0.95)';\n    ctx.fillRect(100, 50, 400, 300);\n    ctx.strokeStyle = '#FFD700';\n    ctx.lineWidth = 3;\n    ctx.strokeRect(100, 50, 400, 300);\n\n    // Title\n    ctx.fillStyle = results.victory ? '#00FF00' : '#FF0000';\n    ctx.font = 'bold 24px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(results.victory ? '🎉 VICTORY!' : '💀 DEFEAT!', 300, 90);\n\n    // Results\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '16px Arial';\n    ctx.textAlign = 'left';\n    \n    let yPos = 120;\n    ctx.fillText(`Score: ${results.score}`, 120, yPos);\n    yPos += 25;\n    \n    if (results.victory) {\n      ctx.fillText(`Stars: ${'⭐'.repeat(results.starsEarned)}`, 120, yPos);\n      yPos += 25;\n      \n      ctx.fillText('Rewards:', 120, yPos);\n      yPos += 20;\n      \n      results.rewards.forEach(reward => {\n        const iconMap: Record<string, string> = { gold: '💰', exp: '⭐', gem: '💎', item: '🎁' };\n        const icon = iconMap[reward.type] || '🎁';\n        ctx.fillText(`${icon} +${reward.amount}`, 140, yPos);\n        yPos += 20;\n      });\n\n      if (results.newUnlocks.length > 0) {\n        yPos += 10;\n        ctx.fillStyle = '#FFD700';\n        results.newUnlocks.forEach(unlock => {\n          ctx.fillText(`🔓 ${unlock}`, 120, yPos);\n          yPos += 20;\n        });\n      }\n    }\n\n    // Continue button\n    ctx.fillStyle = 'rgba(74, 144, 226, 0.8)';\n    ctx.fillRect(200, 300, 200, 50);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = 'bold 16px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('CONTINUE', 300, 330);\n  };\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    switch (gameState.currentScene) {\n      case 'lobby':\n        drawLobby(ctx, canvas);\n        break;\n      case 'dungeon':\n        drawDungeon(ctx, canvas);\n        break;\n      case 'battle':\n        drawBattle(ctx, canvas);\n        break;\n      case 'stageComplete':\n      case 'stageFailed':\n        drawBattle(ctx, canvas);\n        drawResults(ctx, canvas);\n        break;\n      case 'shop':\n        drawLobby(ctx, canvas);\n        // Add shop overlay\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = '#FFD700';\n        ctx.font = 'bold 24px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText('🛒 SHOP (Coming Soon)', canvas.width / 2, canvas.height / 2);\n        break;\n      case 'inventory':\n        drawLobby(ctx, canvas);\n        // Add inventory overlay\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = '#FFD700';\n        ctx.font = 'bold 24px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText('🎒 INVENTORY (Coming Soon)', canvas.width / 2, canvas.height / 2);\n        break;\n    }\n  }, [gameState, playerData]);\n\n  // Game loop\n  useEffect(() => {\n    const gameLoop = () => {\n      updateBattle();\n      draw();\n      setFrameCount(prev => prev + 1);\n      gameLoopRef.current = requestAnimationFrame(gameLoop);\n    };\n\n    gameLoopRef.current = requestAnimationFrame(gameLoop);\n\n    return () => {\n      if (gameLoopRef.current) {\n        cancelAnimationFrame(gameLoopRef.current);\n      }\n    };\n  }, [updateBattle, draw]);\n\n  // Event listeners\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown);\n    \n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n\n  return (\n    <div style={{ \n      display: 'flex', \n      flexDirection: 'column', \n      alignItems: 'center',\n      background: '#0a0a0a',\n      borderRadius: '12px',\n      padding: '16px',\n      border: '2px solid #2d3748',\n      maxHeight: '500px',\n      overflowY: 'auto',\n      overflowX: 'auto'\n    }}>\n      <canvas\n        ref={canvasRef}\n        width={600}\n        height={400}\n        style={{\n          border: '2px solid #4a5568',\n          borderRadius: '8px',\n          cursor: gameState.selectedTowerType ? 'crosshair' : 'pointer',\n          maxWidth: '100%',\n          height: 'auto'\n        }}\n        onClick={handleCanvasClick}\n        tabIndex={0}\n      />\n      \n      <div style={{\n        marginTop: '12px',\n        color: '#ffffff',\n        fontSize: '14px',\n        textAlign: 'center',\n        maxWidth: '600px',\n      }}>\n        <p>🏰 <strong>Complete Tower Defense RPG</strong></p>\n        <p>\n          {gameState.currentScene === 'lobby' && '로비에서 던전을 선택하세요!'}\n          {gameState.currentScene === 'dungeon' && '스테이지를 선택하세요!'}\n          {gameState.currentScene === 'battle' && `Stage ${gameState.selectedStage} - Space로 웨이브 시작!`}\n          {(gameState.currentScene === 'stageComplete' || gameState.currentScene === 'stageFailed') && '결과를 확인하고 계속하세요!'}\n        </p>\n        <p>Level {playerData.level} | Gold: {playerData.gold} | Energy: {playerData.energy}/{playerData.maxEnergy}</p>\n      </div>\n    </div>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}