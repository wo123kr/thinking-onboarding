{"ast":null,"code":"var _jsxFileName = \"/Users/jegaljin-u/workspace/thinking-guide/src/components/CompleteGameSystem.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CompleteGameSystem = ({\n  onAction,\n  playerStats,\n  setPlayerStats,\n  currentUser\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const gameLoopRef = useRef();\n  const [frameCount, setFrameCount] = useState(0);\n\n  // Player persistent data\n  const [playerData, setPlayerData] = useState({\n    id: currentUser.user_id,\n    name: \"Hero\",\n    level: 1,\n    experience: 0,\n    gold: 1000,\n    gems: 50,\n    energy: 100,\n    maxEnergy: 100,\n    unlockedStages: 1,\n    inventory: [{\n      id: 'sword1',\n      name: 'Iron Sword',\n      type: 'weapon',\n      rarity: 'common',\n      quantity: 1,\n      stats: {\n        attack: 10\n      },\n      description: 'A basic iron sword',\n      price: 100,\n      sellPrice: 50\n    }, {\n      id: 'potion1',\n      name: 'Health Potion',\n      type: 'consumable',\n      rarity: 'common',\n      quantity: 5,\n      stats: {\n        heal: 50\n      },\n      description: 'Restores health',\n      price: 25,\n      sellPrice: 10\n    }],\n    completedStages: [],\n    achievements: [],\n    totalPlayTime: 0,\n    lastLogin: new Date().toISOString()\n  });\n\n  // Game state\n  const [gameState, setGameState] = useState({\n    currentScene: 'lobby',\n    selectedStage: null,\n    battleState: {\n      wave: 1,\n      lives: 20,\n      score: 0,\n      isWaveActive: false,\n      towers: [],\n      enemies: [],\n      projectiles: [],\n      waveProgress: 0,\n      battleTime: 0,\n      totalEnemies: 0,\n      enemiesSpawned: 0,\n      nextEnemySpawn: 0\n    },\n    stageResults: null,\n    cameraX: 0,\n    cameraY: 0,\n    selectedTower: null,\n    selectedTowerType: null,\n    isPaused: false,\n    showUpgradeMenu: false,\n    hoverPosition: null,\n    shopCategory: 'tower',\n    selectedShopItem: null,\n    inventoryPage: 0\n  });\n\n  // Stage definitions\n  const stageDefinitions = [{\n    id: 1,\n    name: \"Green Fields\",\n    difficulty: 'Easy',\n    energyCost: 10,\n    recommendedLevel: 1,\n    rewards: [{\n      type: 'gold',\n      amount: 100\n    }, {\n      type: 'exp',\n      amount: 50\n    }],\n    isUnlocked: true,\n    path: [{\n      x: 0,\n      y: 200\n    }, {\n      x: 150,\n      y: 200\n    }, {\n      x: 150,\n      y: 100\n    }, {\n      x: 300,\n      y: 100\n    }, {\n      x: 300,\n      y: 300\n    }, {\n      x: 600,\n      y: 300\n    }],\n    enemies: [{\n      enemies: [],\n      spawnDelay: 60\n    }],\n    background: '#2d5016'\n  }, {\n    id: 2,\n    name: \"Dark Forest\",\n    difficulty: 'Normal',\n    energyCost: 15,\n    recommendedLevel: 3,\n    rewards: [{\n      type: 'gold',\n      amount: 200\n    }, {\n      type: 'exp',\n      amount: 80\n    }, {\n      type: 'gem',\n      amount: 5\n    }],\n    isUnlocked: false,\n    path: [{\n      x: 0,\n      y: 150\n    }, {\n      x: 100,\n      y: 150\n    }, {\n      x: 100,\n      y: 50\n    }, {\n      x: 250,\n      y: 50\n    }, {\n      x: 250,\n      y: 250\n    }, {\n      x: 400,\n      y: 250\n    }, {\n      x: 400,\n      y: 100\n    }, {\n      x: 600,\n      y: 100\n    }],\n    enemies: [{\n      enemies: [],\n      spawnDelay: 50\n    }],\n    background: '#1a3d1a'\n  }, {\n    id: 3,\n    name: \"Ancient Ruins\",\n    difficulty: 'Hard',\n    energyCost: 20,\n    recommendedLevel: 5,\n    rewards: [{\n      type: 'gold',\n      amount: 350\n    }, {\n      type: 'exp',\n      amount: 120\n    }, {\n      type: 'gem',\n      amount: 10\n    }],\n    isUnlocked: false,\n    path: [{\n      x: 0,\n      y: 200\n    }, {\n      x: 80,\n      y: 200\n    }, {\n      x: 80,\n      y: 80\n    }, {\n      x: 200,\n      y: 80\n    }, {\n      x: 200,\n      y: 320\n    }, {\n      x: 320,\n      y: 320\n    }, {\n      x: 320,\n      y: 120\n    }, {\n      x: 500,\n      y: 120\n    }, {\n      x: 500,\n      y: 280\n    }, {\n      x: 600,\n      y: 280\n    }],\n    enemies: [{\n      enemies: [],\n      spawnDelay: 40\n    }],\n    background: '#4a4a2a'\n  }, {\n    id: 4,\n    name: \"Dragon's Lair\",\n    difficulty: 'Expert',\n    energyCost: 25,\n    recommendedLevel: 8,\n    rewards: [{\n      type: 'gold',\n      amount: 500\n    }, {\n      type: 'exp',\n      amount: 200\n    }, {\n      type: 'gem',\n      amount: 20\n    }],\n    isUnlocked: false,\n    path: [{\n      x: 0,\n      y: 200\n    }, {\n      x: 150,\n      y: 200\n    }, {\n      x: 150,\n      y: 100\n    }, {\n      x: 450,\n      y: 100\n    }, {\n      x: 450,\n      y: 300\n    }, {\n      x: 600,\n      y: 300\n    }],\n    enemies: [{\n      enemies: [],\n      spawnDelay: 35\n    }],\n    background: '#5d1a1a'\n  }, {\n    id: 5,\n    name: \"Demon Realm\",\n    difficulty: 'Hell',\n    energyCost: 30,\n    recommendedLevel: 12,\n    rewards: [{\n      type: 'gold',\n      amount: 1000\n    }, {\n      type: 'exp',\n      amount: 400\n    }, {\n      type: 'gem',\n      amount: 50\n    }],\n    isUnlocked: false,\n    path: [{\n      x: 0,\n      y: 200\n    }, {\n      x: 100,\n      y: 200\n    }, {\n      x: 200,\n      y: 200\n    }, {\n      x: 300,\n      y: 200\n    }, {\n      x: 400,\n      y: 200\n    }, {\n      x: 500,\n      y: 200\n    }, {\n      x: 600,\n      y: 200\n    }],\n    enemies: [{\n      enemies: [],\n      spawnDelay: 30\n    }],\n    background: '#2d0d0d'\n  }];\n\n  // Tower types\n  const towerTypes = {\n    'archer': {\n      cost: 80,\n      damage: 25,\n      range: 120,\n      speed: 30,\n      color: '#8B4513',\n      icon: 'üèπ',\n      description: 'Fast shooting archer tower',\n      upgradeMultiplier: 1.5,\n      effects: []\n    },\n    'cannon': {\n      cost: 150,\n      damage: 60,\n      range: 100,\n      speed: 60,\n      color: '#696969',\n      icon: 'üí£',\n      description: 'Heavy damage explosive cannon',\n      upgradeMultiplier: 1.6,\n      effects: ['splash']\n    },\n    'magic': {\n      cost: 220,\n      damage: 40,\n      range: 140,\n      speed: 40,\n      color: '#9400D3',\n      icon: '‚ú®',\n      description: 'Magic tower with penetration',\n      upgradeMultiplier: 1.7,\n      effects: ['penetrate']\n    },\n    'ice': {\n      cost: 180,\n      damage: 20,\n      range: 110,\n      speed: 35,\n      color: '#00BFFF',\n      icon: '‚ùÑÔ∏è',\n      description: 'Slows enemies and deals damage',\n      upgradeMultiplier: 1.4,\n      effects: ['slow']\n    },\n    'lightning': {\n      cost: 300,\n      damage: 80,\n      range: 150,\n      speed: 50,\n      color: '#FFD700',\n      icon: '‚ö°',\n      description: 'Chain lightning that hits multiple enemies',\n      upgradeMultiplier: 1.8,\n      effects: ['chain']\n    }\n  };\n\n  // Enemy types\n  const enemyTypes = {\n    'goblin': {\n      health: 80,\n      speed: 2,\n      reward: 15,\n      color: '#228B22',\n      icon: 'üëπ',\n      armor: 0,\n      size: 12,\n      description: 'Fast and weak'\n    },\n    'orc': {\n      health: 150,\n      speed: 1.5,\n      reward: 25,\n      color: '#8B4513',\n      icon: 'üó°Ô∏è',\n      armor: 2,\n      size: 14,\n      description: 'Balanced warrior'\n    },\n    'troll': {\n      health: 300,\n      speed: 1,\n      reward: 40,\n      color: '#2F4F4F',\n      icon: 'üèîÔ∏è',\n      armor: 5,\n      size: 16,\n      description: 'Heavily armored'\n    },\n    'dragon': {\n      health: 500,\n      speed: 0.8,\n      reward: 80,\n      color: '#DC143C',\n      icon: 'üêâ',\n      armor: 8,\n      size: 20,\n      description: 'Flying boss'\n    },\n    'demon': {\n      health: 800,\n      speed: 0.6,\n      reward: 150,\n      color: '#8B0000',\n      icon: 'üòà',\n      armor: 12,\n      size: 24,\n      description: 'Ultimate boss'\n    }\n  };\n\n  // Shop items\n  const shopItems = [\n  // Tower upgrades\n  {\n    id: 'damage_boost',\n    name: 'Damage Boost Potion',\n    type: 'tower_upgrade',\n    price: 150,\n    currency: 'gold',\n    description: 'Increases tower damage by 25% for next battle',\n    effect: {\n      type: 'damage_boost',\n      value: 0.25,\n      duration: 1\n    },\n    category: 'tower'\n  }, {\n    id: 'range_extender',\n    name: 'Range Extender',\n    type: 'tower_upgrade',\n    price: 200,\n    currency: 'gold',\n    description: 'Increases tower range by 20% for next battle',\n    effect: {\n      type: 'range_boost',\n      value: 0.2,\n      duration: 1\n    },\n    category: 'tower'\n  }, {\n    id: 'speed_upgrade',\n    name: 'Attack Speed Boost',\n    type: 'tower_upgrade',\n    price: 175,\n    currency: 'gold',\n    description: 'Increases tower attack speed by 30% for next battle',\n    effect: {\n      type: 'speed_boost',\n      value: 0.3,\n      duration: 1\n    },\n    category: 'tower'\n  },\n  // Utility items\n  {\n    id: 'extra_life',\n    name: 'Extra Life',\n    type: 'consumable',\n    price: 100,\n    currency: 'gold',\n    description: 'Start next battle with +5 lives',\n    effect: {\n      type: 'extra_lives',\n      value: 5\n    },\n    category: 'utility'\n  }, {\n    id: 'starting_gold',\n    name: 'Treasure Chest',\n    type: 'consumable',\n    price: 80,\n    currency: 'gold',\n    description: 'Start next battle with +200 gold',\n    effect: {\n      type: 'starting_gold',\n      value: 200\n    },\n    category: 'utility'\n  }, {\n    id: 'energy_refill',\n    name: 'Energy Potion',\n    type: 'consumable',\n    price: 5,\n    currency: 'gem',\n    description: 'Instantly restore 20 energy',\n    effect: {\n      type: 'restore_energy',\n      value: 20\n    },\n    category: 'utility'\n  },\n  // Premium items\n  {\n    id: 'tower_blueprint_laser',\n    name: 'Laser Tower Blueprint',\n    type: 'blueprint',\n    price: 50,\n    currency: 'gem',\n    description: 'Unlocks powerful Laser Tower (Permanent)',\n    effect: {\n      type: 'unlock_tower',\n      value: 'laser'\n    },\n    requirements: {\n      level: 5,\n      completedStages: 3\n    },\n    category: 'premium'\n  }, {\n    id: 'double_exp',\n    name: 'Experience Multiplier',\n    type: 'consumable',\n    price: 20,\n    currency: 'gem',\n    description: 'Double EXP gain for 3 battles',\n    effect: {\n      type: 'exp_multiplier',\n      value: 2,\n      duration: 3\n    },\n    category: 'premium'\n  }, {\n    id: 'auto_upgrade',\n    name: 'Auto-Upgrade Kit',\n    type: 'consumable',\n    price: 30,\n    currency: 'gem',\n    description: 'Automatically upgrade first tower placed to level 2',\n    effect: {\n      type: 'auto_upgrade',\n      value: 1\n    },\n    category: 'premium'\n  }];\n\n  // Initialize session\n  useEffect(() => {\n    onAction('session_started', {\n      player_id: playerData.id,\n      player_level: playerData.level,\n      total_gold: playerData.gold,\n      unlocked_stages: playerData.unlockedStages,\n      login_streak: 1\n    });\n  }, []);\n\n  // Energy regeneration\n  useEffect(() => {\n    const energyRegen = setInterval(() => {\n      setPlayerData(prev => ({\n        ...prev,\n        energy: Math.min(prev.maxEnergy, prev.energy + 1)\n      }));\n    }, 60000); // 1 energy per minute\n\n    return () => clearInterval(energyRegen);\n  }, []);\n\n  // Level up check\n  useEffect(() => {\n    const expNeeded = playerData.level * 100;\n    if (playerData.experience >= expNeeded) {\n      const newLevel = playerData.level + 1;\n      setPlayerData(prev => ({\n        ...prev,\n        level: newLevel,\n        experience: prev.experience - expNeeded,\n        maxEnergy: prev.maxEnergy + 10\n      }));\n      onAction('player_level_up', {\n        player_id: playerData.id,\n        old_level: playerData.level,\n        new_level: newLevel,\n        new_max_energy: playerData.maxEnergy + 10,\n        total_playtime: playerData.totalPlayTime\n      });\n    }\n  }, [playerData.experience, playerData.level, playerData.maxEnergy, playerData.totalPlayTime, playerData.id, onAction]);\n\n  // Keyboard handling\n  const handleKeyDown = useCallback(e => {\n    // Prevent page scrolling\n    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'w', 'a', 's', 'd', ' ', 'Enter', 'Escape'].includes(e.key)) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    switch (e.key.toLowerCase()) {\n      case 'escape':\n        if (gameState.currentScene === 'battle') {\n          pauseBattle();\n        } else if (gameState.currentScene !== 'lobby') {\n          setGameState(prev => ({\n            ...prev,\n            currentScene: 'lobby'\n          }));\n        }\n        break;\n      case ' ':\n        if (gameState.currentScene === 'battle') {\n          startWave();\n        }\n        break;\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n        if (gameState.currentScene === 'battle') {\n          const towerIndex = parseInt(e.key) - 1;\n          const towerTypeKeys = Object.keys(towerTypes);\n          if (towerIndex < towerTypeKeys.length) {\n            setGameState(prev => ({\n              ...prev,\n              selectedTowerType: towerTypeKeys[towerIndex],\n              selectedTower: null\n            }));\n          }\n        }\n        break;\n    }\n  }, [gameState.currentScene]);\n\n  // Mouse/Click handling\n  const handleCanvasClick = useCallback(e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    switch (gameState.currentScene) {\n      case 'lobby':\n        handleLobbyClick(x, y);\n        break;\n      case 'dungeon':\n        handleDungeonClick(x, y);\n        break;\n      case 'battle':\n        handleBattleClick(x, y);\n        break;\n      case 'shop':\n        handleShopClick(x, y);\n        break;\n      case 'inventory':\n        handleInventoryClick(x, y);\n        break;\n      case 'stageComplete':\n      case 'stageFailed':\n        handleResultsClick(x, y);\n        break;\n    }\n  }, [gameState.currentScene]);\n  const handleLobbyClick = (x, y) => {\n    // Dungeon button\n    if (x >= 250 && x <= 350 && y >= 200 && y <= 250) {\n      setGameState(prev => ({\n        ...prev,\n        currentScene: 'dungeon'\n      }));\n      onAction('menu_navigation', {\n        player_id: playerData.id,\n        from_scene: 'lobby',\n        to_scene: 'dungeon',\n        player_level: playerData.level\n      });\n    }\n\n    // Shop button\n    if (x >= 100 && x <= 200 && y >= 300 && y <= 350) {\n      setGameState(prev => ({\n        ...prev,\n        currentScene: 'shop'\n      }));\n      onAction('menu_navigation', {\n        player_id: playerData.id,\n        from_scene: 'lobby',\n        to_scene: 'shop',\n        player_level: playerData.level\n      });\n    }\n\n    // Inventory button\n    if (x >= 400 && x <= 500 && y >= 300 && y <= 350) {\n      setGameState(prev => ({\n        ...prev,\n        currentScene: 'inventory'\n      }));\n      onAction('menu_navigation', {\n        player_id: playerData.id,\n        from_scene: 'lobby',\n        to_scene: 'inventory',\n        player_level: playerData.level\n      });\n    }\n  };\n  const handleDungeonClick = (x, y) => {\n    // Stage selection\n    stageDefinitions.forEach((stage, index) => {\n      const stageX = 50 + index % 3 * 200;\n      const stageY = 100 + Math.floor(index / 3) * 150;\n      if (x >= stageX && x <= stageX + 150 && y >= stageY && y <= stageY + 100) {\n        if (stage.id <= playerData.unlockedStages && playerData.energy >= stage.energyCost) {\n          enterStage(stage.id);\n        }\n      }\n    });\n\n    // Back button\n    if (x >= 50 && x <= 150 && y >= 350 && y <= 380) {\n      setGameState(prev => ({\n        ...prev,\n        currentScene: 'lobby'\n      }));\n    }\n  };\n  const enterStage = stageId => {\n    const stage = stageDefinitions.find(s => s.id === stageId);\n    if (!stage) return;\n\n    // Consume energy\n    setPlayerData(prev => ({\n      ...prev,\n      energy: prev.energy - stage.energyCost\n    }));\n\n    // Initialize battle\n    setGameState(prev => ({\n      ...prev,\n      currentScene: 'battle',\n      selectedStage: stageId,\n      battleState: {\n        wave: 1,\n        lives: 20,\n        score: 0,\n        isWaveActive: false,\n        towers: [],\n        enemies: [],\n        projectiles: [],\n        waveProgress: 0,\n        battleTime: 0,\n        totalEnemies: 8 + 1 * 2,\n        // 8 base + wave * 2\n        enemiesSpawned: 0,\n        nextEnemySpawn: 0\n      },\n      selectedTower: null,\n      selectedTowerType: null,\n      isPaused: false,\n      showUpgradeMenu: false\n    }));\n    onAction('stage_entered', {\n      player_id: playerData.id,\n      stage_id: stageId,\n      stage_name: stage.name,\n      energy_cost: stage.energyCost,\n      remaining_energy: playerData.energy - stage.energyCost,\n      player_level: playerData.level,\n      recommended_level: stage.recommendedLevel\n    });\n  };\n  const handleBattleClick = (x, y) => {\n    // Check if clicking on UI buttons first\n    if (y >= 340) {\n      // Tower selection buttons\n      Object.entries(towerTypes).forEach(([type, config], index) => {\n        const buttonX = 300 + index * 60;\n        const buttonY = 340;\n        if (x >= buttonX && x <= buttonX + 50 && y >= buttonY && y <= buttonY + 50) {\n          setGameState(prev => ({\n            ...prev,\n            selectedTowerType: type,\n            selectedTower: null\n          }));\n          return;\n        }\n      });\n\n      // Start wave button\n      if (!gameState.battleState.isWaveActive && x >= 450 && x <= 550 && y >= 350 && y <= 380) {\n        startWave();\n        return;\n      }\n      return; // Don't place towers in UI area\n    }\n\n    // Game area clicks\n    if (gameState.selectedTowerType) {\n      // Place tower\n      if (canPlaceTower(x, y)) {\n        placeTower(x, y, gameState.selectedTowerType);\n      } else {\n        // Give feedback why tower can't be placed\n        onAction('tower_placement_failed', {\n          player_id: playerData.id,\n          reason: 'invalid_location',\n          attempted_x: x,\n          attempted_y: y,\n          stage_id: gameState.selectedStage\n        });\n      }\n    } else {\n      // Select existing tower\n      const clickedTower = gameState.battleState.towers.find(tower => {\n        const distance = Math.sqrt((x - tower.x) ** 2 + (y - tower.y) ** 2);\n        return distance < 25;\n      });\n      if (clickedTower) {\n        setGameState(prev => ({\n          ...prev,\n          selectedTower: clickedTower,\n          selectedTowerType: null\n        }));\n      } else {\n        // Clear selection\n        setGameState(prev => ({\n          ...prev,\n          selectedTower: null,\n          selectedTowerType: null\n        }));\n      }\n    }\n  };\n  const canPlaceTower = (x, y) => {\n    if (!gameState.selectedStage) return false;\n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return false;\n\n    // Check if in valid game area (not in UI)\n    if (x < 25 || x > 575 || y < 25 || y > 320) return false;\n\n    // Check distance from path (reduced from 40 to 30)\n    for (const point of stage.path) {\n      const distance = Math.sqrt((x - point.x) ** 2 + (y - point.y) ** 2);\n      if (distance < 30) return false;\n    }\n\n    // Check distance from other towers (reduced from 50 to 40)\n    for (const tower of gameState.battleState.towers) {\n      const distance = Math.sqrt((x - tower.x) ** 2 + (y - tower.y) ** 2);\n      if (distance < 40) return false;\n    }\n    return true;\n  };\n  const placeTower = (x, y, type) => {\n    const towerConfig = towerTypes[type];\n    if (playerData.gold < towerConfig.cost) {\n      onAction('tower_placement_failed', {\n        player_id: playerData.id,\n        reason: 'insufficient_gold',\n        required_gold: towerConfig.cost,\n        current_gold: playerData.gold,\n        tower_type: type\n      });\n      return;\n    }\n    const newTower = {\n      id: `tower_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      x,\n      y,\n      type,\n      level: 1,\n      damage: towerConfig.damage,\n      range: towerConfig.range,\n      attackSpeed: towerConfig.speed,\n      lastAttack: 0,\n      cost: towerConfig.cost,\n      kills: 0,\n      upgradeCost: Math.floor(towerConfig.cost * towerConfig.upgradeMultiplier),\n      sellValue: Math.floor(towerConfig.cost * 0.7),\n      experience: 0\n    };\n    setPlayerData(prev => ({\n      ...prev,\n      gold: prev.gold - towerConfig.cost\n    }));\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        towers: [...prev.battleState.towers, newTower]\n      },\n      selectedTowerType: null\n    }));\n    onAction('tower_placed', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      tower_type: type,\n      tower_cost: towerConfig.cost,\n      position_x: x,\n      position_y: y,\n      remaining_gold: playerData.gold - towerConfig.cost,\n      wave_number: gameState.battleState.wave\n    });\n  };\n  const startWave = () => {\n    if (gameState.battleState.isWaveActive) return;\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        isWaveActive: true,\n        waveProgress: 0\n      }\n    }));\n    onAction('wave_started', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      wave_number: gameState.battleState.wave,\n      towers_count: gameState.battleState.towers.length,\n      current_gold: playerData.gold\n    });\n\n    // Spawn enemies\n    spawnEnemyWave();\n  };\n  const spawnEnemyWave = () => {\n    if (!gameState.selectedStage) return;\n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n    const enemyCount = 8 + gameState.battleState.wave * 2;\n    const enemyTypeKeys = Object.keys(enemyTypes);\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        totalEnemies: enemyCount,\n        enemiesSpawned: 0,\n        nextEnemySpawn: frameCount + 60 // Start spawning in 1 second\n      }\n    }));\n  };\n  const spawnSingleEnemy = () => {\n    if (!gameState.selectedStage) return;\n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n    const enemyTypeKeys = Object.keys(enemyTypes);\n    const waveTypeIndex = Math.min(gameState.battleState.wave - 1, enemyTypeKeys.length - 1);\n    const possibleTypes = enemyTypeKeys.slice(0, waveTypeIndex + 1);\n    const enemyType = possibleTypes[Math.floor(Math.random() * possibleTypes.length)];\n    const enemyConfig = enemyTypes[enemyType];\n    const newEnemy = {\n      id: `enemy_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      x: stage.path[0].x,\n      y: stage.path[0].y,\n      health: enemyConfig.health * gameState.selectedStage,\n      maxHealth: enemyConfig.health * gameState.selectedStage,\n      speed: enemyConfig.speed,\n      type: enemyType,\n      pathIndex: 0,\n      alive: true,\n      armor: enemyConfig.armor,\n      effects: [],\n      slowDuration: 0,\n      reward: [{\n        type: 'gold',\n        amount: enemyConfig.reward\n      }, {\n        type: 'exp',\n        amount: enemyConfig.reward / 2\n      }]\n    };\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        enemies: [...prev.battleState.enemies, newEnemy],\n        enemiesSpawned: prev.battleState.enemiesSpawned + 1,\n        nextEnemySpawn: frameCount + Math.max(30, 80 - gameState.battleState.wave * 5)\n      }\n    }));\n    onAction('enemy_spawned', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      enemy_type: enemyType,\n      enemy_id: newEnemy.id,\n      wave_number: gameState.battleState.wave,\n      enemies_spawned: gameState.battleState.enemiesSpawned + 1,\n      total_enemies: gameState.battleState.totalEnemies\n    });\n  };\n  const pauseBattle = () => {\n    onAction('battle_paused', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      wave_number: gameState.battleState.wave,\n      battle_time: gameState.battleState.battleTime,\n      current_score: gameState.battleState.score\n    });\n  };\n  const completeStage = victory => {\n    var _rewards$find, _rewards$find2;\n    if (!gameState.selectedStage) return;\n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n\n    // Stop all battle updates\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        isWaveActive: false\n      },\n      isPaused: true\n    }));\n    const starsEarned = victory ? calculateStars() : 0;\n    const rewards = victory ? stage.rewards : [];\n\n    // Apply rewards\n    if (victory) {\n      let goldGained = 0;\n      let expGained = 0;\n      let gemsGained = 0;\n      rewards.forEach(reward => {\n        switch (reward.type) {\n          case 'gold':\n            goldGained += reward.amount;\n            break;\n          case 'exp':\n            expGained += reward.amount;\n            break;\n          case 'gem':\n            gemsGained += reward.amount;\n            break;\n        }\n      });\n      setPlayerData(prev => ({\n        ...prev,\n        gold: prev.gold + goldGained,\n        experience: prev.experience + expGained,\n        gems: prev.gems + gemsGained,\n        unlockedStages: Math.max(prev.unlockedStages, gameState.selectedStage + 1)\n      }));\n\n      // Record completion\n      const completion = {\n        stageId: gameState.selectedStage,\n        bestScore: gameState.battleState.score,\n        completionTime: gameState.battleState.battleTime,\n        starsEarned,\n        completedAt: new Date().toISOString()\n      };\n      setPlayerData(prev => {\n        const existingIndex = prev.completedStages.findIndex(c => c.stageId === gameState.selectedStage);\n        const newCompletedStages = [...prev.completedStages];\n        if (existingIndex >= 0) {\n          newCompletedStages[existingIndex] = completion;\n        } else {\n          newCompletedStages.push(completion);\n        }\n        return {\n          ...prev,\n          completedStages: newCompletedStages\n        };\n      });\n    } else {\n      // On defeat, refund some energy (50%)\n      const energyRefund = Math.floor(stage.energyCost * 0.5);\n      setPlayerData(prev => ({\n        ...prev,\n        energy: Math.min(prev.maxEnergy, prev.energy + energyRefund)\n      }));\n    }\n    const results = {\n      victory,\n      score: gameState.battleState.score,\n      starsEarned,\n      timeBonus: victory ? Math.max(0, 300 - gameState.battleState.battleTime) : 0,\n      rewards: victory ? rewards : [{\n        type: 'gold',\n        amount: Math.floor(gameState.battleState.score / 100)\n      }],\n      // Small consolation reward\n      newUnlocks: victory && gameState.selectedStage === playerData.unlockedStages ? [`Stage ${gameState.selectedStage + 1} Unlocked!`] : []\n    };\n\n    // Show results screen with a delay\n    setTimeout(() => {\n      setGameState(prev => ({\n        ...prev,\n        currentScene: victory ? 'stageComplete' : 'stageFailed',\n        stageResults: results\n      }));\n    }, 1000);\n    onAction(victory ? 'stage_victory' : 'stage_defeat', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      stage_name: stage.name,\n      final_score: gameState.battleState.score,\n      stars_earned: starsEarned,\n      battle_time: gameState.battleState.battleTime,\n      towers_built: gameState.battleState.towers.length,\n      waves_completed: gameState.battleState.wave,\n      enemies_defeated: gameState.battleState.towers.reduce((sum, tower) => sum + tower.kills, 0),\n      gold_gained: victory ? ((_rewards$find = rewards.find(r => r.type === 'gold')) === null || _rewards$find === void 0 ? void 0 : _rewards$find.amount) || 0 : Math.floor(gameState.battleState.score / 100),\n      exp_gained: victory ? ((_rewards$find2 = rewards.find(r => r.type === 'exp')) === null || _rewards$find2 === void 0 ? void 0 : _rewards$find2.amount) || 0 : 0,\n      new_unlocks: results.newUnlocks,\n      failure_reason: victory ? null : gameState.battleState.lives <= 0 ? 'lives_depleted' : 'unknown'\n    });\n  };\n  const calculateStars = () => {\n    const baseScore = gameState.battleState.score;\n    const timeBonus = Math.max(0, 300 - gameState.battleState.battleTime);\n    const livesBonus = gameState.battleState.lives * 10;\n    const totalScore = baseScore + timeBonus + livesBonus;\n    if (totalScore >= 1000) return 3;\n    if (totalScore >= 500) return 2;\n    return 1;\n  };\n  const handleShopClick = (x, y) => {\n    // Category tabs\n    const categories = ['tower', 'utility', 'premium'];\n    categories.forEach((category, index) => {\n      const tabX = 80 + index * 150;\n      if (x >= tabX && x <= tabX + 140 && y >= 50 && y <= 80) {\n        setGameState(prev => ({\n          ...prev,\n          shopCategory: category\n        }));\n      }\n    });\n\n    // Shop items\n    const categoryItems = shopItems.filter(item => item.category === gameState.shopCategory);\n    categoryItems.forEach((item, index) => {\n      const itemX = 80 + index % 2 * 220;\n      const itemY = 100 + Math.floor(index / 2) * 100;\n      if (x >= itemX && x <= itemX + 200 && y >= itemY && y <= itemY + 90) {\n        purchaseItem(item);\n      }\n    });\n\n    // Back button\n    if (x >= 50 && x <= 150 && y >= 350 && y <= 380) {\n      setGameState(prev => ({\n        ...prev,\n        currentScene: 'lobby'\n      }));\n    }\n  };\n  const handleInventoryClick = (x, y) => {\n    // Inventory items\n    const itemsPerRow = 5;\n    const startY = 100;\n    playerData.inventory.forEach((item, index) => {\n      const itemX = 50 + index % itemsPerRow * 100;\n      const itemY = startY + Math.floor(index / itemsPerRow) * 80;\n      if (x >= itemX && x <= itemX + 80 && y >= itemY && y <= itemY + 60) {\n        handleInventoryItemUse(item);\n      }\n    });\n\n    // Back button\n    if (x >= 50 && x <= 150 && y >= 350 && y <= 380) {\n      setGameState(prev => ({\n        ...prev,\n        currentScene: 'lobby'\n      }));\n    }\n  };\n  const purchaseItem = item => {\n    // Check requirements\n    if (item.requirements) {\n      if (item.requirements.level && playerData.level < item.requirements.level) {\n        onAction('purchase_failed', {\n          player_id: playerData.id,\n          item_id: item.id,\n          reason: 'level_requirement',\n          required_level: item.requirements.level,\n          current_level: playerData.level\n        });\n        return;\n      }\n      if (item.requirements.completedStages && playerData.completedStages.length < item.requirements.completedStages) {\n        onAction('purchase_failed', {\n          player_id: playerData.id,\n          item_id: item.id,\n          reason: 'stage_requirement',\n          required_stages: item.requirements.completedStages,\n          completed_stages: playerData.completedStages.length\n        });\n        return;\n      }\n    }\n\n    // Check currency\n    const hasEnoughCurrency = item.currency === 'gold' ? playerData.gold >= item.price : playerData.gems >= item.price;\n    if (!hasEnoughCurrency) {\n      onAction('purchase_failed', {\n        player_id: playerData.id,\n        item_id: item.id,\n        reason: 'insufficient_currency',\n        required_amount: item.price,\n        current_amount: item.currency === 'gold' ? playerData.gold : playerData.gems,\n        currency: item.currency\n      });\n      return;\n    }\n\n    // Process purchase\n    if (item.currency === 'gold') {\n      setPlayerData(prev => ({\n        ...prev,\n        gold: prev.gold - item.price\n      }));\n    } else {\n      setPlayerData(prev => ({\n        ...prev,\n        gems: prev.gems - item.price\n      }));\n    }\n\n    // Add to inventory or apply effect\n    if (item.type === 'consumable' || item.type === 'tower_upgrade') {\n      const inventoryItem = {\n        id: item.id,\n        name: item.name,\n        type: item.type,\n        rarity: 'common',\n        quantity: 1,\n        stats: item.effect,\n        description: item.description,\n        price: item.price,\n        sellPrice: Math.floor(item.price * 0.5)\n      };\n      setPlayerData(prev => {\n        const existingIndex = prev.inventory.findIndex(i => i.id === item.id);\n        if (existingIndex >= 0) {\n          const newInventory = [...prev.inventory];\n          newInventory[existingIndex].quantity += 1;\n          return {\n            ...prev,\n            inventory: newInventory\n          };\n        } else {\n          return {\n            ...prev,\n            inventory: [...prev.inventory, inventoryItem]\n          };\n        }\n      });\n    }\n    onAction('item_purchased', {\n      player_id: playerData.id,\n      item_id: item.id,\n      item_name: item.name,\n      price: item.price,\n      currency: item.currency,\n      remaining_gold: item.currency === 'gold' ? playerData.gold - item.price : playerData.gold,\n      remaining_gems: item.currency === 'gem' ? playerData.gems - item.price : playerData.gems\n    });\n  };\n  const handleInventoryItemUse = item => {\n    var _item$stats;\n    if (item.quantity <= 0) return;\n\n    // Apply item effect based on type\n    switch ((_item$stats = item.stats) === null || _item$stats === void 0 ? void 0 : _item$stats.type) {\n      case 'restore_energy':\n        setPlayerData(prev => ({\n          ...prev,\n          energy: Math.min(prev.maxEnergy, prev.energy + item.stats.value)\n        }));\n        break;\n      // Other consumable effects would be applied in battle\n    }\n\n    // Reduce quantity\n    if (item.type === 'consumable') {\n      setPlayerData(prev => ({\n        ...prev,\n        inventory: prev.inventory.map(i => i.id === item.id ? {\n          ...i,\n          quantity: i.quantity - 1\n        } : i).filter(i => i.quantity > 0)\n      }));\n    }\n    onAction('item_used', {\n      player_id: playerData.id,\n      item_id: item.id,\n      item_name: item.name,\n      effect: item.stats\n    });\n  };\n  const handleResultsClick = (x, y) => {\n    var _gameState$stageResul;\n    // Continue button\n    if (x >= 200 && x <= 400 && y >= 300 && y <= 350) {\n      returnToLobby();\n    }\n\n    // Retry button (only for failures)\n    if (!((_gameState$stageResul = gameState.stageResults) !== null && _gameState$stageResul !== void 0 && _gameState$stageResul.victory) && x >= 100 && x <= 200 && y >= 320 && y <= 350) {\n      retryStage();\n    }\n  };\n  const returnToLobby = () => {\n    var _gameState$stageResul2;\n    setGameState(prev => ({\n      ...prev,\n      currentScene: 'lobby',\n      stageResults: null,\n      selectedStage: null,\n      battleState: {\n        wave: 1,\n        lives: 20,\n        score: 0,\n        isWaveActive: false,\n        towers: [],\n        enemies: [],\n        projectiles: [],\n        waveProgress: 0,\n        battleTime: 0,\n        totalEnemies: 0,\n        enemiesSpawned: 0,\n        nextEnemySpawn: 0\n      },\n      selectedTower: null,\n      selectedTowerType: null,\n      isPaused: false,\n      showUpgradeMenu: false\n    }));\n    onAction('returned_to_lobby', {\n      player_id: playerData.id,\n      from_scene: (_gameState$stageResul2 = gameState.stageResults) !== null && _gameState$stageResul2 !== void 0 && _gameState$stageResul2.victory ? 'stage_complete' : 'stage_failed',\n      player_level: playerData.level,\n      total_gold: playerData.gold,\n      total_energy: playerData.energy\n    });\n  };\n  const retryStage = () => {\n    if (!gameState.selectedStage) return;\n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage || playerData.energy < stage.energyCost) return;\n\n    // Consume energy again\n    setPlayerData(prev => ({\n      ...prev,\n      energy: prev.energy - stage.energyCost\n    }));\n\n    // Reset battle state\n    setGameState(prev => ({\n      ...prev,\n      currentScene: 'battle',\n      stageResults: null,\n      battleState: {\n        wave: 1,\n        lives: 20,\n        score: 0,\n        isWaveActive: false,\n        towers: [],\n        enemies: [],\n        projectiles: [],\n        waveProgress: 0,\n        battleTime: 0,\n        totalEnemies: 8 + 1 * 2,\n        enemiesSpawned: 0,\n        nextEnemySpawn: 0\n      },\n      selectedTower: null,\n      selectedTowerType: null,\n      isPaused: false,\n      showUpgradeMenu: false\n    }));\n    onAction('stage_retried', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      stage_name: stage.name,\n      energy_cost: stage.energyCost,\n      remaining_energy: playerData.energy - stage.energyCost\n    });\n  };\n\n  // Game loop updates\n  const updateBattle = useCallback(() => {\n    if (gameState.currentScene !== 'battle' || gameState.isPaused) return;\n\n    // Update battle time\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        battleTime: prev.battleState.battleTime + 1\n      }\n    }));\n\n    // Spawn enemies if wave is active\n    if (gameState.battleState.isWaveActive && frameCount >= gameState.battleState.nextEnemySpawn && gameState.battleState.enemiesSpawned < gameState.battleState.totalEnemies) {\n      spawnSingleEnemy();\n    }\n\n    // Update enemies\n    updateEnemies();\n\n    // Update towers\n    updateTowers();\n\n    // Update projectiles\n    updateProjectiles();\n\n    // Check win/lose conditions\n    checkBattleEnd();\n  }, [gameState.currentScene, gameState.battleState.isWaveActive, gameState.isPaused, frameCount]);\n  const updateEnemies = () => {\n    if (!gameState.selectedStage) return;\n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        enemies: prev.battleState.enemies.map(enemy => {\n          if (!enemy.alive) return enemy;\n\n          // Update slow effect\n          let currentSpeed = enemy.speed;\n          if (enemy.slowDuration > 0) {\n            currentSpeed *= 0.5; // 50% speed reduction\n            enemy.slowDuration--;\n          }\n          const currentTarget = stage.path[enemy.pathIndex + 1];\n          if (currentTarget) {\n            const dx = currentTarget.x - enemy.x;\n            const dy = currentTarget.y - enemy.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            if (distance < 5) {\n              enemy.pathIndex++;\n              if (enemy.pathIndex >= stage.path.length - 1) {\n                // Enemy reached end\n                setGameState(prev2 => ({\n                  ...prev2,\n                  battleState: {\n                    ...prev2.battleState,\n                    lives: prev2.battleState.lives - 1\n                  }\n                }));\n                onAction('life_lost', {\n                  player_id: playerData.id,\n                  stage_id: gameState.selectedStage,\n                  enemy_type: enemy.type,\n                  remaining_lives: gameState.battleState.lives - 1,\n                  wave_number: gameState.battleState.wave\n                });\n                return {\n                  ...enemy,\n                  alive: false\n                };\n              }\n            } else {\n              const moveX = dx / distance * currentSpeed;\n              const moveY = dy / distance * currentSpeed;\n              enemy.x += moveX;\n              enemy.y += moveY;\n            }\n          }\n          return enemy;\n        }).filter(enemy => enemy.alive || enemy.pathIndex < stage.path.length - 1)\n      }\n    }));\n  };\n  const updateProjectiles = () => {\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        projectiles: prev.battleState.projectiles.filter(proj => {\n          // Update trail\n          proj.trail.push({\n            x: proj.x,\n            y: proj.y\n          });\n          if (proj.trail.length > 5) {\n            proj.trail.shift();\n          }\n\n          // Move projectile towards target\n          const dx = proj.targetX - proj.x;\n          const dy = proj.targetY - proj.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance < 10) {\n            // Hit target - apply damage\n            hitTarget(proj);\n            return false; // Remove projectile\n          }\n\n          // Move projectile\n          const moveX = dx / distance * proj.speed;\n          const moveY = dy / distance * proj.speed;\n          proj.x += moveX;\n          proj.y += moveY;\n          return true; // Keep projectile\n        })\n      }\n    }));\n  };\n  const hitTarget = projectile => {\n    const targetEnemy = gameState.battleState.enemies.find(e => e.id === projectile.targetId);\n    if (!targetEnemy || !targetEnemy.alive) return;\n    const actualDamage = Math.max(1, projectile.damage - targetEnemy.armor);\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        enemies: prev.battleState.enemies.map(enemy => {\n          if (enemy.id === targetEnemy.id) {\n            const newHealth = Math.max(0, enemy.health - actualDamage);\n            const killed = newHealth <= 0;\n\n            // Apply tower effects\n            if (projectile.effects.includes('slow')) {\n              enemy.slowDuration = 180; // 3 seconds at 60fps\n            }\n            if (killed) {\n              var _enemy$reward$find, _enemy$reward$find2;\n              // Apply rewards\n              const goldGain = ((_enemy$reward$find = enemy.reward.find(r => r.type === 'gold')) === null || _enemy$reward$find === void 0 ? void 0 : _enemy$reward$find.amount) || 0;\n              const expGain = ((_enemy$reward$find2 = enemy.reward.find(r => r.type === 'exp')) === null || _enemy$reward$find2 === void 0 ? void 0 : _enemy$reward$find2.amount) || 0;\n              setPlayerData(prev2 => ({\n                ...prev2,\n                gold: prev2.gold + goldGain,\n                experience: prev2.experience + expGain\n              }));\n              setGameState(prev2 => ({\n                ...prev2,\n                battleState: {\n                  ...prev2.battleState,\n                  score: prev2.battleState.score + goldGain * 10,\n                  towers: prev2.battleState.towers.map(t => t.id === projectile.towerId ? {\n                    ...t,\n                    kills: t.kills + 1,\n                    experience: t.experience + expGain\n                  } : t)\n                }\n              }));\n              onAction('enemy_defeated', {\n                player_id: playerData.id,\n                stage_id: gameState.selectedStage,\n                enemy_type: enemy.type,\n                enemy_id: enemy.id,\n                tower_type: projectile.type,\n                tower_id: projectile.towerId,\n                damage_dealt: actualDamage,\n                gold_gained: goldGain,\n                exp_gained: expGain,\n                wave_number: gameState.battleState.wave\n              });\n              return {\n                ...enemy,\n                health: 0,\n                alive: false\n              };\n            } else {\n              onAction('enemy_damaged', {\n                player_id: playerData.id,\n                stage_id: gameState.selectedStage,\n                enemy_type: enemy.type,\n                enemy_id: enemy.id,\n                tower_type: projectile.type,\n                damage_dealt: actualDamage,\n                enemy_health_remaining: newHealth,\n                wave_number: gameState.battleState.wave\n              });\n              return {\n                ...enemy,\n                health: newHealth\n              };\n            }\n          }\n\n          // Chain lightning effect\n          if (projectile.effects.includes('chain') && enemy.id !== targetEnemy.id && enemy.alive) {\n            const distance = Math.sqrt((enemy.x - targetEnemy.x) ** 2 + (enemy.y - targetEnemy.y) ** 2);\n            if (distance < 80) {\n              const chainDamage = Math.floor(projectile.damage * 0.6);\n              const actualChainDamage = Math.max(1, chainDamage - enemy.armor);\n              const newHealth = Math.max(0, enemy.health - actualChainDamage);\n              return {\n                ...enemy,\n                health: newHealth,\n                alive: newHealth > 0\n              };\n            }\n          }\n          return enemy;\n        })\n      }\n    }));\n\n    // Splash damage for cannon\n    if (projectile.effects.includes('splash')) {\n      const splashTargets = gameState.battleState.enemies.filter(enemy => {\n        if (enemy.id === targetEnemy.id || !enemy.alive) return false;\n        const distance = Math.sqrt((enemy.x - targetEnemy.x) ** 2 + (enemy.y - targetEnemy.y) ** 2);\n        return distance < 60;\n      });\n      splashTargets.forEach(enemy => {\n        const splashDamage = Math.floor(projectile.damage * 0.5);\n        const actualSplashDamage = Math.max(1, splashDamage - enemy.armor);\n        setGameState(prev => ({\n          ...prev,\n          battleState: {\n            ...prev.battleState,\n            enemies: prev.battleState.enemies.map(e => e.id === enemy.id ? {\n              ...e,\n              health: Math.max(0, e.health - actualSplashDamage),\n              alive: e.health - actualSplashDamage > 0\n            } : e)\n          }\n        }));\n      });\n    }\n  };\n  const updateTowers = () => {\n    gameState.battleState.towers.forEach(tower => {\n      if (frameCount - tower.lastAttack < tower.attackSpeed) return;\n      const enemiesInRange = gameState.battleState.enemies.filter(enemy => {\n        if (!enemy.alive) return false;\n        const distance = Math.sqrt((enemy.x - tower.x) ** 2 + (enemy.y - tower.y) ** 2);\n        return distance <= tower.range;\n      });\n      if (enemiesInRange.length > 0) {\n        const target = enemiesInRange.reduce((best, current) => current.pathIndex > best.pathIndex ? current : best);\n\n        // Create projectile\n        const newProjectile = {\n          id: `proj_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n          x: tower.x,\n          y: tower.y,\n          targetX: target.x,\n          targetY: target.y,\n          targetId: target.id,\n          speed: 8,\n          damage: tower.damage,\n          type: tower.type,\n          towerId: tower.id,\n          effects: towerTypes[tower.type].effects,\n          trail: []\n        };\n        setGameState(prev => ({\n          ...prev,\n          battleState: {\n            ...prev.battleState,\n            projectiles: [...prev.battleState.projectiles, newProjectile],\n            towers: prev.battleState.towers.map(t => t.id === tower.id ? {\n              ...t,\n              lastAttack: frameCount\n            } : t)\n          }\n        }));\n        onAction('tower_attack', {\n          player_id: playerData.id,\n          stage_id: gameState.selectedStage,\n          tower_id: tower.id,\n          tower_type: tower.type,\n          target_enemy_id: target.id,\n          damage: tower.damage,\n          wave_number: gameState.battleState.wave\n        });\n      }\n    });\n  };\n  const checkBattleEnd = () => {\n    if (gameState.battleState.lives <= 0) {\n      completeStage(false);\n      return;\n    }\n    const aliveEnemies = gameState.battleState.enemies.filter(e => e.alive);\n    const allEnemiesSpawned = gameState.battleState.enemiesSpawned >= gameState.battleState.totalEnemies;\n    if (aliveEnemies.length === 0 && allEnemiesSpawned && gameState.battleState.isWaveActive) {\n      if (gameState.battleState.wave >= 3) {\n        completeStage(true);\n      } else {\n        // Next wave\n        const nextWave = gameState.battleState.wave + 1;\n        const nextTotalEnemies = 8 + nextWave * 2;\n        setGameState(prev => ({\n          ...prev,\n          battleState: {\n            ...prev.battleState,\n            wave: nextWave,\n            isWaveActive: false,\n            waveProgress: 0,\n            totalEnemies: nextTotalEnemies,\n            enemiesSpawned: 0,\n            nextEnemySpawn: 0\n          }\n        }));\n\n        // Wave completion bonus\n        const bonusGold = 25 + gameState.battleState.wave * 15;\n        setPlayerData(prev => ({\n          ...prev,\n          gold: prev.gold + bonusGold\n        }));\n        onAction('wave_completed', {\n          player_id: playerData.id,\n          stage_id: gameState.selectedStage,\n          wave_number: gameState.battleState.wave,\n          bonus_gold: bonusGold,\n          total_gold: playerData.gold + bonusGold,\n          score: gameState.battleState.score,\n          towers_count: gameState.battleState.towers.length\n        });\n      }\n    }\n  };\n\n  // Drawing functions\n  const drawLobby = (ctx, canvas) => {\n    // Background\n    ctx.fillStyle = '#1a1a2e';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Title\n    ctx.fillStyle = '#FFD700';\n    ctx.font = 'bold 32px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('üè∞ TOWER DEFENSE', canvas.width / 2, 80);\n\n    // Player info panel\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';\n    ctx.fillRect(50, 100, 500, 80);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '16px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`${playerData.name} - Level ${playerData.level}`, 70, 125);\n    ctx.fillText(`Gold: ${playerData.gold} | Gems: ${playerData.gems}`, 70, 145);\n    ctx.fillText(`Energy: ${playerData.energy}/${playerData.maxEnergy}`, 70, 165);\n\n    // Experience bar\n    const expNeeded = playerData.level * 100;\n    const expPercent = playerData.experience / expNeeded;\n    ctx.fillStyle = '#444';\n    ctx.fillRect(350, 140, 180, 12);\n    ctx.fillStyle = '#FFD700';\n    ctx.fillRect(350, 140, 180 * expPercent, 12);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '12px Arial';\n    ctx.fillText(`EXP: ${playerData.experience}/${expNeeded}`, 355, 150);\n\n    // Menu buttons\n    const buttons = [{\n      text: '‚öîÔ∏è DUNGEON',\n      x: 250,\n      y: 200,\n      w: 100,\n      h: 50\n    }, {\n      text: 'üõí SHOP',\n      x: 100,\n      y: 300,\n      w: 100,\n      h: 50\n    }, {\n      text: 'üéí INVENTORY',\n      x: 400,\n      y: 300,\n      w: 100,\n      h: 50\n    }];\n    buttons.forEach(button => {\n      ctx.fillStyle = 'rgba(74, 144, 226, 0.8)';\n      ctx.fillRect(button.x, button.y, button.w, button.h);\n      ctx.strokeStyle = '#FFFFFF';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(button.x, button.y, button.w, button.h);\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(button.text, button.x + button.w / 2, button.y + button.h / 2 + 5);\n    });\n  };\n  const drawDungeon = (ctx, canvas) => {\n    // Background\n    ctx.fillStyle = '#0f1419';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Title\n    ctx.fillStyle = '#FFD700';\n    ctx.font = 'bold 24px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('üó°Ô∏è DUNGEON SELECT', canvas.width / 2, 40);\n\n    // Stage cards\n    stageDefinitions.forEach((stage, index) => {\n      const x = 50 + index % 3 * 200;\n      const y = 70 + Math.floor(index / 3) * 120;\n      const isUnlocked = stage.id <= playerData.unlockedStages;\n      const hasEnergy = playerData.energy >= stage.energyCost;\n      const canEnter = isUnlocked && hasEnergy;\n\n      // Stage card background\n      ctx.fillStyle = canEnter ? 'rgba(74, 144, 226, 0.8)' : 'rgba(100, 100, 100, 0.5)';\n      ctx.fillRect(x, y, 150, 100);\n      ctx.strokeStyle = canEnter ? '#4a90e2' : '#666';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(x, y, 150, 100);\n\n      // Stage info\n      ctx.fillStyle = canEnter ? '#FFFFFF' : '#999';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(`Stage ${stage.id}`, x + 75, y + 20);\n      ctx.font = '12px Arial';\n      ctx.fillText(stage.name, x + 75, y + 35);\n      ctx.fillText(stage.difficulty, x + 75, y + 50);\n      ctx.fillText(`Energy: ${stage.energyCost}`, x + 75, y + 65);\n      ctx.fillText(`Lv.${stage.recommendedLevel} Rec.`, x + 75, y + 80);\n\n      // Lock indicator\n      if (!isUnlocked) {\n        ctx.fillStyle = '#FF0000';\n        ctx.font = 'bold 20px Arial';\n        ctx.fillText('üîí', x + 75, y + 55);\n      }\n\n      // Completion stars\n      const completed = playerData.completedStages.find(c => c.stageId === stage.id);\n      if (completed) {\n        for (let i = 0; i < completed.starsEarned; i++) {\n          ctx.fillStyle = '#FFD700';\n          ctx.font = '16px Arial';\n          ctx.fillText('‚≠ê', x + 20 + i * 20, y + 95);\n        }\n      }\n    });\n\n    // Back button\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.8)';\n    ctx.fillRect(50, 350, 100, 30);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('‚Üê BACK', 100, 370);\n  };\n  const drawBattle = (ctx, canvas) => {\n    if (!gameState.selectedStage) return;\n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n\n    // Background\n    ctx.fillStyle = stage.background;\n    ctx.fillRect(0, 0, canvas.width, 320);\n\n    // Draw path\n    ctx.strokeStyle = '#8B4513';\n    ctx.lineWidth = 20;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    ctx.beginPath();\n    ctx.moveTo(stage.path[0].x, stage.path[0].y);\n    stage.path.slice(1).forEach(point => {\n      ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n    ctx.strokeStyle = '#DEB887';\n    ctx.lineWidth = 12;\n    ctx.beginPath();\n    ctx.moveTo(stage.path[0].x, stage.path[0].y);\n    stage.path.slice(1).forEach(point => {\n      ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n\n    // Draw towers\n    gameState.battleState.towers.forEach(tower => {\n      var _gameState$selectedTo;\n      const config = towerTypes[tower.type];\n      const isSelected = ((_gameState$selectedTo = gameState.selectedTower) === null || _gameState$selectedTo === void 0 ? void 0 : _gameState$selectedTo.id) === tower.id;\n\n      // Tower base\n      ctx.fillStyle = isSelected ? '#FFD700' : '#696969';\n      ctx.beginPath();\n      ctx.arc(tower.x, tower.y, 18, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Tower body\n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(tower.x, tower.y, 14, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Tower icon\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '12px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(config.icon, tower.x, tower.y + 4);\n\n      // Level indicator\n      ctx.fillStyle = '#FFD700';\n      ctx.font = '10px Arial';\n      ctx.fillText(`Lv.${tower.level}`, tower.x, tower.y - 25);\n\n      // Range for selected tower\n      if (isSelected) {\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n        ctx.lineWidth = 2;\n        ctx.setLineDash([5, 5]);\n        ctx.beginPath();\n        ctx.arc(tower.x, tower.y, tower.range, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.setLineDash([]);\n      }\n    });\n\n    // Draw enemies\n    gameState.battleState.enemies.forEach(enemy => {\n      if (!enemy.alive) return;\n      const config = enemyTypes[enemy.type];\n      const size = config.size;\n\n      // Enemy shadow\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n      ctx.beginPath();\n      ctx.ellipse(enemy.x + 2, enemy.y + 2, size * 0.8, size * 0.4, 0, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Enemy body with slow effect\n      if (enemy.slowDuration > 0) {\n        ctx.fillStyle = '#87CEEB'; // Light blue for slow effect\n        ctx.beginPath();\n        ctx.arc(enemy.x, enemy.y, size + 3, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(enemy.x, enemy.y, size, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Enemy border\n      ctx.strokeStyle = '#000000';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Enemy icon\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = `${Math.max(10, size)}px Arial`;\n      ctx.textAlign = 'center';\n      ctx.fillText(config.icon, enemy.x, enemy.y + 4);\n\n      // Health bar\n      const barWidth = size * 1.5;\n      const barHeight = 4;\n      const healthPercent = enemy.health / enemy.maxHealth;\n      ctx.fillStyle = '#000000';\n      ctx.fillRect(enemy.x - barWidth / 2 - 1, enemy.y - size - 12, barWidth + 2, barHeight + 2);\n      ctx.fillStyle = '#FF0000';\n      ctx.fillRect(enemy.x - barWidth / 2, enemy.y - size - 11, barWidth, barHeight);\n      ctx.fillStyle = healthPercent > 0.5 ? '#00FF00' : healthPercent > 0.25 ? '#FFFF00' : '#FF8800';\n      ctx.fillRect(enemy.x - barWidth / 2, enemy.y - size - 11, barWidth * healthPercent, barHeight);\n\n      // Armor indicator\n      if (enemy.armor > 0) {\n        ctx.fillStyle = '#C0C0C0';\n        ctx.font = '8px Arial';\n        ctx.fillText(`üõ°${enemy.armor}`, enemy.x, enemy.y - size - 16);\n      }\n    });\n\n    // Draw projectiles\n    gameState.battleState.projectiles.forEach(proj => {\n      const config = towerTypes[proj.type];\n\n      // Draw trail\n      proj.trail.forEach((point, index) => {\n        const alpha = (index + 1) / proj.trail.length * 0.5;\n        ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, 2, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n\n      // Draw projectile based on type\n      switch (proj.type) {\n        case 'archer':\n          ctx.fillStyle = '#8B4513';\n          ctx.beginPath();\n          ctx.arc(proj.x, proj.y, 3, 0, 2 * Math.PI);\n          ctx.fill();\n          break;\n        case 'cannon':\n          ctx.fillStyle = '#000000';\n          ctx.beginPath();\n          ctx.arc(proj.x, proj.y, 5, 0, 2 * Math.PI);\n          ctx.fill();\n          ctx.fillStyle = '#FF4500';\n          ctx.beginPath();\n          ctx.arc(proj.x, proj.y, 3, 0, 2 * Math.PI);\n          ctx.fill();\n          break;\n        case 'magic':\n          ctx.fillStyle = '#9400D3';\n          ctx.beginPath();\n          ctx.arc(proj.x, proj.y, 4, 0, 2 * Math.PI);\n          ctx.fill();\n          // Magic sparkle effect\n          for (let i = 0; i < 3; i++) {\n            const angle = (frameCount * 0.1 + i * Math.PI * 2 / 3) % (Math.PI * 2);\n            const sparkleX = proj.x + Math.cos(angle) * 8;\n            const sparkleY = proj.y + Math.sin(angle) * 8;\n            ctx.fillStyle = '#DDA0DD';\n            ctx.beginPath();\n            ctx.arc(sparkleX, sparkleY, 1, 0, 2 * Math.PI);\n            ctx.fill();\n          }\n          break;\n        case 'ice':\n          ctx.fillStyle = '#00BFFF';\n          ctx.beginPath();\n          ctx.arc(proj.x, proj.y, 4, 0, 2 * Math.PI);\n          ctx.fill();\n          ctx.fillStyle = '#E0FFFF';\n          ctx.beginPath();\n          ctx.arc(proj.x, proj.y, 2, 0, 2 * Math.PI);\n          ctx.fill();\n          break;\n        case 'lightning':\n          ctx.strokeStyle = '#FFD700';\n          ctx.lineWidth = 3;\n          ctx.beginPath();\n          ctx.moveTo(proj.x - 4, proj.y);\n          ctx.lineTo(proj.x + 4, proj.y);\n          ctx.moveTo(proj.x, proj.y - 4);\n          ctx.lineTo(proj.x, proj.y + 4);\n          ctx.stroke();\n          ctx.fillStyle = '#FFFF00';\n          ctx.beginPath();\n          ctx.arc(proj.x, proj.y, 3, 0, 2 * Math.PI);\n          ctx.fill();\n          break;\n      }\n    });\n\n    // UI Panel\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n    ctx.fillRect(0, 320, canvas.width, 80);\n\n    // Battle stats\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`Stage ${gameState.selectedStage}: ${stage.name}`, 10, 340);\n    ctx.fillText(`Wave: ${gameState.battleState.wave}/3`, 10, 355);\n    ctx.fillText(`Lives: ${gameState.battleState.lives}`, 10, 370);\n    ctx.fillText(`Score: ${gameState.battleState.score}`, 10, 385);\n    ctx.fillText(`Gold: ${playerData.gold}`, 150, 340);\n    ctx.fillText(`Towers: ${gameState.battleState.towers.length}`, 150, 355);\n\n    // Tower selection buttons\n    Object.entries(towerTypes).forEach(([type, config], index) => {\n      const x = 300 + index * 60;\n      const y = 340;\n      const isSelected = gameState.selectedTowerType === type;\n      const canAfford = playerData.gold >= config.cost;\n      ctx.fillStyle = isSelected ? 'rgba(255, 255, 0, 0.5)' : canAfford ? 'rgba(255, 255, 255, 0.2)' : 'rgba(255, 0, 0, 0.2)';\n      ctx.fillRect(x, y, 50, 50);\n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(x + 25, y + 20, 12, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.fillStyle = canAfford ? '#FFFFFF' : '#FF6666';\n      ctx.font = '10px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(`${index + 1}: $${config.cost}`, x + 25, y + 45);\n    });\n\n    // Wave control\n    if (!gameState.battleState.isWaveActive) {\n      ctx.fillStyle = 'rgba(0, 255, 0, 0.8)';\n      ctx.fillRect(450, 350, 100, 30);\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('START WAVE', 500, 370);\n    }\n\n    // Pause button\n    ctx.fillStyle = 'rgba(255, 200, 0, 0.8)';\n    ctx.fillRect(560, 350, 30, 30);\n    ctx.fillStyle = '#000';\n    ctx.font = '16px Arial';\n    ctx.fillText('‚è∏', 575, 370);\n  };\n  const drawResults = (ctx, canvas) => {\n    if (!gameState.stageResults) return;\n    const results = gameState.stageResults;\n\n    // Overlay with animation\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Results panel with glow effect\n    ctx.shadowColor = results.victory ? '#00FF00' : '#FF0000';\n    ctx.shadowBlur = 20;\n    ctx.fillStyle = 'rgba(30, 30, 30, 0.95)';\n    ctx.fillRect(80, 40, 440, 320);\n    ctx.shadowBlur = 0;\n    ctx.strokeStyle = results.victory ? '#FFD700' : '#FF4444';\n    ctx.lineWidth = 3;\n    ctx.strokeRect(80, 40, 440, 320);\n\n    // Animated title\n    const titleScale = 1 + Math.sin(frameCount * 0.1) * 0.1;\n    ctx.save();\n    ctx.translate(300, 80);\n    ctx.scale(titleScale, titleScale);\n    ctx.fillStyle = results.victory ? '#00FF00' : '#FF0000';\n    ctx.font = 'bold 28px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(results.victory ? 'üéâ VICTORY!' : 'üíÄ DEFEAT!', 0, 0);\n    ctx.restore();\n\n    // Results with better formatting\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '18px Arial';\n    ctx.textAlign = 'left';\n    let yPos = 120;\n\n    // Score with icon\n    ctx.fillText(`üèÜ Score: ${results.score.toLocaleString()}`, 100, yPos);\n    yPos += 30;\n    if (results.victory) {\n      // Stars with animation\n      ctx.fillText('Stars Earned:', 100, yPos);\n      for (let i = 0; i < results.starsEarned; i++) {\n        const starScale = 1 + Math.sin((frameCount + i * 20) * 0.15) * 0.2;\n        ctx.save();\n        ctx.translate(250 + i * 30, yPos - 5);\n        ctx.scale(starScale, starScale);\n        ctx.font = '20px Arial';\n        ctx.fillText('‚≠ê', 0, 0);\n        ctx.restore();\n      }\n      yPos += 35;\n\n      // Rewards section\n      ctx.fillStyle = '#FFD700';\n      ctx.font = 'bold 16px Arial';\n      ctx.fillText('REWARDS:', 100, yPos);\n      yPos += 25;\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '14px Arial';\n      results.rewards.forEach(reward => {\n        const iconMap = {\n          gold: 'üí∞',\n          exp: '‚≠ê',\n          gem: 'üíé',\n          item: 'üéÅ'\n        };\n        const icon = iconMap[reward.type] || 'üéÅ';\n        ctx.fillText(`${icon} +${reward.amount.toLocaleString()}`, 120, yPos);\n        yPos += 22;\n      });\n      if (results.newUnlocks.length > 0) {\n        yPos += 10;\n        ctx.fillStyle = '#FFD700';\n        ctx.font = 'bold 14px Arial';\n        results.newUnlocks.forEach(unlock => {\n          ctx.fillText(`üîì ${unlock}`, 100, yPos);\n          yPos += 22;\n        });\n      }\n    } else {\n      // Defeat specific information\n      ctx.fillStyle = '#FFAAAA';\n      ctx.font = '16px Arial';\n      ctx.fillText(`üí• Wave Reached: ${gameState.battleState.wave}`, 100, yPos);\n      yPos += 25;\n      ctx.fillText(`üè∞ Towers Built: ${gameState.battleState.towers.length}`, 100, yPos);\n      yPos += 25;\n      ctx.fillText(`üíÄ Enemies Defeated: ${gameState.battleState.towers.reduce((sum, tower) => sum + tower.kills, 0)}`, 100, yPos);\n      yPos += 30;\n\n      // Consolation reward\n      if (results.rewards.length > 0) {\n        ctx.fillStyle = '#FFFF99';\n        ctx.font = '14px Arial';\n        ctx.fillText('Consolation Reward:', 100, yPos);\n        yPos += 20;\n        ctx.fillStyle = '#FFFFFF';\n        results.rewards.forEach(reward => {\n          ctx.fillText(`üí∞ +${reward.amount} Gold`, 120, yPos);\n          yPos += 20;\n        });\n      }\n    }\n\n    // Buttons\n    if (!results.victory) {\n      var _stageDefinitions$fin;\n      // Retry button (only for failures)\n      const hasEnergy = gameState.selectedStage ? playerData.energy >= (((_stageDefinitions$fin = stageDefinitions.find(s => s.id === gameState.selectedStage)) === null || _stageDefinitions$fin === void 0 ? void 0 : _stageDefinitions$fin.energyCost) || 0) : false;\n      ctx.fillStyle = hasEnergy ? 'rgba(255, 165, 0, 0.8)' : 'rgba(128, 128, 128, 0.5)';\n      ctx.fillRect(100, 320, 120, 30);\n      ctx.strokeStyle = hasEnergy ? '#FFA500' : '#666666';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(100, 320, 120, 30);\n      ctx.fillStyle = hasEnergy ? '#FFFFFF' : '#AAAAAA';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(hasEnergy ? 'üîÑ RETRY' : 'NO ENERGY', 160, 340);\n    }\n\n    // Continue button\n    ctx.fillStyle = 'rgba(74, 144, 226, 0.8)';\n    ctx.fillRect(results.victory ? 250 : 280, 320, 140, 30);\n    ctx.strokeStyle = '#4A90E2';\n    ctx.lineWidth = 2;\n    ctx.strokeRect(results.victory ? 250 : 280, 320, 140, 30);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = 'bold 14px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('üè† LOBBY', results.victory ? 320 : 350, 340);\n\n    // Instructions\n    ctx.fillStyle = '#CCCCCC';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('Click buttons to continue', 300, 370);\n  };\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    switch (gameState.currentScene) {\n      case 'lobby':\n        drawLobby(ctx, canvas);\n        break;\n      case 'dungeon':\n        drawDungeon(ctx, canvas);\n        break;\n      case 'battle':\n        drawBattle(ctx, canvas);\n        break;\n      case 'stageComplete':\n      case 'stageFailed':\n        drawBattle(ctx, canvas);\n        drawResults(ctx, canvas);\n        break;\n      case 'shop':\n        drawLobby(ctx, canvas);\n        // Add shop overlay\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = '#FFD700';\n        ctx.font = 'bold 24px Arial';\n        ctx.textAlign = 'center';\n        drawShop(ctx, canvas);\n        break;\n      case 'inventory':\n        drawLobby(ctx, canvas);\n        // Add inventory overlay\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = '#FFD700';\n        ctx.font = 'bold 24px Arial';\n        ctx.textAlign = 'center';\n        drawInventory(ctx, canvas);\n        break;\n    }\n  }, [gameState, playerData]);\n  const drawShop = (ctx, canvas) => {\n    // Background\n    ctx.fillStyle = '#1a1a2e';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Title\n    ctx.fillStyle = '#FFD700';\n    ctx.font = 'bold 24px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('üõçÔ∏è MAGIC SHOP', canvas.width / 2, 30);\n\n    // Player currency display\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`üí∞ Gold: ${playerData.gold.toLocaleString()}`, 50, 370);\n    ctx.fillText(`üíé Gems: ${playerData.gems.toLocaleString()}`, 200, 370);\n    ctx.fillText(`Level: ${playerData.level}`, 350, 370);\n\n    // Category tabs\n    const categories = [{\n      id: 'tower',\n      name: 'TOWER UPGRADES',\n      icon: 'üè∞'\n    }, {\n      id: 'utility',\n      name: 'UTILITY',\n      icon: 'üß™'\n    }, {\n      id: 'premium',\n      name: 'PREMIUM',\n      icon: '‚ú®'\n    }];\n    categories.forEach((category, index) => {\n      const tabX = 80 + index * 150;\n      const isSelected = gameState.shopCategory === category.id;\n      ctx.fillStyle = isSelected ? 'rgba(255, 215, 0, 0.8)' : 'rgba(100, 100, 100, 0.6)';\n      ctx.fillRect(tabX, 50, 140, 30);\n      ctx.strokeStyle = isSelected ? '#FFD700' : '#666';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(tabX, 50, 140, 30);\n      ctx.fillStyle = isSelected ? '#000' : '#FFF';\n      ctx.font = 'bold 12px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(`${category.icon} ${category.name}`, tabX + 70, 70);\n    });\n\n    // Shop items\n    const categoryItems = shopItems.filter(item => item.category === gameState.shopCategory);\n    categoryItems.forEach((item, index) => {\n      const itemX = 80 + index % 2 * 220;\n      const itemY = 100 + Math.floor(index / 2) * 100;\n\n      // Check if player can afford and meets requirements\n      const canAfford = item.currency === 'gold' ? playerData.gold >= item.price : playerData.gems >= item.price;\n      const meetsRequirements = !item.requirements || (!item.requirements.level || playerData.level >= item.requirements.level) && (!item.requirements.completedStages || playerData.completedStages.length >= item.requirements.completedStages);\n      const canPurchase = canAfford && meetsRequirements;\n\n      // Item background\n      ctx.fillStyle = canPurchase ? 'rgba(74, 144, 226, 0.8)' : 'rgba(100, 100, 100, 0.5)';\n      ctx.fillRect(itemX, itemY, 200, 90);\n      ctx.strokeStyle = canPurchase ? '#4A90E2' : '#666';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(itemX, itemY, 200, 90);\n\n      // Item info\n      ctx.fillStyle = canPurchase ? '#FFFFFF' : '#AAAAAA';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'left';\n      ctx.fillText(item.name, itemX + 10, itemY + 20);\n      ctx.font = '11px Arial';\n      const words = item.description.split(' ');\n      let line = '';\n      let y = itemY + 35;\n      words.forEach(word => {\n        const testLine = line + word + ' ';\n        const metrics = ctx.measureText(testLine);\n        if (metrics.width > 180 && line !== '') {\n          ctx.fillText(line, itemX + 10, y);\n          line = word + ' ';\n          y += 12;\n        } else {\n          line = testLine;\n        }\n      });\n      ctx.fillText(line, itemX + 10, y);\n\n      // Price\n      ctx.fillStyle = canAfford ? '#00FF00' : '#FF6666';\n      ctx.font = 'bold 12px Arial';\n      const currencyIcon = item.currency === 'gold' ? 'üí∞' : 'üíé';\n      ctx.fillText(`${currencyIcon} ${item.price}`, itemX + 10, itemY + 80);\n\n      // Requirements warning\n      if (!meetsRequirements) {\n        var _item$requirements, _item$requirements2;\n        ctx.fillStyle = '#FF6666';\n        ctx.font = '10px Arial';\n        if ((_item$requirements = item.requirements) !== null && _item$requirements !== void 0 && _item$requirements.level && playerData.level < item.requirements.level) {\n          ctx.fillText(`Requires Level ${item.requirements.level}`, itemX + 100, itemY + 80);\n        }\n        if ((_item$requirements2 = item.requirements) !== null && _item$requirements2 !== void 0 && _item$requirements2.completedStages && playerData.completedStages.length < item.requirements.completedStages) {\n          ctx.fillText(`Complete ${item.requirements.completedStages} stages`, itemX + 100, itemY + 80);\n        }\n      }\n    });\n\n    // Back button\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.8)';\n    ctx.fillRect(50, 350, 100, 30);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('‚Üê BACK', 100, 370);\n  };\n  const drawInventory = (ctx, canvas) => {\n    // Background\n    ctx.fillStyle = '#2d1b69';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Title\n    ctx.fillStyle = '#FFD700';\n    ctx.font = 'bold 24px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('üéí INVENTORY', canvas.width / 2, 30);\n\n    // Player info\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`Items: ${playerData.inventory.length}`, 50, 60);\n    ctx.fillText(`Total Value: ${playerData.inventory.reduce((sum, item) => sum + item.sellPrice * item.quantity, 0)} gold`, 200, 60);\n\n    // Inventory grid\n    const itemsPerRow = 5;\n    const startY = 100;\n    playerData.inventory.forEach((item, index) => {\n      const itemX = 50 + index % itemsPerRow * 100;\n      const itemY = startY + Math.floor(index / itemsPerRow) * 80;\n\n      // Rarity colors\n      const rarityColors = {\n        common: '#CCCCCC',\n        rare: '#0099FF',\n        epic: '#9933FF',\n        legendary: '#FF9900'\n      };\n\n      // Item slot\n      ctx.fillStyle = 'rgba(50, 50, 50, 0.8)';\n      ctx.fillRect(itemX, itemY, 80, 60);\n      ctx.strokeStyle = rarityColors[item.rarity];\n      ctx.lineWidth = 2;\n      ctx.strokeRect(itemX, itemY, 80, 60);\n\n      // Item info\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = 'bold 10px Arial';\n      ctx.textAlign = 'center';\n\n      // Truncate long names\n      const displayName = item.name.length > 10 ? item.name.substring(0, 8) + '...' : item.name;\n      ctx.fillText(displayName, itemX + 40, itemY + 15);\n\n      // Type icon\n      const typeIcons = {\n        weapon: '‚öîÔ∏è',\n        armor: 'üõ°Ô∏è',\n        consumable: 'üß™',\n        material: 'üìé',\n        tower_upgrade: '‚¨ÜÔ∏è',\n        blueprint: 'üìú'\n      };\n      ctx.font = '16px Arial';\n      ctx.fillText(typeIcons[item.type] || '‚ùì', itemX + 40, itemY + 35);\n\n      // Quantity\n      if (item.quantity > 1) {\n        ctx.fillStyle = '#FFD700';\n        ctx.font = 'bold 10px Arial';\n        ctx.fillText(`x${item.quantity}`, itemX + 65, itemY + 55);\n      }\n\n      // Sell value\n      ctx.fillStyle = '#00FF00';\n      ctx.font = '8px Arial';\n      ctx.fillText(`üí∞${item.sellPrice}`, itemX + 5, itemY + 55);\n    });\n\n    // Instructions\n    ctx.fillStyle = '#CCCCCC';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('Click items to use/equip them', canvas.width / 2, 320);\n\n    // Back button\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.8)';\n    ctx.fillRect(50, 350, 100, 30);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('‚Üê BACK', 100, 370);\n  };\n\n  // Game loop\n  useEffect(() => {\n    const gameLoop = () => {\n      updateBattle();\n      draw();\n      setFrameCount(prev => prev + 1);\n      gameLoopRef.current = requestAnimationFrame(gameLoop);\n    };\n    gameLoopRef.current = requestAnimationFrame(gameLoop);\n    return () => {\n      if (gameLoopRef.current) {\n        cancelAnimationFrame(gameLoopRef.current);\n      }\n    };\n  }, [updateBattle, draw]);\n\n  // Event listeners\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      background: '#0a0a0a',\n      borderRadius: '12px',\n      padding: '16px',\n      border: '2px solid #2d3748',\n      maxHeight: '500px',\n      overflowY: 'auto',\n      overflowX: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 600,\n      height: 400,\n      style: {\n        border: '2px solid #4a5568',\n        borderRadius: '8px',\n        cursor: gameState.selectedTowerType ? 'crosshair' : 'pointer',\n        maxWidth: '100%',\n        height: 'auto'\n      },\n      onClick: handleCanvasClick,\n      tabIndex: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2550,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '12px',\n        color: '#ffffff',\n        fontSize: '14px',\n        textAlign: 'center',\n        maxWidth: '600px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD83C\\uDFF0 \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Complete Tower Defense RPG\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2572,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2572,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [gameState.currentScene === 'lobby' && 'Î°úÎπÑÏóêÏÑú ÎçòÏ†ÑÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî!', gameState.currentScene === 'dungeon' && 'Ïä§ÌÖåÏù¥ÏßÄÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî!', gameState.currentScene === 'battle' && `Stage ${gameState.selectedStage} - SpaceÎ°ú Ïõ®Ïù¥Î∏å ÏãúÏûë!`, (gameState.currentScene === 'stageComplete' || gameState.currentScene === 'stageFailed') && 'Í≤∞Í≥ºÎ•º ÌôïÏù∏ÌïòÍ≥† Í≥ÑÏÜçÌïòÏÑ∏Ïöî!']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2573,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Level \", playerData.level, \" | Gold: \", playerData.gold, \" | Energy: \", playerData.energy, \"/\", playerData.maxEnergy]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2579,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2565,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2538,\n    columnNumber: 5\n  }, this);\n};\n_s(CompleteGameSystem, \"uzZfavT+8L1Wke71iapC43J2XJc=\");\n_c = CompleteGameSystem;\nvar _c;\n$RefreshReg$(_c, \"CompleteGameSystem\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","jsxDEV","_jsxDEV","CompleteGameSystem","onAction","playerStats","setPlayerStats","currentUser","_s","canvasRef","gameLoopRef","frameCount","setFrameCount","playerData","setPlayerData","id","user_id","name","level","experience","gold","gems","energy","maxEnergy","unlockedStages","inventory","type","rarity","quantity","stats","attack","description","price","sellPrice","heal","completedStages","achievements","totalPlayTime","lastLogin","Date","toISOString","gameState","setGameState","currentScene","selectedStage","battleState","wave","lives","score","isWaveActive","towers","enemies","projectiles","waveProgress","battleTime","totalEnemies","enemiesSpawned","nextEnemySpawn","stageResults","cameraX","cameraY","selectedTower","selectedTowerType","isPaused","showUpgradeMenu","hoverPosition","shopCategory","selectedShopItem","inventoryPage","stageDefinitions","difficulty","energyCost","recommendedLevel","rewards","amount","isUnlocked","path","x","y","spawnDelay","background","towerTypes","cost","damage","range","speed","color","icon","upgradeMultiplier","effects","enemyTypes","health","reward","armor","size","shopItems","currency","effect","value","duration","category","requirements","player_id","player_level","total_gold","unlocked_stages","login_streak","energyRegen","setInterval","prev","Math","min","clearInterval","expNeeded","newLevel","old_level","new_level","new_max_energy","total_playtime","handleKeyDown","e","includes","key","preventDefault","stopPropagation","toLowerCase","pauseBattle","startWave","towerIndex","parseInt","towerTypeKeys","Object","keys","length","handleCanvasClick","canvas","current","rect","getBoundingClientRect","clientX","left","clientY","top","handleLobbyClick","handleDungeonClick","handleBattleClick","handleShopClick","handleInventoryClick","handleResultsClick","from_scene","to_scene","forEach","stage","index","stageX","stageY","floor","enterStage","stageId","find","s","stage_id","stage_name","energy_cost","remaining_energy","recommended_level","entries","config","buttonX","buttonY","canPlaceTower","placeTower","reason","attempted_x","attempted_y","clickedTower","tower","distance","sqrt","point","towerConfig","required_gold","current_gold","tower_type","newTower","now","random","toString","substr","attackSpeed","lastAttack","kills","upgradeCost","sellValue","tower_cost","position_x","position_y","remaining_gold","wave_number","towers_count","spawnEnemyWave","enemyCount","enemyTypeKeys","spawnSingleEnemy","waveTypeIndex","possibleTypes","slice","enemyType","enemyConfig","newEnemy","maxHealth","pathIndex","alive","slowDuration","max","enemy_type","enemy_id","enemies_spawned","total_enemies","battle_time","current_score","completeStage","victory","_rewards$find","_rewards$find2","starsEarned","calculateStars","goldGained","expGained","gemsGained","completion","bestScore","completionTime","completedAt","existingIndex","findIndex","c","newCompletedStages","push","energyRefund","results","timeBonus","newUnlocks","setTimeout","final_score","stars_earned","towers_built","waves_completed","enemies_defeated","reduce","sum","gold_gained","r","exp_gained","new_unlocks","failure_reason","baseScore","livesBonus","totalScore","categories","tabX","categoryItems","filter","item","itemX","itemY","purchaseItem","itemsPerRow","startY","handleInventoryItemUse","item_id","required_level","current_level","required_stages","completed_stages","hasEnoughCurrency","required_amount","current_amount","inventoryItem","i","newInventory","item_name","remaining_gems","_item$stats","map","_gameState$stageResul","returnToLobby","retryStage","_gameState$stageResul2","total_energy","updateBattle","updateEnemies","updateTowers","updateProjectiles","checkBattleEnd","enemy","currentSpeed","currentTarget","dx","dy","prev2","remaining_lives","moveX","moveY","proj","trail","shift","targetX","targetY","hitTarget","projectile","targetEnemy","targetId","actualDamage","newHealth","killed","_enemy$reward$find","_enemy$reward$find2","goldGain","expGain","t","towerId","tower_id","damage_dealt","enemy_health_remaining","chainDamage","actualChainDamage","splashTargets","splashDamage","actualSplashDamage","enemiesInRange","target","best","newProjectile","target_enemy_id","aliveEnemies","allEnemiesSpawned","nextWave","nextTotalEnemies","bonusGold","bonus_gold","drawLobby","ctx","fillStyle","fillRect","width","height","font","textAlign","fillText","expPercent","buttons","text","w","h","button","strokeStyle","lineWidth","strokeRect","drawDungeon","hasEnergy","canEnter","completed","drawBattle","lineCap","lineJoin","beginPath","moveTo","lineTo","stroke","_gameState$selectedTo","isSelected","arc","PI","fill","setLineDash","ellipse","barWidth","barHeight","healthPercent","alpha","angle","sparkleX","cos","sparkleY","sin","canAfford","drawResults","shadowColor","shadowBlur","titleScale","save","translate","scale","restore","yPos","toLocaleString","starScale","iconMap","exp","gem","unlock","_stageDefinitions$fin","draw","getContext","clearRect","drawShop","drawInventory","meetsRequirements","canPurchase","words","split","line","word","testLine","metrics","measureText","currencyIcon","_item$requirements","_item$requirements2","rarityColors","common","rare","epic","legendary","displayName","substring","typeIcons","weapon","consumable","material","tower_upgrade","blueprint","gameLoop","requestAnimationFrame","cancelAnimationFrame","document","addEventListener","removeEventListener","style","display","flexDirection","alignItems","borderRadius","padding","border","maxHeight","overflowY","overflowX","children","ref","cursor","maxWidth","onClick","tabIndex","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","fontSize","_c","$RefreshReg$"],"sources":["/Users/jegaljin-u/workspace/thinking-guide/src/components/CompleteGameSystem.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\n\ninterface GameProps {\n  onAction: (eventType: string, data: any) => void;\n  isSimulating: boolean;\n  currentAction: string | null;\n  playerStats: any;\n  setPlayerStats: (stats: any) => void;\n  currentUser: any;\n}\n\ninterface PlayerData {\n  id: string;\n  name: string;\n  level: number;\n  experience: number;\n  gold: number;\n  gems: number;\n  energy: number;\n  maxEnergy: number;\n  unlockedStages: number;\n  inventory: InventoryItem[];\n  completedStages: CompletedStage[];\n  achievements: string[];\n  totalPlayTime: number;\n  lastLogin: string;\n}\n\ninterface InventoryItem {\n  id: string;\n  name: string;\n  type: 'weapon' | 'armor' | 'consumable' | 'material' | 'tower_upgrade' | 'blueprint';\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  quantity: number;\n  stats: any;\n  description: string;\n  price: number;\n  sellPrice: number;\n}\n\ninterface ShopItem {\n  id: string;\n  name: string;\n  type: 'tower_upgrade' | 'consumable' | 'equipment' | 'blueprint';\n  price: number;\n  currency: 'gold' | 'gem';\n  description: string;\n  effect: any;\n  requirements?: {\n    level?: number;\n    completedStages?: number;\n  };\n  stock?: number;\n  category: 'tower' | 'utility' | 'premium';\n}\n\ninterface CompletedStage {\n  stageId: number;\n  bestScore: number;\n  completionTime: number;\n  starsEarned: number;\n  completedAt: string;\n}\n\ninterface StageData {\n  id: number;\n  name: string;\n  difficulty: 'Easy' | 'Normal' | 'Hard' | 'Expert' | 'Hell';\n  energyCost: number;\n  recommendedLevel: number;\n  rewards: StageReward[];\n  isUnlocked: boolean;\n  path: { x: number; y: number }[];\n  enemies: EnemyWave[];\n  background: string;\n}\n\ninterface StageReward {\n  type: 'gold' | 'exp' | 'item' | 'gem';\n  amount: number;\n  item?: InventoryItem;\n}\n\ninterface Projectile {\n  id: string;\n  x: number;\n  y: number;\n  targetX: number;\n  targetY: number;\n  targetId: string;\n  speed: number;\n  damage: number;\n  type: string;\n  towerId: string;\n  effects: string[];\n  trail: { x: number; y: number }[];\n}\n\ninterface EnemyWave {\n  enemies: Enemy[];\n  spawnDelay: number;\n}\n\ninterface Enemy {\n  id: string;\n  x: number;\n  y: number;\n  health: number;\n  maxHealth: number;\n  speed: number;\n  type: string;\n  pathIndex: number;\n  alive: boolean;\n  armor: number;\n  reward: StageReward[];\n  effects: string[];\n  slowDuration: number;\n  targetId?: string;\n}\n\ninterface Tower {\n  id: string;\n  x: number;\n  y: number;\n  type: string;\n  level: number;\n  damage: number;\n  range: number;\n  attackSpeed: number;\n  lastAttack: number;\n  cost: number;\n  kills: number;\n  upgradeCost: number;\n  sellValue: number;\n  experience: number;\n}\n\ninterface GameState {\n  currentScene: 'lobby' | 'dungeon' | 'stage' | 'shop' | 'inventory' | 'battle' | 'stageComplete' | 'stageFailed';\n  selectedStage: number | null;\n  battleState: BattleState;\n  stageResults: StageResults | null;\n  cameraX: number;\n  cameraY: number;\n  selectedTower: Tower | null;\n  selectedTowerType: string | null;\n  isPaused: boolean;\n  showUpgradeMenu: boolean;\n  hoverPosition: { x: number; y: number } | null;\n  shopCategory: 'tower' | 'utility' | 'premium';\n  selectedShopItem: ShopItem | null;\n  inventoryPage: number;\n}\n\ninterface BattleState {\n  wave: number;\n  lives: number;\n  score: number;\n  isWaveActive: boolean;\n  towers: Tower[];\n  enemies: Enemy[];\n  projectiles: Projectile[];\n  waveProgress: number;\n  battleTime: number;\n  totalEnemies: number;\n  enemiesSpawned: number;\n  nextEnemySpawn: number;\n}\n\ninterface StageResults {\n  victory: boolean;\n  score: number;\n  starsEarned: number;\n  timeBonus: number;\n  rewards: StageReward[];\n  newUnlocks: string[];\n}\n\nexport const CompleteGameSystem: React.FC<GameProps> = ({\n  onAction,\n  playerStats,\n  setPlayerStats,\n  currentUser\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const gameLoopRef = useRef<number>();\n  const [frameCount, setFrameCount] = useState(0);\n\n  // Player persistent data\n  const [playerData, setPlayerData] = useState<PlayerData>({\n    id: currentUser.user_id,\n    name: \"Hero\",\n    level: 1,\n    experience: 0,\n    gold: 1000,\n    gems: 50,\n    energy: 100,\n    maxEnergy: 100,\n    unlockedStages: 1,\n    inventory: [\n      { \n        id: 'sword1', \n        name: 'Iron Sword', \n        type: 'weapon', \n        rarity: 'common', \n        quantity: 1, \n        stats: { attack: 10 }, \n        description: 'A basic iron sword',\n        price: 100,\n        sellPrice: 50\n      },\n      { \n        id: 'potion1', \n        name: 'Health Potion', \n        type: 'consumable', \n        rarity: 'common', \n        quantity: 5, \n        stats: { heal: 50 },\n        description: 'Restores health',\n        price: 25,\n        sellPrice: 10\n      }\n    ],\n    completedStages: [],\n    achievements: [],\n    totalPlayTime: 0,\n    lastLogin: new Date().toISOString()\n  });\n\n  // Game state\n  const [gameState, setGameState] = useState<GameState>({\n    currentScene: 'lobby',\n    selectedStage: null,\n    battleState: {\n      wave: 1,\n      lives: 20,\n      score: 0,\n      isWaveActive: false,\n      towers: [],\n      enemies: [],\n      projectiles: [],\n      waveProgress: 0,\n      battleTime: 0,\n      totalEnemies: 0,\n      enemiesSpawned: 0,\n      nextEnemySpawn: 0\n    },\n    stageResults: null,\n    cameraX: 0,\n    cameraY: 0,\n    selectedTower: null,\n    selectedTowerType: null,\n    isPaused: false,\n    showUpgradeMenu: false,\n    hoverPosition: null,\n    shopCategory: 'tower',\n    selectedShopItem: null,\n    inventoryPage: 0\n  });\n\n  // Stage definitions\n  const stageDefinitions: StageData[] = [\n    {\n      id: 1,\n      name: \"Green Fields\",\n      difficulty: 'Easy',\n      energyCost: 10,\n      recommendedLevel: 1,\n      rewards: [\n        { type: 'gold', amount: 100 },\n        { type: 'exp', amount: 50 }\n      ],\n      isUnlocked: true,\n      path: [\n        { x: 0, y: 200 }, { x: 150, y: 200 }, { x: 150, y: 100 },\n        { x: 300, y: 100 }, { x: 300, y: 300 }, { x: 600, y: 300 }\n      ],\n      enemies: [\n        { enemies: [], spawnDelay: 60 }\n      ],\n      background: '#2d5016'\n    },\n    {\n      id: 2,\n      name: \"Dark Forest\",\n      difficulty: 'Normal',\n      energyCost: 15,\n      recommendedLevel: 3,\n      rewards: [\n        { type: 'gold', amount: 200 },\n        { type: 'exp', amount: 80 },\n        { type: 'gem', amount: 5 }\n      ],\n      isUnlocked: false,\n      path: [\n        { x: 0, y: 150 }, { x: 100, y: 150 }, { x: 100, y: 50 },\n        { x: 250, y: 50 }, { x: 250, y: 250 }, { x: 400, y: 250 },\n        { x: 400, y: 100 }, { x: 600, y: 100 }\n      ],\n      enemies: [\n        { enemies: [], spawnDelay: 50 }\n      ],\n      background: '#1a3d1a'\n    },\n    {\n      id: 3,\n      name: \"Ancient Ruins\",\n      difficulty: 'Hard',\n      energyCost: 20,\n      recommendedLevel: 5,\n      rewards: [\n        { type: 'gold', amount: 350 },\n        { type: 'exp', amount: 120 },\n        { type: 'gem', amount: 10 }\n      ],\n      isUnlocked: false,\n      path: [\n        { x: 0, y: 200 }, { x: 80, y: 200 }, { x: 80, y: 80 },\n        { x: 200, y: 80 }, { x: 200, y: 320 }, { x: 320, y: 320 },\n        { x: 320, y: 120 }, { x: 500, y: 120 }, { x: 500, y: 280 },\n        { x: 600, y: 280 }\n      ],\n      enemies: [\n        { enemies: [], spawnDelay: 40 }\n      ],\n      background: '#4a4a2a'\n    },\n    {\n      id: 4,\n      name: \"Dragon's Lair\",\n      difficulty: 'Expert',\n      energyCost: 25,\n      recommendedLevel: 8,\n      rewards: [\n        { type: 'gold', amount: 500 },\n        { type: 'exp', amount: 200 },\n        { type: 'gem', amount: 20 }\n      ],\n      isUnlocked: false,\n      path: [\n        { x: 0, y: 200 }, { x: 150, y: 200 }, { x: 150, y: 100 },\n        { x: 450, y: 100 }, { x: 450, y: 300 }, { x: 600, y: 300 }\n      ],\n      enemies: [\n        { enemies: [], spawnDelay: 35 }\n      ],\n      background: '#5d1a1a'\n    },\n    {\n      id: 5,\n      name: \"Demon Realm\",\n      difficulty: 'Hell',\n      energyCost: 30,\n      recommendedLevel: 12,\n      rewards: [\n        { type: 'gold', amount: 1000 },\n        { type: 'exp', amount: 400 },\n        { type: 'gem', amount: 50 }\n      ],\n      isUnlocked: false,\n      path: [\n        { x: 0, y: 200 }, { x: 100, y: 200 }, { x: 200, y: 200 },\n        { x: 300, y: 200 }, { x: 400, y: 200 }, { x: 500, y: 200 },\n        { x: 600, y: 200 }\n      ],\n      enemies: [\n        { enemies: [], spawnDelay: 30 }\n      ],\n      background: '#2d0d0d'\n    }\n  ];\n\n  // Tower types\n  const towerTypes = {\n    'archer': { \n      cost: 80, damage: 25, range: 120, speed: 30, \n      color: '#8B4513', icon: 'üèπ', \n      description: 'Fast shooting archer tower',\n      upgradeMultiplier: 1.5,\n      effects: []\n    },\n    'cannon': { \n      cost: 150, damage: 60, range: 100, speed: 60, \n      color: '#696969', icon: 'üí£', \n      description: 'Heavy damage explosive cannon',\n      upgradeMultiplier: 1.6,\n      effects: ['splash']\n    },\n    'magic': { \n      cost: 220, damage: 40, range: 140, speed: 40, \n      color: '#9400D3', icon: '‚ú®', \n      description: 'Magic tower with penetration',\n      upgradeMultiplier: 1.7,\n      effects: ['penetrate']\n    },\n    'ice': { \n      cost: 180, damage: 20, range: 110, speed: 35, \n      color: '#00BFFF', icon: '‚ùÑÔ∏è', \n      description: 'Slows enemies and deals damage',\n      upgradeMultiplier: 1.4,\n      effects: ['slow']\n    },\n    'lightning': { \n      cost: 300, damage: 80, range: 150, speed: 50, \n      color: '#FFD700', icon: '‚ö°', \n      description: 'Chain lightning that hits multiple enemies',\n      upgradeMultiplier: 1.8,\n      effects: ['chain']\n    }\n  };\n\n  // Enemy types\n  const enemyTypes = {\n    'goblin': { health: 80, speed: 2, reward: 15, color: '#228B22', icon: 'üëπ', armor: 0, size: 12, description: 'Fast and weak' },\n    'orc': { health: 150, speed: 1.5, reward: 25, color: '#8B4513', icon: 'üó°Ô∏è', armor: 2, size: 14, description: 'Balanced warrior' },\n    'troll': { health: 300, speed: 1, reward: 40, color: '#2F4F4F', icon: 'üèîÔ∏è', armor: 5, size: 16, description: 'Heavily armored' },\n    'dragon': { health: 500, speed: 0.8, reward: 80, color: '#DC143C', icon: 'üêâ', armor: 8, size: 20, description: 'Flying boss' },\n    'demon': { health: 800, speed: 0.6, reward: 150, color: '#8B0000', icon: 'üòà', armor: 12, size: 24, description: 'Ultimate boss' }\n  };\n\n  // Shop items\n  const shopItems: ShopItem[] = [\n    // Tower upgrades\n    {\n      id: 'damage_boost',\n      name: 'Damage Boost Potion',\n      type: 'tower_upgrade',\n      price: 150,\n      currency: 'gold',\n      description: 'Increases tower damage by 25% for next battle',\n      effect: { type: 'damage_boost', value: 0.25, duration: 1 },\n      category: 'tower'\n    },\n    {\n      id: 'range_extender',\n      name: 'Range Extender',\n      type: 'tower_upgrade', \n      price: 200,\n      currency: 'gold',\n      description: 'Increases tower range by 20% for next battle',\n      effect: { type: 'range_boost', value: 0.2, duration: 1 },\n      category: 'tower'\n    },\n    {\n      id: 'speed_upgrade',\n      name: 'Attack Speed Boost',\n      type: 'tower_upgrade',\n      price: 175,\n      currency: 'gold', \n      description: 'Increases tower attack speed by 30% for next battle',\n      effect: { type: 'speed_boost', value: 0.3, duration: 1 },\n      category: 'tower'\n    },\n    \n    // Utility items\n    {\n      id: 'extra_life',\n      name: 'Extra Life',\n      type: 'consumable',\n      price: 100,\n      currency: 'gold',\n      description: 'Start next battle with +5 lives',\n      effect: { type: 'extra_lives', value: 5 },\n      category: 'utility'\n    },\n    {\n      id: 'starting_gold',\n      name: 'Treasure Chest',\n      type: 'consumable',\n      price: 80,\n      currency: 'gold',\n      description: 'Start next battle with +200 gold',\n      effect: { type: 'starting_gold', value: 200 },\n      category: 'utility'\n    },\n    {\n      id: 'energy_refill',\n      name: 'Energy Potion',\n      type: 'consumable',\n      price: 5,\n      currency: 'gem',\n      description: 'Instantly restore 20 energy',\n      effect: { type: 'restore_energy', value: 20 },\n      category: 'utility'\n    },\n    \n    // Premium items\n    {\n      id: 'tower_blueprint_laser',\n      name: 'Laser Tower Blueprint',\n      type: 'blueprint',\n      price: 50,\n      currency: 'gem',\n      description: 'Unlocks powerful Laser Tower (Permanent)',\n      effect: { type: 'unlock_tower', value: 'laser' },\n      requirements: { level: 5, completedStages: 3 },\n      category: 'premium'\n    },\n    {\n      id: 'double_exp',\n      name: 'Experience Multiplier',\n      type: 'consumable',\n      price: 20,\n      currency: 'gem',\n      description: 'Double EXP gain for 3 battles',\n      effect: { type: 'exp_multiplier', value: 2, duration: 3 },\n      category: 'premium'\n    },\n    {\n      id: 'auto_upgrade',\n      name: 'Auto-Upgrade Kit',\n      type: 'consumable',\n      price: 30,\n      currency: 'gem',\n      description: 'Automatically upgrade first tower placed to level 2',\n      effect: { type: 'auto_upgrade', value: 1 },\n      category: 'premium'\n    }\n  ];\n\n  // Initialize session\n  useEffect(() => {\n    onAction('session_started', {\n      player_id: playerData.id,\n      player_level: playerData.level,\n      total_gold: playerData.gold,\n      unlocked_stages: playerData.unlockedStages,\n      login_streak: 1\n    });\n  }, []);\n\n  // Energy regeneration\n  useEffect(() => {\n    const energyRegen = setInterval(() => {\n      setPlayerData(prev => ({\n        ...prev,\n        energy: Math.min(prev.maxEnergy, prev.energy + 1)\n      }));\n    }, 60000); // 1 energy per minute\n\n    return () => clearInterval(energyRegen);\n  }, []);\n\n  // Level up check\n  useEffect(() => {\n    const expNeeded = playerData.level * 100;\n    if (playerData.experience >= expNeeded) {\n      const newLevel = playerData.level + 1;\n      setPlayerData(prev => ({\n        ...prev,\n        level: newLevel,\n        experience: prev.experience - expNeeded,\n        maxEnergy: prev.maxEnergy + 10\n      }));\n\n      onAction('player_level_up', {\n        player_id: playerData.id,\n        old_level: playerData.level,\n        new_level: newLevel,\n        new_max_energy: playerData.maxEnergy + 10,\n        total_playtime: playerData.totalPlayTime\n      });\n    }\n  }, [playerData.experience, playerData.level, playerData.maxEnergy, playerData.totalPlayTime, playerData.id, onAction]);\n\n  // Keyboard handling\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    // Prevent page scrolling\n    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'w', 'a', 's', 'd', ' ', 'Enter', 'Escape'].includes(e.key)) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    switch (e.key.toLowerCase()) {\n      case 'escape':\n        if (gameState.currentScene === 'battle') {\n          pauseBattle();\n        } else if (gameState.currentScene !== 'lobby') {\n          setGameState(prev => ({ ...prev, currentScene: 'lobby' }));\n        }\n        break;\n      case ' ':\n        if (gameState.currentScene === 'battle') {\n          startWave();\n        }\n        break;\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n        if (gameState.currentScene === 'battle') {\n          const towerIndex = parseInt(e.key) - 1;\n          const towerTypeKeys = Object.keys(towerTypes);\n          if (towerIndex < towerTypeKeys.length) {\n            setGameState(prev => ({\n              ...prev,\n              selectedTowerType: towerTypeKeys[towerIndex],\n              selectedTower: null\n            }));\n          }\n        }\n        break;\n    }\n  }, [gameState.currentScene]);\n\n  // Mouse/Click handling\n  const handleCanvasClick = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    switch (gameState.currentScene) {\n      case 'lobby':\n        handleLobbyClick(x, y);\n        break;\n      case 'dungeon':\n        handleDungeonClick(x, y);\n        break;\n      case 'battle':\n        handleBattleClick(x, y);\n        break;\n      case 'shop':\n        handleShopClick(x, y);\n        break;\n      case 'inventory':\n        handleInventoryClick(x, y);\n        break;\n      case 'stageComplete':\n      case 'stageFailed':\n        handleResultsClick(x, y);\n        break;\n    }\n  }, [gameState.currentScene]);\n\n  const handleLobbyClick = (x: number, y: number) => {\n    // Dungeon button\n    if (x >= 250 && x <= 350 && y >= 200 && y <= 250) {\n      setGameState(prev => ({ ...prev, currentScene: 'dungeon' }));\n      \n      onAction('menu_navigation', {\n        player_id: playerData.id,\n        from_scene: 'lobby',\n        to_scene: 'dungeon',\n        player_level: playerData.level\n      });\n    }\n    \n    // Shop button\n    if (x >= 100 && x <= 200 && y >= 300 && y <= 350) {\n      setGameState(prev => ({ ...prev, currentScene: 'shop' }));\n      \n      onAction('menu_navigation', {\n        player_id: playerData.id,\n        from_scene: 'lobby',\n        to_scene: 'shop',\n        player_level: playerData.level\n      });\n    }\n\n    // Inventory button\n    if (x >= 400 && x <= 500 && y >= 300 && y <= 350) {\n      setGameState(prev => ({ ...prev, currentScene: 'inventory' }));\n      \n      onAction('menu_navigation', {\n        player_id: playerData.id,\n        from_scene: 'lobby',\n        to_scene: 'inventory',\n        player_level: playerData.level\n      });\n    }\n  };\n\n  const handleDungeonClick = (x: number, y: number) => {\n    // Stage selection\n    stageDefinitions.forEach((stage, index) => {\n      const stageX = 50 + (index % 3) * 200;\n      const stageY = 100 + Math.floor(index / 3) * 150;\n      \n      if (x >= stageX && x <= stageX + 150 && y >= stageY && y <= stageY + 100) {\n        if (stage.id <= playerData.unlockedStages && playerData.energy >= stage.energyCost) {\n          enterStage(stage.id);\n        }\n      }\n    });\n\n    // Back button\n    if (x >= 50 && x <= 150 && y >= 350 && y <= 380) {\n      setGameState(prev => ({ ...prev, currentScene: 'lobby' }));\n    }\n  };\n\n  const enterStage = (stageId: number) => {\n    const stage = stageDefinitions.find(s => s.id === stageId);\n    if (!stage) return;\n\n    // Consume energy\n    setPlayerData(prev => ({ ...prev, energy: prev.energy - stage.energyCost }));\n\n    // Initialize battle\n    setGameState(prev => ({\n      ...prev,\n      currentScene: 'battle',\n      selectedStage: stageId,\n      battleState: {\n        wave: 1,\n        lives: 20,\n        score: 0,\n        isWaveActive: false,\n        towers: [],\n        enemies: [],\n        projectiles: [],\n        waveProgress: 0,\n        battleTime: 0,\n        totalEnemies: 8 + 1 * 2, // 8 base + wave * 2\n        enemiesSpawned: 0,\n        nextEnemySpawn: 0\n      },\n      selectedTower: null,\n      selectedTowerType: null,\n      isPaused: false,\n      showUpgradeMenu: false\n    }));\n\n    onAction('stage_entered', {\n      player_id: playerData.id,\n      stage_id: stageId,\n      stage_name: stage.name,\n      energy_cost: stage.energyCost,\n      remaining_energy: playerData.energy - stage.energyCost,\n      player_level: playerData.level,\n      recommended_level: stage.recommendedLevel\n    });\n  };\n\n  const handleBattleClick = (x: number, y: number) => {\n    // Check if clicking on UI buttons first\n    if (y >= 340) {\n      // Tower selection buttons\n      Object.entries(towerTypes).forEach(([type, config], index) => {\n        const buttonX = 300 + index * 60;\n        const buttonY = 340;\n        \n        if (x >= buttonX && x <= buttonX + 50 && y >= buttonY && y <= buttonY + 50) {\n          setGameState(prev => ({\n            ...prev,\n            selectedTowerType: type,\n            selectedTower: null\n          }));\n          return;\n        }\n      });\n      \n      // Start wave button\n      if (!gameState.battleState.isWaveActive && x >= 450 && x <= 550 && y >= 350 && y <= 380) {\n        startWave();\n        return;\n      }\n      \n      return; // Don't place towers in UI area\n    }\n\n    // Game area clicks\n    if (gameState.selectedTowerType) {\n      // Place tower\n      if (canPlaceTower(x, y)) {\n        placeTower(x, y, gameState.selectedTowerType);\n      } else {\n        // Give feedback why tower can't be placed\n        onAction('tower_placement_failed', {\n          player_id: playerData.id,\n          reason: 'invalid_location',\n          attempted_x: x,\n          attempted_y: y,\n          stage_id: gameState.selectedStage\n        });\n      }\n    } else {\n      // Select existing tower\n      const clickedTower = gameState.battleState.towers.find(tower => {\n        const distance = Math.sqrt((x - tower.x) ** 2 + (y - tower.y) ** 2);\n        return distance < 25;\n      });\n\n      if (clickedTower) {\n        setGameState(prev => ({\n          ...prev,\n          selectedTower: clickedTower,\n          selectedTowerType: null\n        }));\n      } else {\n        // Clear selection\n        setGameState(prev => ({\n          ...prev,\n          selectedTower: null,\n          selectedTowerType: null\n        }));\n      }\n    }\n  };\n\n  const canPlaceTower = (x: number, y: number): boolean => {\n    if (!gameState.selectedStage) return false;\n    \n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return false;\n\n    // Check if in valid game area (not in UI)\n    if (x < 25 || x > 575 || y < 25 || y > 320) return false;\n\n    // Check distance from path (reduced from 40 to 30)\n    for (const point of stage.path) {\n      const distance = Math.sqrt((x - point.x) ** 2 + (y - point.y) ** 2);\n      if (distance < 30) return false;\n    }\n\n    // Check distance from other towers (reduced from 50 to 40)\n    for (const tower of gameState.battleState.towers) {\n      const distance = Math.sqrt((x - tower.x) ** 2 + (y - tower.y) ** 2);\n      if (distance < 40) return false;\n    }\n\n    return true;\n  };\n\n  const placeTower = (x: number, y: number, type: string) => {\n    const towerConfig = towerTypes[type as keyof typeof towerTypes];\n    if (playerData.gold < towerConfig.cost) {\n      onAction('tower_placement_failed', {\n        player_id: playerData.id,\n        reason: 'insufficient_gold',\n        required_gold: towerConfig.cost,\n        current_gold: playerData.gold,\n        tower_type: type\n      });\n      return;\n    }\n\n    const newTower: Tower = {\n      id: `tower_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      x, y, type,\n      level: 1,\n      damage: towerConfig.damage,\n      range: towerConfig.range,\n      attackSpeed: towerConfig.speed,\n      lastAttack: 0,\n      cost: towerConfig.cost,\n      kills: 0,\n      upgradeCost: Math.floor(towerConfig.cost * towerConfig.upgradeMultiplier),\n      sellValue: Math.floor(towerConfig.cost * 0.7),\n      experience: 0\n    };\n\n    setPlayerData(prev => ({ ...prev, gold: prev.gold - towerConfig.cost }));\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        towers: [...prev.battleState.towers, newTower]\n      },\n      selectedTowerType: null\n    }));\n\n    onAction('tower_placed', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      tower_type: type,\n      tower_cost: towerConfig.cost,\n      position_x: x,\n      position_y: y,\n      remaining_gold: playerData.gold - towerConfig.cost,\n      wave_number: gameState.battleState.wave\n    });\n  };\n\n  const startWave = () => {\n    if (gameState.battleState.isWaveActive) return;\n\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        isWaveActive: true,\n        waveProgress: 0\n      }\n    }));\n\n    onAction('wave_started', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      wave_number: gameState.battleState.wave,\n      towers_count: gameState.battleState.towers.length,\n      current_gold: playerData.gold\n    });\n\n    // Spawn enemies\n    spawnEnemyWave();\n  };\n\n  const spawnEnemyWave = () => {\n    if (!gameState.selectedStage) return;\n    \n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n\n    const enemyCount = 8 + gameState.battleState.wave * 2;\n    const enemyTypeKeys = Object.keys(enemyTypes);\n    \n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        totalEnemies: enemyCount,\n        enemiesSpawned: 0,\n        nextEnemySpawn: frameCount + 60 // Start spawning in 1 second\n      }\n    }));\n  };\n\n  const spawnSingleEnemy = () => {\n    if (!gameState.selectedStage) return;\n    \n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n\n    const enemyTypeKeys = Object.keys(enemyTypes);\n    const waveTypeIndex = Math.min(gameState.battleState.wave - 1, enemyTypeKeys.length - 1);\n    const possibleTypes = enemyTypeKeys.slice(0, waveTypeIndex + 1);\n    const enemyType = possibleTypes[Math.floor(Math.random() * possibleTypes.length)];\n    const enemyConfig = enemyTypes[enemyType as keyof typeof enemyTypes];\n    \n    const newEnemy: Enemy = {\n      id: `enemy_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      x: stage.path[0].x,\n      y: stage.path[0].y,\n      health: enemyConfig.health * gameState.selectedStage!,\n      maxHealth: enemyConfig.health * gameState.selectedStage!,\n      speed: enemyConfig.speed,\n      type: enemyType,\n      pathIndex: 0,\n      alive: true,\n      armor: enemyConfig.armor,\n      effects: [],\n      slowDuration: 0,\n      reward: [\n        { type: 'gold', amount: enemyConfig.reward },\n        { type: 'exp', amount: enemyConfig.reward / 2 }\n      ]\n    };\n\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        enemies: [...prev.battleState.enemies, newEnemy],\n        enemiesSpawned: prev.battleState.enemiesSpawned + 1,\n        nextEnemySpawn: frameCount + Math.max(30, 80 - gameState.battleState.wave * 5)\n      }\n    }));\n\n    onAction('enemy_spawned', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      enemy_type: enemyType,\n      enemy_id: newEnemy.id,\n      wave_number: gameState.battleState.wave,\n      enemies_spawned: gameState.battleState.enemiesSpawned + 1,\n      total_enemies: gameState.battleState.totalEnemies\n    });\n  };\n\n  const pauseBattle = () => {\n    onAction('battle_paused', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      wave_number: gameState.battleState.wave,\n      battle_time: gameState.battleState.battleTime,\n      current_score: gameState.battleState.score\n    });\n  };\n\n  const completeStage = (victory: boolean) => {\n    if (!gameState.selectedStage) return;\n\n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n\n    // Stop all battle updates\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        isWaveActive: false\n      },\n      isPaused: true\n    }));\n\n    const starsEarned = victory ? calculateStars() : 0;\n    const rewards = victory ? stage.rewards : [];\n    \n    // Apply rewards\n    if (victory) {\n      let goldGained = 0;\n      let expGained = 0;\n      let gemsGained = 0;\n\n      rewards.forEach(reward => {\n        switch (reward.type) {\n          case 'gold':\n            goldGained += reward.amount;\n            break;\n          case 'exp':\n            expGained += reward.amount;\n            break;\n          case 'gem':\n            gemsGained += reward.amount;\n            break;\n        }\n      });\n\n      setPlayerData(prev => ({\n        ...prev,\n        gold: prev.gold + goldGained,\n        experience: prev.experience + expGained,\n        gems: prev.gems + gemsGained,\n        unlockedStages: Math.max(prev.unlockedStages, gameState.selectedStage! + 1)\n      }));\n\n      // Record completion\n      const completion: CompletedStage = {\n        stageId: gameState.selectedStage,\n        bestScore: gameState.battleState.score,\n        completionTime: gameState.battleState.battleTime,\n        starsEarned,\n        completedAt: new Date().toISOString()\n      };\n\n      setPlayerData(prev => {\n        const existingIndex = prev.completedStages.findIndex(c => c.stageId === gameState.selectedStage);\n        const newCompletedStages = [...prev.completedStages];\n        \n        if (existingIndex >= 0) {\n          newCompletedStages[existingIndex] = completion;\n        } else {\n          newCompletedStages.push(completion);\n        }\n\n        return { ...prev, completedStages: newCompletedStages };\n      });\n    } else {\n      // On defeat, refund some energy (50%)\n      const energyRefund = Math.floor(stage.energyCost * 0.5);\n      setPlayerData(prev => ({\n        ...prev,\n        energy: Math.min(prev.maxEnergy, prev.energy + energyRefund)\n      }));\n    }\n\n    const results: StageResults = {\n      victory,\n      score: gameState.battleState.score,\n      starsEarned,\n      timeBonus: victory ? Math.max(0, 300 - gameState.battleState.battleTime) : 0,\n      rewards: victory ? rewards : [{ type: 'gold', amount: Math.floor(gameState.battleState.score / 100) }], // Small consolation reward\n      newUnlocks: victory && gameState.selectedStage === playerData.unlockedStages ? \n        [`Stage ${gameState.selectedStage + 1} Unlocked!`] : []\n    };\n\n    // Show results screen with a delay\n    setTimeout(() => {\n      setGameState(prev => ({\n        ...prev,\n        currentScene: victory ? 'stageComplete' : 'stageFailed',\n        stageResults: results\n      }));\n    }, 1000);\n\n    onAction(victory ? 'stage_victory' : 'stage_defeat', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      stage_name: stage.name,\n      final_score: gameState.battleState.score,\n      stars_earned: starsEarned,\n      battle_time: gameState.battleState.battleTime,\n      towers_built: gameState.battleState.towers.length,\n      waves_completed: gameState.battleState.wave,\n      enemies_defeated: gameState.battleState.towers.reduce((sum, tower) => sum + tower.kills, 0),\n      gold_gained: victory ? rewards.find(r => r.type === 'gold')?.amount || 0 : Math.floor(gameState.battleState.score / 100),\n      exp_gained: victory ? rewards.find(r => r.type === 'exp')?.amount || 0 : 0,\n      new_unlocks: results.newUnlocks,\n      failure_reason: victory ? null : gameState.battleState.lives <= 0 ? 'lives_depleted' : 'unknown'\n    });\n  };\n\n  const calculateStars = (): number => {\n    const baseScore = gameState.battleState.score;\n    const timeBonus = Math.max(0, 300 - gameState.battleState.battleTime);\n    const livesBonus = gameState.battleState.lives * 10;\n    \n    const totalScore = baseScore + timeBonus + livesBonus;\n    \n    if (totalScore >= 1000) return 3;\n    if (totalScore >= 500) return 2;\n    return 1;\n  };\n\n  const handleShopClick = (x: number, y: number) => {\n    // Category tabs\n    const categories = ['tower', 'utility', 'premium'];\n    categories.forEach((category, index) => {\n      const tabX = 80 + index * 150;\n      if (x >= tabX && x <= tabX + 140 && y >= 50 && y <= 80) {\n        setGameState(prev => ({ ...prev, shopCategory: category as any }));\n      }\n    });\n\n    // Shop items\n    const categoryItems = shopItems.filter(item => item.category === gameState.shopCategory);\n    categoryItems.forEach((item, index) => {\n      const itemX = 80 + (index % 2) * 220;\n      const itemY = 100 + Math.floor(index / 2) * 100;\n      \n      if (x >= itemX && x <= itemX + 200 && y >= itemY && y <= itemY + 90) {\n        purchaseItem(item);\n      }\n    });\n\n    // Back button\n    if (x >= 50 && x <= 150 && y >= 350 && y <= 380) {\n      setGameState(prev => ({ ...prev, currentScene: 'lobby' }));\n    }\n  };\n\n  const handleInventoryClick = (x: number, y: number) => {\n    // Inventory items\n    const itemsPerRow = 5;\n    const startY = 100;\n    \n    playerData.inventory.forEach((item, index) => {\n      const itemX = 50 + (index % itemsPerRow) * 100;\n      const itemY = startY + Math.floor(index / itemsPerRow) * 80;\n      \n      if (x >= itemX && x <= itemX + 80 && y >= itemY && y <= itemY + 60) {\n        handleInventoryItemUse(item);\n      }\n    });\n\n    // Back button\n    if (x >= 50 && x <= 150 && y >= 350 && y <= 380) {\n      setGameState(prev => ({ ...prev, currentScene: 'lobby' }));\n    }\n  };\n\n  const purchaseItem = (item: ShopItem) => {\n    // Check requirements\n    if (item.requirements) {\n      if (item.requirements.level && playerData.level < item.requirements.level) {\n        onAction('purchase_failed', {\n          player_id: playerData.id,\n          item_id: item.id,\n          reason: 'level_requirement',\n          required_level: item.requirements.level,\n          current_level: playerData.level\n        });\n        return;\n      }\n      \n      if (item.requirements.completedStages && playerData.completedStages.length < item.requirements.completedStages) {\n        onAction('purchase_failed', {\n          player_id: playerData.id,\n          item_id: item.id,\n          reason: 'stage_requirement',\n          required_stages: item.requirements.completedStages,\n          completed_stages: playerData.completedStages.length\n        });\n        return;\n      }\n    }\n\n    // Check currency\n    const hasEnoughCurrency = item.currency === 'gold' ? \n      playerData.gold >= item.price : \n      playerData.gems >= item.price;\n    \n    if (!hasEnoughCurrency) {\n      onAction('purchase_failed', {\n        player_id: playerData.id,\n        item_id: item.id,\n        reason: 'insufficient_currency',\n        required_amount: item.price,\n        current_amount: item.currency === 'gold' ? playerData.gold : playerData.gems,\n        currency: item.currency\n      });\n      return;\n    }\n\n    // Process purchase\n    if (item.currency === 'gold') {\n      setPlayerData(prev => ({ ...prev, gold: prev.gold - item.price }));\n    } else {\n      setPlayerData(prev => ({ ...prev, gems: prev.gems - item.price }));\n    }\n\n    // Add to inventory or apply effect\n    if (item.type === 'consumable' || item.type === 'tower_upgrade') {\n      const inventoryItem: InventoryItem = {\n        id: item.id,\n        name: item.name,\n        type: item.type,\n        rarity: 'common',\n        quantity: 1,\n        stats: item.effect,\n        description: item.description,\n        price: item.price,\n        sellPrice: Math.floor(item.price * 0.5)\n      };\n      \n      setPlayerData(prev => {\n        const existingIndex = prev.inventory.findIndex(i => i.id === item.id);\n        if (existingIndex >= 0) {\n          const newInventory = [...prev.inventory];\n          newInventory[existingIndex].quantity += 1;\n          return { ...prev, inventory: newInventory };\n        } else {\n          return { ...prev, inventory: [...prev.inventory, inventoryItem] };\n        }\n      });\n    }\n\n    onAction('item_purchased', {\n      player_id: playerData.id,\n      item_id: item.id,\n      item_name: item.name,\n      price: item.price,\n      currency: item.currency,\n      remaining_gold: item.currency === 'gold' ? playerData.gold - item.price : playerData.gold,\n      remaining_gems: item.currency === 'gem' ? playerData.gems - item.price : playerData.gems\n    });\n  };\n\n  const handleInventoryItemUse = (item: InventoryItem) => {\n    if (item.quantity <= 0) return;\n    \n    // Apply item effect based on type\n    switch (item.stats?.type) {\n      case 'restore_energy':\n        setPlayerData(prev => ({\n          ...prev,\n          energy: Math.min(prev.maxEnergy, prev.energy + item.stats.value)\n        }));\n        break;\n      // Other consumable effects would be applied in battle\n    }\n\n    // Reduce quantity\n    if (item.type === 'consumable') {\n      setPlayerData(prev => ({\n        ...prev,\n        inventory: prev.inventory.map(i => \n          i.id === item.id ? { ...i, quantity: i.quantity - 1 } : i\n        ).filter(i => i.quantity > 0)\n      }));\n    }\n\n    onAction('item_used', {\n      player_id: playerData.id,\n      item_id: item.id,\n      item_name: item.name,\n      effect: item.stats\n    });\n  };\n\n  const handleResultsClick = (x: number, y: number) => {\n    // Continue button\n    if (x >= 200 && x <= 400 && y >= 300 && y <= 350) {\n      returnToLobby();\n    }\n\n    // Retry button (only for failures)\n    if (!gameState.stageResults?.victory && x >= 100 && x <= 200 && y >= 320 && y <= 350) {\n      retryStage();\n    }\n  };\n\n  const returnToLobby = () => {\n    setGameState(prev => ({\n      ...prev,\n      currentScene: 'lobby',\n      stageResults: null,\n      selectedStage: null,\n      battleState: {\n        wave: 1,\n        lives: 20,\n        score: 0,\n        isWaveActive: false,\n        towers: [],\n        enemies: [],\n        projectiles: [],\n        waveProgress: 0,\n        battleTime: 0,\n        totalEnemies: 0,\n        enemiesSpawned: 0,\n        nextEnemySpawn: 0\n      },\n      selectedTower: null,\n      selectedTowerType: null,\n      isPaused: false,\n      showUpgradeMenu: false\n    }));\n\n    onAction('returned_to_lobby', {\n      player_id: playerData.id,\n      from_scene: gameState.stageResults?.victory ? 'stage_complete' : 'stage_failed',\n      player_level: playerData.level,\n      total_gold: playerData.gold,\n      total_energy: playerData.energy\n    });\n  };\n\n  const retryStage = () => {\n    if (!gameState.selectedStage) return;\n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage || playerData.energy < stage.energyCost) return;\n\n    // Consume energy again\n    setPlayerData(prev => ({ ...prev, energy: prev.energy - stage.energyCost }));\n\n    // Reset battle state\n    setGameState(prev => ({\n      ...prev,\n      currentScene: 'battle',\n      stageResults: null,\n      battleState: {\n        wave: 1,\n        lives: 20,\n        score: 0,\n        isWaveActive: false,\n        towers: [],\n        enemies: [],\n        projectiles: [],\n        waveProgress: 0,\n        battleTime: 0,\n        totalEnemies: 8 + 1 * 2,\n        enemiesSpawned: 0,\n        nextEnemySpawn: 0\n      },\n      selectedTower: null,\n      selectedTowerType: null,\n      isPaused: false,\n      showUpgradeMenu: false\n    }));\n\n    onAction('stage_retried', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      stage_name: stage.name,\n      energy_cost: stage.energyCost,\n      remaining_energy: playerData.energy - stage.energyCost\n    });\n  };\n\n  // Game loop updates\n  const updateBattle = useCallback(() => {\n    if (gameState.currentScene !== 'battle' || gameState.isPaused) return;\n\n    // Update battle time\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        battleTime: prev.battleState.battleTime + 1\n      }\n    }));\n\n    // Spawn enemies if wave is active\n    if (gameState.battleState.isWaveActive && \n        frameCount >= gameState.battleState.nextEnemySpawn &&\n        gameState.battleState.enemiesSpawned < gameState.battleState.totalEnemies) {\n      spawnSingleEnemy();\n    }\n\n    // Update enemies\n    updateEnemies();\n    \n    // Update towers\n    updateTowers();\n\n    // Update projectiles\n    updateProjectiles();\n\n    // Check win/lose conditions\n    checkBattleEnd();\n  }, [gameState.currentScene, gameState.battleState.isWaveActive, gameState.isPaused, frameCount]);\n\n  const updateEnemies = () => {\n    if (!gameState.selectedStage) return;\n    \n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        enemies: prev.battleState.enemies.map(enemy => {\n          if (!enemy.alive) return enemy;\n\n          // Update slow effect\n          let currentSpeed = enemy.speed;\n          if (enemy.slowDuration > 0) {\n            currentSpeed *= 0.5; // 50% speed reduction\n            enemy.slowDuration--;\n          }\n\n          const currentTarget = stage.path[enemy.pathIndex + 1];\n          if (currentTarget) {\n            const dx = currentTarget.x - enemy.x;\n            const dy = currentTarget.y - enemy.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n\n            if (distance < 5) {\n              enemy.pathIndex++;\n              if (enemy.pathIndex >= stage.path.length - 1) {\n                // Enemy reached end\n                setGameState(prev2 => ({\n                  ...prev2,\n                  battleState: {\n                    ...prev2.battleState,\n                    lives: prev2.battleState.lives - 1\n                  }\n                }));\n\n                onAction('life_lost', {\n                  player_id: playerData.id,\n                  stage_id: gameState.selectedStage,\n                  enemy_type: enemy.type,\n                  remaining_lives: gameState.battleState.lives - 1,\n                  wave_number: gameState.battleState.wave\n                });\n\n                return { ...enemy, alive: false };\n              }\n            } else {\n              const moveX = (dx / distance) * currentSpeed;\n              const moveY = (dy / distance) * currentSpeed;\n              enemy.x += moveX;\n              enemy.y += moveY;\n            }\n          }\n\n          return enemy;\n        }).filter(enemy => enemy.alive || enemy.pathIndex < stage.path.length - 1)\n      }\n    }));\n  };\n\n  const updateProjectiles = () => {\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        projectiles: prev.battleState.projectiles.filter(proj => {\n          // Update trail\n          proj.trail.push({ x: proj.x, y: proj.y });\n          if (proj.trail.length > 5) {\n            proj.trail.shift();\n          }\n\n          // Move projectile towards target\n          const dx = proj.targetX - proj.x;\n          const dy = proj.targetY - proj.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n\n          if (distance < 10) {\n            // Hit target - apply damage\n            hitTarget(proj);\n            return false; // Remove projectile\n          }\n\n          // Move projectile\n          const moveX = (dx / distance) * proj.speed;\n          const moveY = (dy / distance) * proj.speed;\n          proj.x += moveX;\n          proj.y += moveY;\n\n          return true; // Keep projectile\n        })\n      }\n    }));\n  };\n\n  const hitTarget = (projectile: Projectile) => {\n    const targetEnemy = gameState.battleState.enemies.find(e => e.id === projectile.targetId);\n    if (!targetEnemy || !targetEnemy.alive) return;\n\n    const actualDamage = Math.max(1, projectile.damage - targetEnemy.armor);\n    \n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        enemies: prev.battleState.enemies.map(enemy => {\n          if (enemy.id === targetEnemy.id) {\n            const newHealth = Math.max(0, enemy.health - actualDamage);\n            const killed = newHealth <= 0;\n\n            // Apply tower effects\n            if (projectile.effects.includes('slow')) {\n              enemy.slowDuration = 180; // 3 seconds at 60fps\n            }\n\n            if (killed) {\n              // Apply rewards\n              const goldGain = enemy.reward.find(r => r.type === 'gold')?.amount || 0;\n              const expGain = enemy.reward.find(r => r.type === 'exp')?.amount || 0;\n              \n              setPlayerData(prev2 => ({\n                ...prev2,\n                gold: prev2.gold + goldGain,\n                experience: prev2.experience + expGain\n              }));\n\n              setGameState(prev2 => ({\n                ...prev2,\n                battleState: {\n                  ...prev2.battleState,\n                  score: prev2.battleState.score + goldGain * 10,\n                  towers: prev2.battleState.towers.map(t => \n                    t.id === projectile.towerId ? { \n                      ...t, \n                      kills: t.kills + 1,\n                      experience: t.experience + expGain\n                    } : t\n                  )\n                }\n              }));\n\n              onAction('enemy_defeated', {\n                player_id: playerData.id,\n                stage_id: gameState.selectedStage,\n                enemy_type: enemy.type,\n                enemy_id: enemy.id,\n                tower_type: projectile.type,\n                tower_id: projectile.towerId,\n                damage_dealt: actualDamage,\n                gold_gained: goldGain,\n                exp_gained: expGain,\n                wave_number: gameState.battleState.wave\n              });\n\n              return { ...enemy, health: 0, alive: false };\n            } else {\n              onAction('enemy_damaged', {\n                player_id: playerData.id,\n                stage_id: gameState.selectedStage,\n                enemy_type: enemy.type,\n                enemy_id: enemy.id,\n                tower_type: projectile.type,\n                damage_dealt: actualDamage,\n                enemy_health_remaining: newHealth,\n                wave_number: gameState.battleState.wave\n              });\n\n              return { ...enemy, health: newHealth };\n            }\n          }\n\n          // Chain lightning effect\n          if (projectile.effects.includes('chain') && enemy.id !== targetEnemy.id && enemy.alive) {\n            const distance = Math.sqrt((enemy.x - targetEnemy.x) ** 2 + (enemy.y - targetEnemy.y) ** 2);\n            if (distance < 80) {\n              const chainDamage = Math.floor(projectile.damage * 0.6);\n              const actualChainDamage = Math.max(1, chainDamage - enemy.armor);\n              const newHealth = Math.max(0, enemy.health - actualChainDamage);\n              \n              return { ...enemy, health: newHealth, alive: newHealth > 0 };\n            }\n          }\n\n          return enemy;\n        })\n      }\n    }));\n\n    // Splash damage for cannon\n    if (projectile.effects.includes('splash')) {\n      const splashTargets = gameState.battleState.enemies.filter(enemy => {\n        if (enemy.id === targetEnemy.id || !enemy.alive) return false;\n        const distance = Math.sqrt((enemy.x - targetEnemy.x) ** 2 + (enemy.y - targetEnemy.y) ** 2);\n        return distance < 60;\n      });\n\n      splashTargets.forEach(enemy => {\n        const splashDamage = Math.floor(projectile.damage * 0.5);\n        const actualSplashDamage = Math.max(1, splashDamage - enemy.armor);\n        \n        setGameState(prev => ({\n          ...prev,\n          battleState: {\n            ...prev.battleState,\n            enemies: prev.battleState.enemies.map(e => \n              e.id === enemy.id ? { \n                ...e, \n                health: Math.max(0, e.health - actualSplashDamage),\n                alive: e.health - actualSplashDamage > 0\n              } : e\n            )\n          }\n        }));\n      });\n    }\n  };\n\n  const updateTowers = () => {\n    gameState.battleState.towers.forEach(tower => {\n      if (frameCount - tower.lastAttack < tower.attackSpeed) return;\n\n      const enemiesInRange = gameState.battleState.enemies.filter(enemy => {\n        if (!enemy.alive) return false;\n        const distance = Math.sqrt((enemy.x - tower.x) ** 2 + (enemy.y - tower.y) ** 2);\n        return distance <= tower.range;\n      });\n\n      if (enemiesInRange.length > 0) {\n        const target = enemiesInRange.reduce((best, current) => \n          current.pathIndex > best.pathIndex ? current : best\n        );\n\n        // Create projectile\n        const newProjectile: Projectile = {\n          id: `proj_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n          x: tower.x,\n          y: tower.y,\n          targetX: target.x,\n          targetY: target.y,\n          targetId: target.id,\n          speed: 8,\n          damage: tower.damage,\n          type: tower.type,\n          towerId: tower.id,\n          effects: towerTypes[tower.type as keyof typeof towerTypes].effects,\n          trail: []\n        };\n\n        setGameState(prev => ({\n          ...prev,\n          battleState: {\n            ...prev.battleState,\n            projectiles: [...prev.battleState.projectiles, newProjectile],\n            towers: prev.battleState.towers.map(t => \n              t.id === tower.id ? { ...t, lastAttack: frameCount } : t\n            )\n          }\n        }));\n\n        onAction('tower_attack', {\n          player_id: playerData.id,\n          stage_id: gameState.selectedStage,\n          tower_id: tower.id,\n          tower_type: tower.type,\n          target_enemy_id: target.id,\n          damage: tower.damage,\n          wave_number: gameState.battleState.wave\n        });\n      }\n    });\n  };\n\n  const checkBattleEnd = () => {\n    if (gameState.battleState.lives <= 0) {\n      completeStage(false);\n      return;\n    }\n\n    const aliveEnemies = gameState.battleState.enemies.filter(e => e.alive);\n    const allEnemiesSpawned = gameState.battleState.enemiesSpawned >= gameState.battleState.totalEnemies;\n    \n    if (aliveEnemies.length === 0 && allEnemiesSpawned && gameState.battleState.isWaveActive) {\n      if (gameState.battleState.wave >= 3) {\n        completeStage(true);\n      } else {\n        // Next wave\n        const nextWave = gameState.battleState.wave + 1;\n        const nextTotalEnemies = 8 + nextWave * 2;\n        \n        setGameState(prev => ({\n          ...prev,\n          battleState: {\n            ...prev.battleState,\n            wave: nextWave,\n            isWaveActive: false,\n            waveProgress: 0,\n            totalEnemies: nextTotalEnemies,\n            enemiesSpawned: 0,\n            nextEnemySpawn: 0\n          }\n        }));\n\n        // Wave completion bonus\n        const bonusGold = 25 + gameState.battleState.wave * 15;\n        setPlayerData(prev => ({\n          ...prev,\n          gold: prev.gold + bonusGold\n        }));\n\n        onAction('wave_completed', {\n          player_id: playerData.id,\n          stage_id: gameState.selectedStage,\n          wave_number: gameState.battleState.wave,\n          bonus_gold: bonusGold,\n          total_gold: playerData.gold + bonusGold,\n          score: gameState.battleState.score,\n          towers_count: gameState.battleState.towers.length\n        });\n      }\n    }\n  };\n\n  // Drawing functions\n  const drawLobby = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    // Background\n    ctx.fillStyle = '#1a1a2e';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Title\n    ctx.fillStyle = '#FFD700';\n    ctx.font = 'bold 32px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('üè∞ TOWER DEFENSE', canvas.width / 2, 80);\n\n    // Player info panel\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';\n    ctx.fillRect(50, 100, 500, 80);\n    \n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '16px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`${playerData.name} - Level ${playerData.level}`, 70, 125);\n    ctx.fillText(`Gold: ${playerData.gold} | Gems: ${playerData.gems}`, 70, 145);\n    ctx.fillText(`Energy: ${playerData.energy}/${playerData.maxEnergy}`, 70, 165);\n    \n    // Experience bar\n    const expNeeded = playerData.level * 100;\n    const expPercent = playerData.experience / expNeeded;\n    ctx.fillStyle = '#444';\n    ctx.fillRect(350, 140, 180, 12);\n    ctx.fillStyle = '#FFD700';\n    ctx.fillRect(350, 140, 180 * expPercent, 12);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '12px Arial';\n    ctx.fillText(`EXP: ${playerData.experience}/${expNeeded}`, 355, 150);\n\n    // Menu buttons\n    const buttons = [\n      { text: '‚öîÔ∏è DUNGEON', x: 250, y: 200, w: 100, h: 50 },\n      { text: 'üõí SHOP', x: 100, y: 300, w: 100, h: 50 },\n      { text: 'üéí INVENTORY', x: 400, y: 300, w: 100, h: 50 }\n    ];\n\n    buttons.forEach(button => {\n      ctx.fillStyle = 'rgba(74, 144, 226, 0.8)';\n      ctx.fillRect(button.x, button.y, button.w, button.h);\n      \n      ctx.strokeStyle = '#FFFFFF';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(button.x, button.y, button.w, button.h);\n      \n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(button.text, button.x + button.w/2, button.y + button.h/2 + 5);\n    });\n  };\n\n  const drawDungeon = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    // Background\n    ctx.fillStyle = '#0f1419';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Title\n    ctx.fillStyle = '#FFD700';\n    ctx.font = 'bold 24px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('üó°Ô∏è DUNGEON SELECT', canvas.width / 2, 40);\n\n    // Stage cards\n    stageDefinitions.forEach((stage, index) => {\n      const x = 50 + (index % 3) * 200;\n      const y = 70 + Math.floor(index / 3) * 120;\n      \n      const isUnlocked = stage.id <= playerData.unlockedStages;\n      const hasEnergy = playerData.energy >= stage.energyCost;\n      const canEnter = isUnlocked && hasEnergy;\n\n      // Stage card background\n      ctx.fillStyle = canEnter ? 'rgba(74, 144, 226, 0.8)' : 'rgba(100, 100, 100, 0.5)';\n      ctx.fillRect(x, y, 150, 100);\n      \n      ctx.strokeStyle = canEnter ? '#4a90e2' : '#666';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(x, y, 150, 100);\n\n      // Stage info\n      ctx.fillStyle = canEnter ? '#FFFFFF' : '#999';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(`Stage ${stage.id}`, x + 75, y + 20);\n      \n      ctx.font = '12px Arial';\n      ctx.fillText(stage.name, x + 75, y + 35);\n      ctx.fillText(stage.difficulty, x + 75, y + 50);\n      ctx.fillText(`Energy: ${stage.energyCost}`, x + 75, y + 65);\n      ctx.fillText(`Lv.${stage.recommendedLevel} Rec.`, x + 75, y + 80);\n\n      // Lock indicator\n      if (!isUnlocked) {\n        ctx.fillStyle = '#FF0000';\n        ctx.font = 'bold 20px Arial';\n        ctx.fillText('üîí', x + 75, y + 55);\n      }\n\n      // Completion stars\n      const completed = playerData.completedStages.find(c => c.stageId === stage.id);\n      if (completed) {\n        for (let i = 0; i < completed.starsEarned; i++) {\n          ctx.fillStyle = '#FFD700';\n          ctx.font = '16px Arial';\n          ctx.fillText('‚≠ê', x + 20 + i * 20, y + 95);\n        }\n      }\n    });\n\n    // Back button\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.8)';\n    ctx.fillRect(50, 350, 100, 30);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('‚Üê BACK', 100, 370);\n  };\n\n  const drawBattle = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    if (!gameState.selectedStage) return;\n    \n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n\n    // Background\n    ctx.fillStyle = stage.background;\n    ctx.fillRect(0, 0, canvas.width, 320);\n\n    // Draw path\n    ctx.strokeStyle = '#8B4513';\n    ctx.lineWidth = 20;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    \n    ctx.beginPath();\n    ctx.moveTo(stage.path[0].x, stage.path[0].y);\n    stage.path.slice(1).forEach(point => {\n      ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n\n    ctx.strokeStyle = '#DEB887';\n    ctx.lineWidth = 12;\n    ctx.beginPath();\n    ctx.moveTo(stage.path[0].x, stage.path[0].y);\n    stage.path.slice(1).forEach(point => {\n      ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n\n    // Draw towers\n    gameState.battleState.towers.forEach(tower => {\n      const config = towerTypes[tower.type as keyof typeof towerTypes];\n      const isSelected = gameState.selectedTower?.id === tower.id;\n      \n      // Tower base\n      ctx.fillStyle = isSelected ? '#FFD700' : '#696969';\n      ctx.beginPath();\n      ctx.arc(tower.x, tower.y, 18, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Tower body\n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(tower.x, tower.y, 14, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Tower icon\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '12px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(config.icon, tower.x, tower.y + 4);\n\n      // Level indicator\n      ctx.fillStyle = '#FFD700';\n      ctx.font = '10px Arial';\n      ctx.fillText(`Lv.${tower.level}`, tower.x, tower.y - 25);\n\n      // Range for selected tower\n      if (isSelected) {\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n        ctx.lineWidth = 2;\n        ctx.setLineDash([5, 5]);\n        ctx.beginPath();\n        ctx.arc(tower.x, tower.y, tower.range, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.setLineDash([]);\n      }\n    });\n\n    // Draw enemies\n    gameState.battleState.enemies.forEach(enemy => {\n      if (!enemy.alive) return;\n\n      const config = enemyTypes[enemy.type as keyof typeof enemyTypes];\n      const size = config.size;\n      \n      // Enemy shadow\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n      ctx.beginPath();\n      ctx.ellipse(enemy.x + 2, enemy.y + 2, size * 0.8, size * 0.4, 0, 0, 2 * Math.PI);\n      ctx.fill();\n      \n      // Enemy body with slow effect\n      if (enemy.slowDuration > 0) {\n        ctx.fillStyle = '#87CEEB'; // Light blue for slow effect\n        ctx.beginPath();\n        ctx.arc(enemy.x, enemy.y, size + 3, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n      \n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(enemy.x, enemy.y, size, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Enemy border\n      ctx.strokeStyle = '#000000';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Enemy icon\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = `${Math.max(10, size)}px Arial`;\n      ctx.textAlign = 'center';\n      ctx.fillText(config.icon, enemy.x, enemy.y + 4);\n\n      // Health bar\n      const barWidth = size * 1.5;\n      const barHeight = 4;\n      const healthPercent = enemy.health / enemy.maxHealth;\n      \n      ctx.fillStyle = '#000000';\n      ctx.fillRect(enemy.x - barWidth/2 - 1, enemy.y - size - 12, barWidth + 2, barHeight + 2);\n      ctx.fillStyle = '#FF0000';\n      ctx.fillRect(enemy.x - barWidth/2, enemy.y - size - 11, barWidth, barHeight);\n      ctx.fillStyle = healthPercent > 0.5 ? '#00FF00' : healthPercent > 0.25 ? '#FFFF00' : '#FF8800';\n      ctx.fillRect(enemy.x - barWidth/2, enemy.y - size - 11, barWidth * healthPercent, barHeight);\n      \n      // Armor indicator\n      if (enemy.armor > 0) {\n        ctx.fillStyle = '#C0C0C0';\n        ctx.font = '8px Arial';\n        ctx.fillText(`üõ°${enemy.armor}`, enemy.x, enemy.y - size - 16);\n      }\n    });\n\n    // Draw projectiles\n    gameState.battleState.projectiles.forEach(proj => {\n      const config = towerTypes[proj.type as keyof typeof towerTypes];\n      \n      // Draw trail\n      proj.trail.forEach((point, index) => {\n        const alpha = (index + 1) / proj.trail.length * 0.5;\n        ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, 2, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n      \n      // Draw projectile based on type\n      switch (proj.type) {\n        case 'archer':\n          ctx.fillStyle = '#8B4513';\n          ctx.beginPath();\n          ctx.arc(proj.x, proj.y, 3, 0, 2 * Math.PI);\n          ctx.fill();\n          break;\n        case 'cannon':\n          ctx.fillStyle = '#000000';\n          ctx.beginPath();\n          ctx.arc(proj.x, proj.y, 5, 0, 2 * Math.PI);\n          ctx.fill();\n          ctx.fillStyle = '#FF4500';\n          ctx.beginPath();\n          ctx.arc(proj.x, proj.y, 3, 0, 2 * Math.PI);\n          ctx.fill();\n          break;\n        case 'magic':\n          ctx.fillStyle = '#9400D3';\n          ctx.beginPath();\n          ctx.arc(proj.x, proj.y, 4, 0, 2 * Math.PI);\n          ctx.fill();\n          // Magic sparkle effect\n          for (let i = 0; i < 3; i++) {\n            const angle = (frameCount * 0.1 + i * Math.PI * 2 / 3) % (Math.PI * 2);\n            const sparkleX = proj.x + Math.cos(angle) * 8;\n            const sparkleY = proj.y + Math.sin(angle) * 8;\n            ctx.fillStyle = '#DDA0DD';\n            ctx.beginPath();\n            ctx.arc(sparkleX, sparkleY, 1, 0, 2 * Math.PI);\n            ctx.fill();\n          }\n          break;\n        case 'ice':\n          ctx.fillStyle = '#00BFFF';\n          ctx.beginPath();\n          ctx.arc(proj.x, proj.y, 4, 0, 2 * Math.PI);\n          ctx.fill();\n          ctx.fillStyle = '#E0FFFF';\n          ctx.beginPath();\n          ctx.arc(proj.x, proj.y, 2, 0, 2 * Math.PI);\n          ctx.fill();\n          break;\n        case 'lightning':\n          ctx.strokeStyle = '#FFD700';\n          ctx.lineWidth = 3;\n          ctx.beginPath();\n          ctx.moveTo(proj.x - 4, proj.y);\n          ctx.lineTo(proj.x + 4, proj.y);\n          ctx.moveTo(proj.x, proj.y - 4);\n          ctx.lineTo(proj.x, proj.y + 4);\n          ctx.stroke();\n          \n          ctx.fillStyle = '#FFFF00';\n          ctx.beginPath();\n          ctx.arc(proj.x, proj.y, 3, 0, 2 * Math.PI);\n          ctx.fill();\n          break;\n      }\n    });\n\n    // UI Panel\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n    ctx.fillRect(0, 320, canvas.width, 80);\n\n    // Battle stats\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`Stage ${gameState.selectedStage}: ${stage.name}`, 10, 340);\n    ctx.fillText(`Wave: ${gameState.battleState.wave}/3`, 10, 355);\n    ctx.fillText(`Lives: ${gameState.battleState.lives}`, 10, 370);\n    ctx.fillText(`Score: ${gameState.battleState.score}`, 10, 385);\n    ctx.fillText(`Gold: ${playerData.gold}`, 150, 340);\n    ctx.fillText(`Towers: ${gameState.battleState.towers.length}`, 150, 355);\n\n    // Tower selection buttons\n    Object.entries(towerTypes).forEach(([type, config], index) => {\n      const x = 300 + index * 60;\n      const y = 340;\n      const isSelected = gameState.selectedTowerType === type;\n      const canAfford = playerData.gold >= config.cost;\n\n      ctx.fillStyle = isSelected ? 'rgba(255, 255, 0, 0.5)' : \n                     canAfford ? 'rgba(255, 255, 255, 0.2)' : 'rgba(255, 0, 0, 0.2)';\n      ctx.fillRect(x, y, 50, 50);\n\n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(x + 25, y + 20, 12, 0, 2 * Math.PI);\n      ctx.fill();\n\n      ctx.fillStyle = canAfford ? '#FFFFFF' : '#FF6666';\n      ctx.font = '10px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(`${index + 1}: $${config.cost}`, x + 25, y + 45);\n    });\n\n    // Wave control\n    if (!gameState.battleState.isWaveActive) {\n      ctx.fillStyle = 'rgba(0, 255, 0, 0.8)';\n      ctx.fillRect(450, 350, 100, 30);\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('START WAVE', 500, 370);\n    }\n\n    // Pause button\n    ctx.fillStyle = 'rgba(255, 200, 0, 0.8)';\n    ctx.fillRect(560, 350, 30, 30);\n    ctx.fillStyle = '#000';\n    ctx.font = '16px Arial';\n    ctx.fillText('‚è∏', 575, 370);\n  };\n\n  const drawResults = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    if (!gameState.stageResults) return;\n\n    const results = gameState.stageResults;\n    \n    // Overlay with animation\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Results panel with glow effect\n    ctx.shadowColor = results.victory ? '#00FF00' : '#FF0000';\n    ctx.shadowBlur = 20;\n    ctx.fillStyle = 'rgba(30, 30, 30, 0.95)';\n    ctx.fillRect(80, 40, 440, 320);\n    \n    ctx.shadowBlur = 0;\n    ctx.strokeStyle = results.victory ? '#FFD700' : '#FF4444';\n    ctx.lineWidth = 3;\n    ctx.strokeRect(80, 40, 440, 320);\n\n    // Animated title\n    const titleScale = 1 + Math.sin(frameCount * 0.1) * 0.1;\n    ctx.save();\n    ctx.translate(300, 80);\n    ctx.scale(titleScale, titleScale);\n    ctx.fillStyle = results.victory ? '#00FF00' : '#FF0000';\n    ctx.font = 'bold 28px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(results.victory ? 'üéâ VICTORY!' : 'üíÄ DEFEAT!', 0, 0);\n    ctx.restore();\n\n    // Results with better formatting\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '18px Arial';\n    ctx.textAlign = 'left';\n    \n    let yPos = 120;\n    \n    // Score with icon\n    ctx.fillText(`üèÜ Score: ${results.score.toLocaleString()}`, 100, yPos);\n    yPos += 30;\n    \n    if (results.victory) {\n      // Stars with animation\n      ctx.fillText('Stars Earned:', 100, yPos);\n      for (let i = 0; i < results.starsEarned; i++) {\n        const starScale = 1 + Math.sin((frameCount + i * 20) * 0.15) * 0.2;\n        ctx.save();\n        ctx.translate(250 + i * 30, yPos - 5);\n        ctx.scale(starScale, starScale);\n        ctx.font = '20px Arial';\n        ctx.fillText('‚≠ê', 0, 0);\n        ctx.restore();\n      }\n      yPos += 35;\n      \n      // Rewards section\n      ctx.fillStyle = '#FFD700';\n      ctx.font = 'bold 16px Arial';\n      ctx.fillText('REWARDS:', 100, yPos);\n      yPos += 25;\n      \n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '14px Arial';\n      results.rewards.forEach(reward => {\n        const iconMap: Record<string, string> = { \n          gold: 'üí∞', exp: '‚≠ê', gem: 'üíé', item: 'üéÅ' \n        };\n        const icon = iconMap[reward.type] || 'üéÅ';\n        ctx.fillText(`${icon} +${reward.amount.toLocaleString()}`, 120, yPos);\n        yPos += 22;\n      });\n\n      if (results.newUnlocks.length > 0) {\n        yPos += 10;\n        ctx.fillStyle = '#FFD700';\n        ctx.font = 'bold 14px Arial';\n        results.newUnlocks.forEach(unlock => {\n          ctx.fillText(`üîì ${unlock}`, 100, yPos);\n          yPos += 22;\n        });\n      }\n    } else {\n      // Defeat specific information\n      ctx.fillStyle = '#FFAAAA';\n      ctx.font = '16px Arial';\n      ctx.fillText(`üí• Wave Reached: ${gameState.battleState.wave}`, 100, yPos);\n      yPos += 25;\n      ctx.fillText(`üè∞ Towers Built: ${gameState.battleState.towers.length}`, 100, yPos);\n      yPos += 25;\n      ctx.fillText(`üíÄ Enemies Defeated: ${gameState.battleState.towers.reduce((sum, tower) => sum + tower.kills, 0)}`, 100, yPos);\n      yPos += 30;\n      \n      // Consolation reward\n      if (results.rewards.length > 0) {\n        ctx.fillStyle = '#FFFF99';\n        ctx.font = '14px Arial';\n        ctx.fillText('Consolation Reward:', 100, yPos);\n        yPos += 20;\n        ctx.fillStyle = '#FFFFFF';\n        results.rewards.forEach(reward => {\n          ctx.fillText(`üí∞ +${reward.amount} Gold`, 120, yPos);\n          yPos += 20;\n        });\n      }\n    }\n\n    // Buttons\n    if (!results.victory) {\n      // Retry button (only for failures)\n      const hasEnergy = gameState.selectedStage ? \n        playerData.energy >= (stageDefinitions.find(s => s.id === gameState.selectedStage)?.energyCost || 0) : false;\n      \n      ctx.fillStyle = hasEnergy ? 'rgba(255, 165, 0, 0.8)' : 'rgba(128, 128, 128, 0.5)';\n      ctx.fillRect(100, 320, 120, 30);\n      ctx.strokeStyle = hasEnergy ? '#FFA500' : '#666666';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(100, 320, 120, 30);\n      \n      ctx.fillStyle = hasEnergy ? '#FFFFFF' : '#AAAAAA';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(hasEnergy ? 'üîÑ RETRY' : 'NO ENERGY', 160, 340);\n    }\n    \n    // Continue button\n    ctx.fillStyle = 'rgba(74, 144, 226, 0.8)';\n    ctx.fillRect(results.victory ? 250 : 280, 320, 140, 30);\n    ctx.strokeStyle = '#4A90E2';\n    ctx.lineWidth = 2;\n    ctx.strokeRect(results.victory ? 250 : 280, 320, 140, 30);\n    \n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = 'bold 14px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('üè† LOBBY', results.victory ? 320 : 350, 340);\n    \n    // Instructions\n    ctx.fillStyle = '#CCCCCC';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('Click buttons to continue', 300, 370);\n  };\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    switch (gameState.currentScene) {\n      case 'lobby':\n        drawLobby(ctx, canvas);\n        break;\n      case 'dungeon':\n        drawDungeon(ctx, canvas);\n        break;\n      case 'battle':\n        drawBattle(ctx, canvas);\n        break;\n      case 'stageComplete':\n      case 'stageFailed':\n        drawBattle(ctx, canvas);\n        drawResults(ctx, canvas);\n        break;\n      case 'shop':\n        drawLobby(ctx, canvas);\n        // Add shop overlay\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = '#FFD700';\n        ctx.font = 'bold 24px Arial';\n        ctx.textAlign = 'center';\n        drawShop(ctx, canvas);\n        break;\n      case 'inventory':\n        drawLobby(ctx, canvas);\n        // Add inventory overlay\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = '#FFD700';\n        ctx.font = 'bold 24px Arial';\n        ctx.textAlign = 'center';\n        drawInventory(ctx, canvas);\n        break;\n    }\n  }, [gameState, playerData]);\n\n  const drawShop = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    // Background\n    ctx.fillStyle = '#1a1a2e';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Title\n    ctx.fillStyle = '#FFD700';\n    ctx.font = 'bold 24px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('üõçÔ∏è MAGIC SHOP', canvas.width / 2, 30);\n\n    // Player currency display\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`üí∞ Gold: ${playerData.gold.toLocaleString()}`, 50, 370);\n    ctx.fillText(`üíé Gems: ${playerData.gems.toLocaleString()}`, 200, 370);\n    ctx.fillText(`Level: ${playerData.level}`, 350, 370);\n\n    // Category tabs\n    const categories = [\n      { id: 'tower', name: 'TOWER UPGRADES', icon: 'üè∞' },\n      { id: 'utility', name: 'UTILITY', icon: 'üß™' },\n      { id: 'premium', name: 'PREMIUM', icon: '‚ú®' }\n    ];\n\n    categories.forEach((category, index) => {\n      const tabX = 80 + index * 150;\n      const isSelected = gameState.shopCategory === category.id;\n      \n      ctx.fillStyle = isSelected ? 'rgba(255, 215, 0, 0.8)' : 'rgba(100, 100, 100, 0.6)';\n      ctx.fillRect(tabX, 50, 140, 30);\n      \n      ctx.strokeStyle = isSelected ? '#FFD700' : '#666';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(tabX, 50, 140, 30);\n      \n      ctx.fillStyle = isSelected ? '#000' : '#FFF';\n      ctx.font = 'bold 12px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(`${category.icon} ${category.name}`, tabX + 70, 70);\n    });\n\n    // Shop items\n    const categoryItems = shopItems.filter(item => item.category === gameState.shopCategory);\n    \n    categoryItems.forEach((item, index) => {\n      const itemX = 80 + (index % 2) * 220;\n      const itemY = 100 + Math.floor(index / 2) * 100;\n      \n      // Check if player can afford and meets requirements\n      const canAfford = item.currency === 'gold' ? \n        playerData.gold >= item.price : \n        playerData.gems >= item.price;\n      \n      const meetsRequirements = !item.requirements || (\n        (!item.requirements.level || playerData.level >= item.requirements.level) &&\n        (!item.requirements.completedStages || playerData.completedStages.length >= item.requirements.completedStages)\n      );\n      \n      const canPurchase = canAfford && meetsRequirements;\n      \n      // Item background\n      ctx.fillStyle = canPurchase ? 'rgba(74, 144, 226, 0.8)' : 'rgba(100, 100, 100, 0.5)';\n      ctx.fillRect(itemX, itemY, 200, 90);\n      \n      ctx.strokeStyle = canPurchase ? '#4A90E2' : '#666';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(itemX, itemY, 200, 90);\n      \n      // Item info\n      ctx.fillStyle = canPurchase ? '#FFFFFF' : '#AAAAAA';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'left';\n      ctx.fillText(item.name, itemX + 10, itemY + 20);\n      \n      ctx.font = '11px Arial';\n      const words = item.description.split(' ');\n      let line = '';\n      let y = itemY + 35;\n      \n      words.forEach(word => {\n        const testLine = line + word + ' ';\n        const metrics = ctx.measureText(testLine);\n        if (metrics.width > 180 && line !== '') {\n          ctx.fillText(line, itemX + 10, y);\n          line = word + ' ';\n          y += 12;\n        } else {\n          line = testLine;\n        }\n      });\n      ctx.fillText(line, itemX + 10, y);\n      \n      // Price\n      ctx.fillStyle = canAfford ? '#00FF00' : '#FF6666';\n      ctx.font = 'bold 12px Arial';\n      const currencyIcon = item.currency === 'gold' ? 'üí∞' : 'üíé';\n      ctx.fillText(`${currencyIcon} ${item.price}`, itemX + 10, itemY + 80);\n      \n      // Requirements warning\n      if (!meetsRequirements) {\n        ctx.fillStyle = '#FF6666';\n        ctx.font = '10px Arial';\n        if (item.requirements?.level && playerData.level < item.requirements.level) {\n          ctx.fillText(`Requires Level ${item.requirements.level}`, itemX + 100, itemY + 80);\n        }\n        if (item.requirements?.completedStages && playerData.completedStages.length < item.requirements.completedStages) {\n          ctx.fillText(`Complete ${item.requirements.completedStages} stages`, itemX + 100, itemY + 80);\n        }\n      }\n    });\n\n    // Back button\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.8)';\n    ctx.fillRect(50, 350, 100, 30);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('‚Üê BACK', 100, 370);\n  };\n\n  const drawInventory = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    // Background\n    ctx.fillStyle = '#2d1b69';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Title\n    ctx.fillStyle = '#FFD700';\n    ctx.font = 'bold 24px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('üéí INVENTORY', canvas.width / 2, 30);\n\n    // Player info\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`Items: ${playerData.inventory.length}`, 50, 60);\n    ctx.fillText(`Total Value: ${playerData.inventory.reduce((sum, item) => sum + item.sellPrice * item.quantity, 0)} gold`, 200, 60);\n\n    // Inventory grid\n    const itemsPerRow = 5;\n    const startY = 100;\n    \n    playerData.inventory.forEach((item, index) => {\n      const itemX = 50 + (index % itemsPerRow) * 100;\n      const itemY = startY + Math.floor(index / itemsPerRow) * 80;\n      \n      // Rarity colors\n      const rarityColors = {\n        common: '#CCCCCC',\n        rare: '#0099FF',\n        epic: '#9933FF',\n        legendary: '#FF9900'\n      };\n      \n      // Item slot\n      ctx.fillStyle = 'rgba(50, 50, 50, 0.8)';\n      ctx.fillRect(itemX, itemY, 80, 60);\n      \n      ctx.strokeStyle = rarityColors[item.rarity];\n      ctx.lineWidth = 2;\n      ctx.strokeRect(itemX, itemY, 80, 60);\n      \n      // Item info\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = 'bold 10px Arial';\n      ctx.textAlign = 'center';\n      \n      // Truncate long names\n      const displayName = item.name.length > 10 ? item.name.substring(0, 8) + '...' : item.name;\n      ctx.fillText(displayName, itemX + 40, itemY + 15);\n      \n      // Type icon\n      const typeIcons = {\n        weapon: '‚öîÔ∏è',\n        armor: 'üõ°Ô∏è',\n        consumable: 'üß™',\n        material: 'üìé',\n        tower_upgrade: '‚¨ÜÔ∏è',\n        blueprint: 'üìú'\n      };\n      \n      ctx.font = '16px Arial';\n      ctx.fillText(typeIcons[item.type] || '‚ùì', itemX + 40, itemY + 35);\n      \n      // Quantity\n      if (item.quantity > 1) {\n        ctx.fillStyle = '#FFD700';\n        ctx.font = 'bold 10px Arial';\n        ctx.fillText(`x${item.quantity}`, itemX + 65, itemY + 55);\n      }\n      \n      // Sell value\n      ctx.fillStyle = '#00FF00';\n      ctx.font = '8px Arial';\n      ctx.fillText(`üí∞${item.sellPrice}`, itemX + 5, itemY + 55);\n    });\n\n    // Instructions\n    ctx.fillStyle = '#CCCCCC';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('Click items to use/equip them', canvas.width / 2, 320);\n\n    // Back button\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.8)';\n    ctx.fillRect(50, 350, 100, 30);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('‚Üê BACK', 100, 370);\n  };\n\n  // Game loop\n  useEffect(() => {\n    const gameLoop = () => {\n      updateBattle();\n      draw();\n      setFrameCount(prev => prev + 1);\n      gameLoopRef.current = requestAnimationFrame(gameLoop);\n    };\n\n    gameLoopRef.current = requestAnimationFrame(gameLoop);\n\n    return () => {\n      if (gameLoopRef.current) {\n        cancelAnimationFrame(gameLoopRef.current);\n      }\n    };\n  }, [updateBattle, draw]);\n\n  // Event listeners\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown);\n    \n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n\n  return (\n    <div style={{ \n      display: 'flex', \n      flexDirection: 'column', \n      alignItems: 'center',\n      background: '#0a0a0a',\n      borderRadius: '12px',\n      padding: '16px',\n      border: '2px solid #2d3748',\n      maxHeight: '500px',\n      overflowY: 'auto',\n      overflowX: 'auto'\n    }}>\n      <canvas\n        ref={canvasRef}\n        width={600}\n        height={400}\n        style={{\n          border: '2px solid #4a5568',\n          borderRadius: '8px',\n          cursor: gameState.selectedTowerType ? 'crosshair' : 'pointer',\n          maxWidth: '100%',\n          height: 'auto'\n        }}\n        onClick={handleCanvasClick}\n        tabIndex={0}\n      />\n      \n      <div style={{\n        marginTop: '12px',\n        color: '#ffffff',\n        fontSize: '14px',\n        textAlign: 'center',\n        maxWidth: '600px',\n      }}>\n        <p>üè∞ <strong>Complete Tower Defense RPG</strong></p>\n        <p>\n          {gameState.currentScene === 'lobby' && 'Î°úÎπÑÏóêÏÑú ÎçòÏ†ÑÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî!'}\n          {gameState.currentScene === 'dungeon' && 'Ïä§ÌÖåÏù¥ÏßÄÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî!'}\n          {gameState.currentScene === 'battle' && `Stage ${gameState.selectedStage} - SpaceÎ°ú Ïõ®Ïù¥Î∏å ÏãúÏûë!`}\n          {(gameState.currentScene === 'stageComplete' || gameState.currentScene === 'stageFailed') && 'Í≤∞Í≥ºÎ•º ÌôïÏù∏ÌïòÍ≥† Í≥ÑÏÜçÌïòÏÑ∏Ïöî!'}\n        </p>\n        <p>Level {playerData.level} | Gold: {playerData.gold} | Energy: {playerData.energy}/{playerData.maxEnergy}</p>\n      </div>\n    </div>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}