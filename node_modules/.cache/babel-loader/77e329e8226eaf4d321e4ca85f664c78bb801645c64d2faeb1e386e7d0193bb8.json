{"ast":null,"code":"import React,{useRef,useEffect,useState,useCallback}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const CompleteGameSystem=_ref=>{let{onAction,playerStats,setPlayerStats,currentUser}=_ref;const canvasRef=useRef(null);const gameLoopRef=useRef();const[frameCount,setFrameCount]=useState(0);// Player persistent data\nconst[playerData,setPlayerData]=useState({id:currentUser.user_id,name:\"Hero\",level:1,experience:0,gold:1000,gems:50,energy:100,maxEnergy:100,unlockedStages:1,inventory:[{id:'sword1',name:'Iron Sword',type:'weapon',rarity:'common',quantity:1,stats:{attack:10}},{id:'potion1',name:'Health Potion',type:'consumable',rarity:'common',quantity:5,stats:{heal:50}}],completedStages:[],achievements:[],totalPlayTime:0,lastLogin:new Date().toISOString()});// Game state\nconst[gameState,setGameState]=useState({currentScene:'lobby',selectedStage:null,battleState:{wave:1,lives:20,score:0,isWaveActive:false,towers:[],enemies:[],waveProgress:0,battleTime:0},stageResults:null,cameraX:0,cameraY:0,selectedTower:null,selectedTowerType:null});// Stage definitions\nconst stageDefinitions=[{id:1,name:\"Green Fields\",difficulty:'Easy',energyCost:10,recommendedLevel:1,rewards:[{type:'gold',amount:100},{type:'exp',amount:50}],isUnlocked:true,path:[{x:0,y:200},{x:150,y:200},{x:150,y:100},{x:300,y:100},{x:300,y:300},{x:600,y:300}],enemies:[{enemies:[],spawnDelay:60}],background:'#2d5016'},{id:2,name:\"Dark Forest\",difficulty:'Normal',energyCost:15,recommendedLevel:3,rewards:[{type:'gold',amount:200},{type:'exp',amount:80},{type:'gem',amount:5}],isUnlocked:false,path:[{x:0,y:150},{x:100,y:150},{x:100,y:50},{x:250,y:50},{x:250,y:250},{x:400,y:250},{x:400,y:100},{x:600,y:100}],enemies:[{enemies:[],spawnDelay:50}],background:'#1a3d1a'},{id:3,name:\"Ancient Ruins\",difficulty:'Hard',energyCost:20,recommendedLevel:5,rewards:[{type:'gold',amount:350},{type:'exp',amount:120},{type:'gem',amount:10}],isUnlocked:false,path:[{x:0,y:200},{x:80,y:200},{x:80,y:80},{x:200,y:80},{x:200,y:320},{x:320,y:320},{x:320,y:120},{x:500,y:120},{x:500,y:280},{x:600,y:280}],enemies:[{enemies:[],spawnDelay:40}],background:'#4a4a2a'},{id:4,name:\"Dragon's Lair\",difficulty:'Expert',energyCost:25,recommendedLevel:8,rewards:[{type:'gold',amount:500},{type:'exp',amount:200},{type:'gem',amount:20}],isUnlocked:false,path:[{x:0,y:200},{x:150,y:200},{x:150,y:100},{x:450,y:100},{x:450,y:300},{x:600,y:300}],enemies:[{enemies:[],spawnDelay:35}],background:'#5d1a1a'},{id:5,name:\"Demon Realm\",difficulty:'Hell',energyCost:30,recommendedLevel:12,rewards:[{type:'gold',amount:1000},{type:'exp',amount:400},{type:'gem',amount:50}],isUnlocked:false,path:[{x:0,y:200},{x:100,y:200},{x:200,y:200},{x:300,y:200},{x:400,y:200},{x:500,y:200},{x:600,y:200}],enemies:[{enemies:[],spawnDelay:30}],background:'#2d0d0d'}];// Tower types\nconst towerTypes={'archer':{cost:80,damage:25,range:120,speed:30,color:'#8B4513',icon:'🏹'},'cannon':{cost:150,damage:60,range:100,speed:60,color:'#696969',icon:'💣'},'magic':{cost:220,damage:40,range:140,speed:40,color:'#9400D3',icon:'✨'},'ice':{cost:180,damage:20,range:110,speed:35,color:'#00BFFF',icon:'❄️'},'lightning':{cost:300,damage:80,range:150,speed:50,color:'#FFD700',icon:'⚡'}};// Enemy types\nconst enemyTypes={'goblin':{health:80,speed:2,reward:15,color:'#228B22',icon:'👹',armor:0},'orc':{health:150,speed:1.5,reward:25,color:'#8B4513',icon:'🗡️',armor:2},'troll':{health:300,speed:1,reward:40,color:'#2F4F4F',icon:'🏔️',armor:5},'dragon':{health:500,speed:0.8,reward:80,color:'#DC143C',icon:'🐉',armor:8},'demon':{health:800,speed:0.6,reward:150,color:'#8B0000',icon:'😈',armor:12}};// Initialize session\nuseEffect(()=>{onAction('session_started',{player_id:playerData.id,player_level:playerData.level,total_gold:playerData.gold,unlocked_stages:playerData.unlockedStages,login_streak:1});},[]);// Energy regeneration\nuseEffect(()=>{const energyRegen=setInterval(()=>{setPlayerData(prev=>({...prev,energy:Math.min(prev.maxEnergy,prev.energy+1)}));},60000);// 1 energy per minute\nreturn()=>clearInterval(energyRegen);},[]);// Level up check\nuseEffect(()=>{const expNeeded=playerData.level*100;if(playerData.experience>=expNeeded){const newLevel=playerData.level+1;setPlayerData(prev=>({...prev,level:newLevel,experience:prev.experience-expNeeded,maxEnergy:prev.maxEnergy+10}));onAction('player_level_up',{player_id:playerData.id,old_level:playerData.level,new_level:newLevel,new_max_energy:playerData.maxEnergy+10,total_playtime:playerData.totalPlayTime});}},[playerData.experience,playerData.level,playerData.maxEnergy,playerData.totalPlayTime,playerData.id,onAction]);// Keyboard handling\nconst handleKeyDown=useCallback(e=>{// Prevent page scrolling\nif(['ArrowUp','ArrowDown','ArrowLeft','ArrowRight','w','a','s','d',' ','Enter','Escape'].includes(e.key)){e.preventDefault();e.stopPropagation();}switch(e.key.toLowerCase()){case'escape':if(gameState.currentScene==='battle'){pauseBattle();}else if(gameState.currentScene!=='lobby'){setGameState(prev=>({...prev,currentScene:'lobby'}));}break;case' ':if(gameState.currentScene==='battle'){startWave();}break;case'1':case'2':case'3':case'4':case'5':if(gameState.currentScene==='battle'){const towerIndex=parseInt(e.key)-1;const towerTypeKeys=Object.keys(towerTypes);if(towerIndex<towerTypeKeys.length){setGameState(prev=>({...prev,selectedTowerType:towerTypeKeys[towerIndex],selectedTower:null}));}}break;}},[gameState.currentScene]);// Mouse/Click handling\nconst handleCanvasClick=useCallback(e=>{const canvas=canvasRef.current;if(!canvas)return;const rect=canvas.getBoundingClientRect();const x=e.clientX-rect.left;const y=e.clientY-rect.top;switch(gameState.currentScene){case'lobby':handleLobbyClick(x,y);break;case'dungeon':handleDungeonClick(x,y);break;case'battle':handleBattleClick(x,y);break;case'stageComplete':case'stageFailed':handleResultsClick(x,y);break;}},[gameState.currentScene]);const handleLobbyClick=(x,y)=>{// Dungeon button\nif(x>=250&&x<=350&&y>=200&&y<=250){setGameState(prev=>({...prev,currentScene:'dungeon'}));onAction('menu_navigation',{player_id:playerData.id,from_scene:'lobby',to_scene:'dungeon',player_level:playerData.level});}// Shop button\nif(x>=100&&x<=200&&y>=300&&y<=350){setGameState(prev=>({...prev,currentScene:'shop'}));onAction('menu_navigation',{player_id:playerData.id,from_scene:'lobby',to_scene:'shop',player_level:playerData.level});}// Inventory button\nif(x>=400&&x<=500&&y>=300&&y<=350){setGameState(prev=>({...prev,currentScene:'inventory'}));onAction('menu_navigation',{player_id:playerData.id,from_scene:'lobby',to_scene:'inventory',player_level:playerData.level});}};const handleDungeonClick=(x,y)=>{// Stage selection\nstageDefinitions.forEach((stage,index)=>{const stageX=50+index%3*200;const stageY=100+Math.floor(index/3)*150;if(x>=stageX&&x<=stageX+150&&y>=stageY&&y<=stageY+100){if(stage.id<=playerData.unlockedStages&&playerData.energy>=stage.energyCost){enterStage(stage.id);}}});// Back button\nif(x>=50&&x<=150&&y>=350&&y<=380){setGameState(prev=>({...prev,currentScene:'lobby'}));}};const enterStage=stageId=>{const stage=stageDefinitions.find(s=>s.id===stageId);if(!stage)return;// Consume energy\nsetPlayerData(prev=>({...prev,energy:prev.energy-stage.energyCost}));// Initialize battle\nsetGameState(prev=>({...prev,currentScene:'battle',selectedStage:stageId,battleState:{wave:1,lives:20,score:0,isWaveActive:false,towers:[],enemies:[],waveProgress:0,battleTime:0}}));onAction('stage_entered',{player_id:playerData.id,stage_id:stageId,stage_name:stage.name,energy_cost:stage.energyCost,remaining_energy:playerData.energy-stage.energyCost,player_level:playerData.level,recommended_level:stage.recommendedLevel});};const handleBattleClick=(x,y)=>{// UI area (bottom 80px)\nif(y>320)return;if(gameState.selectedTowerType){// Place tower\nif(canPlaceTower(x,y)){placeTower(x,y,gameState.selectedTowerType);}}else{// Select existing tower\nconst clickedTower=gameState.battleState.towers.find(tower=>{const distance=Math.sqrt((x-tower.x)**2+(y-tower.y)**2);return distance<25;});if(clickedTower){setGameState(prev=>({...prev,selectedTower:clickedTower,selectedTowerType:null}));}}};const canPlaceTower=(x,y)=>{if(!gameState.selectedStage)return false;const stage=stageDefinitions.find(s=>s.id===gameState.selectedStage);if(!stage)return false;// Check distance from path\nfor(const point of stage.path){const distance=Math.sqrt((x-point.x)**2+(y-point.y)**2);if(distance<40)return false;}// Check distance from other towers\nfor(const tower of gameState.battleState.towers){const distance=Math.sqrt((x-tower.x)**2+(y-tower.y)**2);if(distance<50)return false;}return x>25&&x<575&&y>25&&y<295;};const placeTower=(x,y,type)=>{const towerConfig=towerTypes[type];if(playerData.gold<towerConfig.cost)return;const newTower={id:`tower_${Date.now()}_${Math.random().toString(36).substr(2,5)}`,x,y,type,level:1,damage:towerConfig.damage,range:towerConfig.range,attackSpeed:towerConfig.speed,lastAttack:0,cost:towerConfig.cost,kills:0};setPlayerData(prev=>({...prev,gold:prev.gold-towerConfig.cost}));setGameState(prev=>({...prev,battleState:{...prev.battleState,towers:[...prev.battleState.towers,newTower]},selectedTowerType:null}));onAction('tower_placed',{player_id:playerData.id,stage_id:gameState.selectedStage,tower_type:type,tower_cost:towerConfig.cost,position_x:x,position_y:y,remaining_gold:playerData.gold-towerConfig.cost,wave_number:gameState.battleState.wave});};const startWave=()=>{if(gameState.battleState.isWaveActive)return;setGameState(prev=>({...prev,battleState:{...prev.battleState,isWaveActive:true,waveProgress:0}}));onAction('wave_started',{player_id:playerData.id,stage_id:gameState.selectedStage,wave_number:gameState.battleState.wave,towers_count:gameState.battleState.towers.length,current_gold:playerData.gold});// Spawn enemies\nspawnEnemyWave();};const spawnEnemyWave=()=>{if(!gameState.selectedStage)return;const stage=stageDefinitions.find(s=>s.id===gameState.selectedStage);if(!stage)return;const enemyCount=8+gameState.battleState.wave*2;const enemyTypeKeys=Object.keys(enemyTypes);for(let i=0;i<enemyCount;i++){setTimeout(()=>{const enemyType=enemyTypeKeys[Math.min(gameState.battleState.wave-1,enemyTypeKeys.length-1)];const enemyConfig=enemyTypes[enemyType];const newEnemy={id:`enemy_${Date.now()}_${Math.random().toString(36).substr(2,5)}`,x:stage.path[0].x,y:stage.path[0].y,health:enemyConfig.health*gameState.selectedStage,maxHealth:enemyConfig.health*gameState.selectedStage,speed:enemyConfig.speed,type:enemyType,pathIndex:0,alive:true,armor:enemyConfig.armor,reward:[{type:'gold',amount:enemyConfig.reward},{type:'exp',amount:enemyConfig.reward/2}]};setGameState(prev=>({...prev,battleState:{...prev.battleState,enemies:[...prev.battleState.enemies,newEnemy]}}));},i*800);}};const pauseBattle=()=>{onAction('battle_paused',{player_id:playerData.id,stage_id:gameState.selectedStage,wave_number:gameState.battleState.wave,battle_time:gameState.battleState.battleTime,current_score:gameState.battleState.score});};const completeStage=victory=>{var _rewards$find,_rewards$find2;if(!gameState.selectedStage)return;const stage=stageDefinitions.find(s=>s.id===gameState.selectedStage);if(!stage)return;const starsEarned=victory?calculateStars():0;const rewards=victory?stage.rewards:[];// Apply rewards\nif(victory){let goldGained=0;let expGained=0;let gemsGained=0;rewards.forEach(reward=>{switch(reward.type){case'gold':goldGained+=reward.amount;break;case'exp':expGained+=reward.amount;break;case'gem':gemsGained+=reward.amount;break;}});setPlayerData(prev=>({...prev,gold:prev.gold+goldGained,experience:prev.experience+expGained,gems:prev.gems+gemsGained,unlockedStages:Math.max(prev.unlockedStages,gameState.selectedStage+1)}));// Record completion\nconst completion={stageId:gameState.selectedStage,bestScore:gameState.battleState.score,completionTime:gameState.battleState.battleTime,starsEarned,completedAt:new Date().toISOString()};setPlayerData(prev=>{const existingIndex=prev.completedStages.findIndex(c=>c.stageId===gameState.selectedStage);const newCompletedStages=[...prev.completedStages];if(existingIndex>=0){newCompletedStages[existingIndex]=completion;}else{newCompletedStages.push(completion);}return{...prev,completedStages:newCompletedStages};});}const results={victory,score:gameState.battleState.score,starsEarned,timeBonus:victory?Math.max(0,300-gameState.battleState.battleTime):0,rewards,newUnlocks:victory&&gameState.selectedStage===playerData.unlockedStages?[`Stage ${gameState.selectedStage+1} Unlocked!`]:[]};setGameState(prev=>({...prev,currentScene:victory?'stageComplete':'stageFailed',stageResults:results}));onAction(victory?'stage_victory':'stage_defeat',{player_id:playerData.id,stage_id:gameState.selectedStage,stage_name:stage.name,final_score:gameState.battleState.score,stars_earned:starsEarned,battle_time:gameState.battleState.battleTime,towers_built:gameState.battleState.towers.length,waves_completed:gameState.battleState.wave,gold_gained:victory?((_rewards$find=rewards.find(r=>r.type==='gold'))===null||_rewards$find===void 0?void 0:_rewards$find.amount)||0:0,exp_gained:victory?((_rewards$find2=rewards.find(r=>r.type==='exp'))===null||_rewards$find2===void 0?void 0:_rewards$find2.amount)||0:0,new_unlocks:results.newUnlocks});};const calculateStars=()=>{const baseScore=gameState.battleState.score;const timeBonus=Math.max(0,300-gameState.battleState.battleTime);const livesBonus=gameState.battleState.lives*10;const totalScore=baseScore+timeBonus+livesBonus;if(totalScore>=1000)return 3;if(totalScore>=500)return 2;return 1;};const handleResultsClick=(x,y)=>{// Continue button\nif(x>=200&&x<=400&&y>=300&&y<=350){setGameState(prev=>({...prev,currentScene:'lobby',stageResults:null,selectedStage:null}));}};// Game loop updates\nconst updateBattle=useCallback(()=>{if(gameState.currentScene!=='battle'||!gameState.battleState.isWaveActive)return;// Update battle time\nsetGameState(prev=>({...prev,battleState:{...prev.battleState,battleTime:prev.battleState.battleTime+1}}));// Update enemies\nupdateEnemies();// Update towers\nupdateTowers();// Check win/lose conditions\ncheckBattleEnd();},[gameState.currentScene,gameState.battleState.isWaveActive]);const updateEnemies=()=>{if(!gameState.selectedStage)return;const stage=stageDefinitions.find(s=>s.id===gameState.selectedStage);if(!stage)return;setGameState(prev=>({...prev,battleState:{...prev.battleState,enemies:prev.battleState.enemies.map(enemy=>{if(!enemy.alive)return enemy;const currentTarget=stage.path[enemy.pathIndex+1];if(currentTarget){const dx=currentTarget.x-enemy.x;const dy=currentTarget.y-enemy.y;const distance=Math.sqrt(dx*dx+dy*dy);if(distance<5){enemy.pathIndex++;if(enemy.pathIndex>=stage.path.length-1){// Enemy reached end\nsetGameState(prev2=>({...prev2,battleState:{...prev2.battleState,lives:prev2.battleState.lives-1}}));onAction('life_lost',{player_id:playerData.id,stage_id:gameState.selectedStage,enemy_type:enemy.type,remaining_lives:gameState.battleState.lives-1,wave_number:gameState.battleState.wave});return{...enemy,alive:false};}}else{const moveX=dx/distance*enemy.speed;const moveY=dy/distance*enemy.speed;enemy.x+=moveX;enemy.y+=moveY;}}return enemy;}).filter(enemy=>enemy.alive||enemy.pathIndex<stage.path.length-1)}}));};const updateTowers=()=>{gameState.battleState.towers.forEach(tower=>{if(frameCount-tower.lastAttack<tower.attackSpeed)return;const enemiesInRange=gameState.battleState.enemies.filter(enemy=>{if(!enemy.alive)return false;const distance=Math.sqrt((enemy.x-tower.x)**2+(enemy.y-tower.y)**2);return distance<=tower.range;});if(enemiesInRange.length>0){const target=enemiesInRange.reduce((best,current)=>current.pathIndex>best.pathIndex?current:best);const actualDamage=Math.max(1,tower.damage-target.armor);setGameState(prev=>({...prev,battleState:{...prev.battleState,enemies:prev.battleState.enemies.map(enemy=>{if(enemy.id===target.id){const newHealth=Math.max(0,enemy.health-actualDamage);const killed=newHealth<=0;if(killed){var _enemy$reward$find,_enemy$reward$find2;// Apply rewards\nconst goldGain=((_enemy$reward$find=enemy.reward.find(r=>r.type==='gold'))===null||_enemy$reward$find===void 0?void 0:_enemy$reward$find.amount)||0;const expGain=((_enemy$reward$find2=enemy.reward.find(r=>r.type==='exp'))===null||_enemy$reward$find2===void 0?void 0:_enemy$reward$find2.amount)||0;setPlayerData(prev2=>({...prev2,gold:prev2.gold+goldGain,experience:prev2.experience+expGain}));setGameState(prev2=>({...prev2,battleState:{...prev2.battleState,score:prev2.battleState.score+goldGain*10,towers:prev2.battleState.towers.map(t=>t.id===tower.id?{...t,kills:t.kills+1}:t)}}));if(enemy.type==='demon'){onAction('boss_defeated',{player_id:playerData.id,stage_id:gameState.selectedStage,boss_type:enemy.type,tower_type:tower.type,gold_gained:goldGain,exp_gained:expGain});}return{...enemy,health:0,alive:false};}return{...enemy,health:newHealth};}return enemy;})}}));tower.lastAttack=frameCount;}});};const checkBattleEnd=()=>{if(gameState.battleState.lives<=0){completeStage(false);return;}const aliveEnemies=gameState.battleState.enemies.filter(e=>e.alive);if(aliveEnemies.length===0&&gameState.battleState.waveProgress>100){if(gameState.battleState.wave>=3){completeStage(true);}else{// Next wave\nsetGameState(prev=>({...prev,battleState:{...prev.battleState,wave:prev.battleState.wave+1,isWaveActive:false,waveProgress:0}}));}}};// Drawing functions\nconst drawLobby=(ctx,canvas)=>{// Background\nctx.fillStyle='#1a1a2e';ctx.fillRect(0,0,canvas.width,canvas.height);// Title\nctx.fillStyle='#FFD700';ctx.font='bold 32px Arial';ctx.textAlign='center';ctx.fillText('🏰 TOWER DEFENSE',canvas.width/2,80);// Player info panel\nctx.fillStyle='rgba(255, 255, 255, 0.1)';ctx.fillRect(50,100,500,80);ctx.fillStyle='#FFFFFF';ctx.font='16px Arial';ctx.textAlign='left';ctx.fillText(`${playerData.name} - Level ${playerData.level}`,70,125);ctx.fillText(`Gold: ${playerData.gold} | Gems: ${playerData.gems}`,70,145);ctx.fillText(`Energy: ${playerData.energy}/${playerData.maxEnergy}`,70,165);// Experience bar\nconst expNeeded=playerData.level*100;const expPercent=playerData.experience/expNeeded;ctx.fillStyle='#444';ctx.fillRect(350,140,180,12);ctx.fillStyle='#FFD700';ctx.fillRect(350,140,180*expPercent,12);ctx.fillStyle='#FFFFFF';ctx.font='12px Arial';ctx.fillText(`EXP: ${playerData.experience}/${expNeeded}`,355,150);// Menu buttons\nconst buttons=[{text:'⚔️ DUNGEON',x:250,y:200,w:100,h:50},{text:'🛒 SHOP',x:100,y:300,w:100,h:50},{text:'🎒 INVENTORY',x:400,y:300,w:100,h:50}];buttons.forEach(button=>{ctx.fillStyle='rgba(74, 144, 226, 0.8)';ctx.fillRect(button.x,button.y,button.w,button.h);ctx.strokeStyle='#FFFFFF';ctx.lineWidth=2;ctx.strokeRect(button.x,button.y,button.w,button.h);ctx.fillStyle='#FFFFFF';ctx.font='bold 14px Arial';ctx.textAlign='center';ctx.fillText(button.text,button.x+button.w/2,button.y+button.h/2+5);});};const drawDungeon=(ctx,canvas)=>{// Background\nctx.fillStyle='#0f1419';ctx.fillRect(0,0,canvas.width,canvas.height);// Title\nctx.fillStyle='#FFD700';ctx.font='bold 24px Arial';ctx.textAlign='center';ctx.fillText('🗡️ DUNGEON SELECT',canvas.width/2,40);// Stage cards\nstageDefinitions.forEach((stage,index)=>{const x=50+index%3*200;const y=70+Math.floor(index/3)*120;const isUnlocked=stage.id<=playerData.unlockedStages;const hasEnergy=playerData.energy>=stage.energyCost;const canEnter=isUnlocked&&hasEnergy;// Stage card background\nctx.fillStyle=canEnter?'rgba(74, 144, 226, 0.8)':'rgba(100, 100, 100, 0.5)';ctx.fillRect(x,y,150,100);ctx.strokeStyle=canEnter?'#4a90e2':'#666';ctx.lineWidth=2;ctx.strokeRect(x,y,150,100);// Stage info\nctx.fillStyle=canEnter?'#FFFFFF':'#999';ctx.font='bold 14px Arial';ctx.textAlign='center';ctx.fillText(`Stage ${stage.id}`,x+75,y+20);ctx.font='12px Arial';ctx.fillText(stage.name,x+75,y+35);ctx.fillText(stage.difficulty,x+75,y+50);ctx.fillText(`Energy: ${stage.energyCost}`,x+75,y+65);ctx.fillText(`Lv.${stage.recommendedLevel} Rec.`,x+75,y+80);// Lock indicator\nif(!isUnlocked){ctx.fillStyle='#FF0000';ctx.font='bold 20px Arial';ctx.fillText('🔒',x+75,y+55);}// Completion stars\nconst completed=playerData.completedStages.find(c=>c.stageId===stage.id);if(completed){for(let i=0;i<completed.starsEarned;i++){ctx.fillStyle='#FFD700';ctx.font='16px Arial';ctx.fillText('⭐',x+20+i*20,y+95);}}});// Back button\nctx.fillStyle='rgba(255, 100, 100, 0.8)';ctx.fillRect(50,350,100,30);ctx.fillStyle='#FFFFFF';ctx.font='14px Arial';ctx.textAlign='center';ctx.fillText('← BACK',100,370);};const drawBattle=(ctx,canvas)=>{if(!gameState.selectedStage)return;const stage=stageDefinitions.find(s=>s.id===gameState.selectedStage);if(!stage)return;// Background\nctx.fillStyle=stage.background;ctx.fillRect(0,0,canvas.width,320);// Draw path\nctx.strokeStyle='#8B4513';ctx.lineWidth=20;ctx.lineCap='round';ctx.lineJoin='round';ctx.beginPath();ctx.moveTo(stage.path[0].x,stage.path[0].y);stage.path.slice(1).forEach(point=>{ctx.lineTo(point.x,point.y);});ctx.stroke();ctx.strokeStyle='#DEB887';ctx.lineWidth=12;ctx.beginPath();ctx.moveTo(stage.path[0].x,stage.path[0].y);stage.path.slice(1).forEach(point=>{ctx.lineTo(point.x,point.y);});ctx.stroke();// Draw towers\ngameState.battleState.towers.forEach(tower=>{var _gameState$selectedTo;const config=towerTypes[tower.type];const isSelected=((_gameState$selectedTo=gameState.selectedTower)===null||_gameState$selectedTo===void 0?void 0:_gameState$selectedTo.id)===tower.id;// Tower base\nctx.fillStyle=isSelected?'#FFD700':'#696969';ctx.beginPath();ctx.arc(tower.x,tower.y,18,0,2*Math.PI);ctx.fill();// Tower body\nctx.fillStyle=config.color;ctx.beginPath();ctx.arc(tower.x,tower.y,14,0,2*Math.PI);ctx.fill();// Tower icon\nctx.fillStyle='#FFFFFF';ctx.font='12px Arial';ctx.textAlign='center';ctx.fillText(config.icon,tower.x,tower.y+4);// Level indicator\nctx.fillStyle='#FFD700';ctx.font='10px Arial';ctx.fillText(`Lv.${tower.level}`,tower.x,tower.y-25);// Range for selected tower\nif(isSelected){ctx.strokeStyle='rgba(255, 255, 255, 0.3)';ctx.lineWidth=2;ctx.setLineDash([5,5]);ctx.beginPath();ctx.arc(tower.x,tower.y,tower.range,0,2*Math.PI);ctx.stroke();ctx.setLineDash([]);}});// Draw enemies\ngameState.battleState.enemies.forEach(enemy=>{if(!enemy.alive)return;const config=enemyTypes[enemy.type];// Enemy body\nctx.fillStyle=config.color;ctx.beginPath();ctx.arc(enemy.x,enemy.y,12,0,2*Math.PI);ctx.fill();// Enemy icon\nctx.fillStyle='#FFFFFF';ctx.font='12px Arial';ctx.textAlign='center';ctx.fillText(config.icon,enemy.x,enemy.y+4);// Health bar\nconst barWidth=20;const barHeight=4;const healthPercent=enemy.health/enemy.maxHealth;ctx.fillStyle='#FF0000';ctx.fillRect(enemy.x-barWidth/2,enemy.y-18,barWidth,barHeight);ctx.fillStyle='#00FF00';ctx.fillRect(enemy.x-barWidth/2,enemy.y-18,barWidth*healthPercent,barHeight);});// UI Panel\nctx.fillStyle='rgba(0, 0, 0, 0.9)';ctx.fillRect(0,320,canvas.width,80);// Battle stats\nctx.fillStyle='#FFFFFF';ctx.font='14px Arial';ctx.textAlign='left';ctx.fillText(`Stage ${gameState.selectedStage}: ${stage.name}`,10,340);ctx.fillText(`Wave: ${gameState.battleState.wave}/3`,10,355);ctx.fillText(`Lives: ${gameState.battleState.lives}`,10,370);ctx.fillText(`Score: ${gameState.battleState.score}`,10,385);ctx.fillText(`Gold: ${playerData.gold}`,150,340);ctx.fillText(`Towers: ${gameState.battleState.towers.length}`,150,355);// Tower selection buttons\nObject.entries(towerTypes).forEach((_ref2,index)=>{let[type,config]=_ref2;const x=300+index*60;const y=340;const isSelected=gameState.selectedTowerType===type;const canAfford=playerData.gold>=config.cost;ctx.fillStyle=isSelected?'rgba(255, 255, 0, 0.5)':canAfford?'rgba(255, 255, 255, 0.2)':'rgba(255, 0, 0, 0.2)';ctx.fillRect(x,y,50,50);ctx.fillStyle=config.color;ctx.beginPath();ctx.arc(x+25,y+20,12,0,2*Math.PI);ctx.fill();ctx.fillStyle=canAfford?'#FFFFFF':'#FF6666';ctx.font='10px Arial';ctx.textAlign='center';ctx.fillText(`${index+1}: $${config.cost}`,x+25,y+45);});// Wave control\nif(!gameState.battleState.isWaveActive){ctx.fillStyle='rgba(0, 255, 0, 0.8)';ctx.fillRect(450,350,100,30);ctx.fillStyle='#FFFFFF';ctx.font='bold 14px Arial';ctx.textAlign='center';ctx.fillText('START WAVE',500,370);}// Pause button\nctx.fillStyle='rgba(255, 200, 0, 0.8)';ctx.fillRect(560,350,30,30);ctx.fillStyle='#000';ctx.font='16px Arial';ctx.fillText('⏸',575,370);};const drawResults=(ctx,canvas)=>{if(!gameState.stageResults)return;const results=gameState.stageResults;// Overlay\nctx.fillStyle='rgba(0, 0, 0, 0.9)';ctx.fillRect(0,0,canvas.width,canvas.height);// Results panel\nctx.fillStyle='rgba(50, 50, 50, 0.95)';ctx.fillRect(100,50,400,300);ctx.strokeStyle='#FFD700';ctx.lineWidth=3;ctx.strokeRect(100,50,400,300);// Title\nctx.fillStyle=results.victory?'#00FF00':'#FF0000';ctx.font='bold 24px Arial';ctx.textAlign='center';ctx.fillText(results.victory?'🎉 VICTORY!':'💀 DEFEAT!',300,90);// Results\nctx.fillStyle='#FFFFFF';ctx.font='16px Arial';ctx.textAlign='left';let yPos=120;ctx.fillText(`Score: ${results.score}`,120,yPos);yPos+=25;if(results.victory){ctx.fillText(`Stars: ${'⭐'.repeat(results.starsEarned)}`,120,yPos);yPos+=25;ctx.fillText('Rewards:',120,yPos);yPos+=20;results.rewards.forEach(reward=>{const icon={gold:'💰',exp:'⭐',gem:'💎'}[reward.type]||'🎁';ctx.fillText(`${icon} +${reward.amount}`,140,yPos);yPos+=20;});if(results.newUnlocks.length>0){yPos+=10;ctx.fillStyle='#FFD700';results.newUnlocks.forEach(unlock=>{ctx.fillText(`🔓 ${unlock}`,120,yPos);yPos+=20;});}}// Continue button\nctx.fillStyle='rgba(74, 144, 226, 0.8)';ctx.fillRect(200,300,200,50);ctx.fillStyle='#FFFFFF';ctx.font='bold 16px Arial';ctx.textAlign='center';ctx.fillText('CONTINUE',300,330);};const draw=useCallback(()=>{const canvas=canvasRef.current;if(!canvas)return;const ctx=canvas.getContext('2d');if(!ctx)return;// Clear canvas\nctx.clearRect(0,0,canvas.width,canvas.height);switch(gameState.currentScene){case'lobby':drawLobby(ctx,canvas);break;case'dungeon':drawDungeon(ctx,canvas);break;case'battle':drawBattle(ctx,canvas);break;case'stageComplete':case'stageFailed':drawBattle(ctx,canvas);drawResults(ctx,canvas);break;case'shop':drawLobby(ctx,canvas);// Add shop overlay\nctx.fillStyle='rgba(0, 0, 0, 0.8)';ctx.fillRect(0,0,canvas.width,canvas.height);ctx.fillStyle='#FFD700';ctx.font='bold 24px Arial';ctx.textAlign='center';ctx.fillText('🛒 SHOP (Coming Soon)',canvas.width/2,canvas.height/2);break;case'inventory':drawLobby(ctx,canvas);// Add inventory overlay\nctx.fillStyle='rgba(0, 0, 0, 0.8)';ctx.fillRect(0,0,canvas.width,canvas.height);ctx.fillStyle='#FFD700';ctx.font='bold 24px Arial';ctx.textAlign='center';ctx.fillText('🎒 INVENTORY (Coming Soon)',canvas.width/2,canvas.height/2);break;}},[gameState,playerData]);// Game loop\nuseEffect(()=>{const gameLoop=()=>{updateBattle();draw();setFrameCount(prev=>prev+1);gameLoopRef.current=requestAnimationFrame(gameLoop);};gameLoopRef.current=requestAnimationFrame(gameLoop);return()=>{if(gameLoopRef.current){cancelAnimationFrame(gameLoopRef.current);}};},[updateBattle,draw]);// Event listeners\nuseEffect(()=>{document.addEventListener('keydown',handleKeyDown);return()=>{document.removeEventListener('keydown',handleKeyDown);};},[handleKeyDown]);return/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'column',alignItems:'center',background:'#0a0a0a',borderRadius:'12px',padding:'16px',border:'2px solid #2d3748',maxHeight:'500px',overflowY:'auto',overflowX:'auto'},children:[/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:600,height:400,style:{border:'2px solid #4a5568',borderRadius:'8px',cursor:gameState.selectedTowerType?'crosshair':'pointer',maxWidth:'100%',height:'auto'},onClick:handleCanvasClick,tabIndex:0}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'12px',color:'#ffffff',fontSize:'14px',textAlign:'center',maxWidth:'600px'},children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"\\uD83C\\uDFF0 \",/*#__PURE__*/_jsx(\"strong\",{children:\"Complete Tower Defense RPG\"})]}),/*#__PURE__*/_jsxs(\"p\",{children:[gameState.currentScene==='lobby'&&'로비에서 던전을 선택하세요!',gameState.currentScene==='dungeon'&&'스테이지를 선택하세요!',gameState.currentScene==='battle'&&`Stage ${gameState.selectedStage} - Space로 웨이브 시작!`,(gameState.currentScene==='stageComplete'||gameState.currentScene==='stageFailed')&&'결과를 확인하고 계속하세요!']}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Level \",playerData.level,\" | Gold: \",playerData.gold,\" | Energy: \",playerData.energy,\"/\",playerData.maxEnergy]})]})]});};","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","jsx","_jsx","jsxs","_jsxs","CompleteGameSystem","_ref","onAction","playerStats","setPlayerStats","currentUser","canvasRef","gameLoopRef","frameCount","setFrameCount","playerData","setPlayerData","id","user_id","name","level","experience","gold","gems","energy","maxEnergy","unlockedStages","inventory","type","rarity","quantity","stats","attack","heal","completedStages","achievements","totalPlayTime","lastLogin","Date","toISOString","gameState","setGameState","currentScene","selectedStage","battleState","wave","lives","score","isWaveActive","towers","enemies","waveProgress","battleTime","stageResults","cameraX","cameraY","selectedTower","selectedTowerType","stageDefinitions","difficulty","energyCost","recommendedLevel","rewards","amount","isUnlocked","path","x","y","spawnDelay","background","towerTypes","cost","damage","range","speed","color","icon","enemyTypes","health","reward","armor","player_id","player_level","total_gold","unlocked_stages","login_streak","energyRegen","setInterval","prev","Math","min","clearInterval","expNeeded","newLevel","old_level","new_level","new_max_energy","total_playtime","handleKeyDown","e","includes","key","preventDefault","stopPropagation","toLowerCase","pauseBattle","startWave","towerIndex","parseInt","towerTypeKeys","Object","keys","length","handleCanvasClick","canvas","current","rect","getBoundingClientRect","clientX","left","clientY","top","handleLobbyClick","handleDungeonClick","handleBattleClick","handleResultsClick","from_scene","to_scene","forEach","stage","index","stageX","stageY","floor","enterStage","stageId","find","s","stage_id","stage_name","energy_cost","remaining_energy","recommended_level","canPlaceTower","placeTower","clickedTower","tower","distance","sqrt","point","towerConfig","newTower","now","random","toString","substr","attackSpeed","lastAttack","kills","tower_type","tower_cost","position_x","position_y","remaining_gold","wave_number","towers_count","current_gold","spawnEnemyWave","enemyCount","enemyTypeKeys","i","setTimeout","enemyType","enemyConfig","newEnemy","maxHealth","pathIndex","alive","battle_time","current_score","completeStage","victory","_rewards$find","_rewards$find2","starsEarned","calculateStars","goldGained","expGained","gemsGained","max","completion","bestScore","completionTime","completedAt","existingIndex","findIndex","c","newCompletedStages","push","results","timeBonus","newUnlocks","final_score","stars_earned","towers_built","waves_completed","gold_gained","r","exp_gained","new_unlocks","baseScore","livesBonus","totalScore","updateBattle","updateEnemies","updateTowers","checkBattleEnd","map","enemy","currentTarget","dx","dy","prev2","enemy_type","remaining_lives","moveX","moveY","filter","enemiesInRange","target","reduce","best","actualDamage","newHealth","killed","_enemy$reward$find","_enemy$reward$find2","goldGain","expGain","t","boss_type","aliveEnemies","drawLobby","ctx","fillStyle","fillRect","width","height","font","textAlign","fillText","expPercent","buttons","text","w","h","button","strokeStyle","lineWidth","strokeRect","drawDungeon","hasEnergy","canEnter","completed","drawBattle","lineCap","lineJoin","beginPath","moveTo","slice","lineTo","stroke","_gameState$selectedTo","config","isSelected","arc","PI","fill","setLineDash","barWidth","barHeight","healthPercent","entries","_ref2","canAfford","drawResults","yPos","repeat","exp","gem","unlock","draw","getContext","clearRect","gameLoop","requestAnimationFrame","cancelAnimationFrame","document","addEventListener","removeEventListener","style","display","flexDirection","alignItems","borderRadius","padding","border","maxHeight","overflowY","overflowX","children","ref","cursor","maxWidth","onClick","tabIndex","marginTop","fontSize"],"sources":["/Users/jegaljin-u/workspace/thinking-guide/src/components/CompleteGameSystem.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\n\ninterface GameProps {\n  onAction: (eventType: string, data: any) => void;\n  isSimulating: boolean;\n  currentAction: string | null;\n  playerStats: any;\n  setPlayerStats: (stats: any) => void;\n  currentUser: any;\n}\n\ninterface PlayerData {\n  id: string;\n  name: string;\n  level: number;\n  experience: number;\n  gold: number;\n  gems: number;\n  energy: number;\n  maxEnergy: number;\n  unlockedStages: number;\n  inventory: InventoryItem[];\n  completedStages: CompletedStage[];\n  achievements: string[];\n  totalPlayTime: number;\n  lastLogin: string;\n}\n\ninterface InventoryItem {\n  id: string;\n  name: string;\n  type: 'weapon' | 'armor' | 'consumable' | 'material';\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  quantity: number;\n  stats: any;\n}\n\ninterface CompletedStage {\n  stageId: number;\n  bestScore: number;\n  completionTime: number;\n  starsEarned: number;\n  completedAt: string;\n}\n\ninterface StageData {\n  id: number;\n  name: string;\n  difficulty: 'Easy' | 'Normal' | 'Hard' | 'Expert' | 'Hell';\n  energyCost: number;\n  recommendedLevel: number;\n  rewards: StageReward[];\n  isUnlocked: boolean;\n  path: { x: number; y: number }[];\n  enemies: EnemyWave[];\n  background: string;\n}\n\ninterface StageReward {\n  type: 'gold' | 'exp' | 'item' | 'gem';\n  amount: number;\n  item?: InventoryItem;\n}\n\ninterface EnemyWave {\n  enemies: Enemy[];\n  spawnDelay: number;\n}\n\ninterface Enemy {\n  id: string;\n  x: number;\n  y: number;\n  health: number;\n  maxHealth: number;\n  speed: number;\n  type: string;\n  pathIndex: number;\n  alive: boolean;\n  armor: number;\n  reward: StageReward[];\n}\n\ninterface Tower {\n  id: string;\n  x: number;\n  y: number;\n  type: string;\n  level: number;\n  damage: number;\n  range: number;\n  attackSpeed: number;\n  lastAttack: number;\n  cost: number;\n  kills: number;\n}\n\ninterface GameState {\n  currentScene: 'lobby' | 'dungeon' | 'stage' | 'shop' | 'inventory' | 'battle' | 'stageComplete' | 'stageFailed';\n  selectedStage: number | null;\n  battleState: BattleState;\n  stageResults: StageResults | null;\n  cameraX: number;\n  cameraY: number;\n  selectedTower: Tower | null;\n  selectedTowerType: string | null;\n}\n\ninterface BattleState {\n  wave: number;\n  lives: number;\n  score: number;\n  isWaveActive: boolean;\n  towers: Tower[];\n  enemies: Enemy[];\n  waveProgress: number;\n  battleTime: number;\n}\n\ninterface StageResults {\n  victory: boolean;\n  score: number;\n  starsEarned: number;\n  timeBonus: number;\n  rewards: StageReward[];\n  newUnlocks: string[];\n}\n\nexport const CompleteGameSystem: React.FC<GameProps> = ({\n  onAction,\n  playerStats,\n  setPlayerStats,\n  currentUser\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const gameLoopRef = useRef<number>();\n  const [frameCount, setFrameCount] = useState(0);\n\n  // Player persistent data\n  const [playerData, setPlayerData] = useState<PlayerData>({\n    id: currentUser.user_id,\n    name: \"Hero\",\n    level: 1,\n    experience: 0,\n    gold: 1000,\n    gems: 50,\n    energy: 100,\n    maxEnergy: 100,\n    unlockedStages: 1,\n    inventory: [\n      { id: 'sword1', name: 'Iron Sword', type: 'weapon', rarity: 'common', quantity: 1, stats: { attack: 10 } },\n      { id: 'potion1', name: 'Health Potion', type: 'consumable', rarity: 'common', quantity: 5, stats: { heal: 50 } }\n    ],\n    completedStages: [],\n    achievements: [],\n    totalPlayTime: 0,\n    lastLogin: new Date().toISOString()\n  });\n\n  // Game state\n  const [gameState, setGameState] = useState<GameState>({\n    currentScene: 'lobby',\n    selectedStage: null,\n    battleState: {\n      wave: 1,\n      lives: 20,\n      score: 0,\n      isWaveActive: false,\n      towers: [],\n      enemies: [],\n      waveProgress: 0,\n      battleTime: 0\n    },\n    stageResults: null,\n    cameraX: 0,\n    cameraY: 0,\n    selectedTower: null,\n    selectedTowerType: null\n  });\n\n  // Stage definitions\n  const stageDefinitions: StageData[] = [\n    {\n      id: 1,\n      name: \"Green Fields\",\n      difficulty: 'Easy',\n      energyCost: 10,\n      recommendedLevel: 1,\n      rewards: [\n        { type: 'gold', amount: 100 },\n        { type: 'exp', amount: 50 }\n      ],\n      isUnlocked: true,\n      path: [\n        { x: 0, y: 200 }, { x: 150, y: 200 }, { x: 150, y: 100 },\n        { x: 300, y: 100 }, { x: 300, y: 300 }, { x: 600, y: 300 }\n      ],\n      enemies: [\n        { enemies: [], spawnDelay: 60 }\n      ],\n      background: '#2d5016'\n    },\n    {\n      id: 2,\n      name: \"Dark Forest\",\n      difficulty: 'Normal',\n      energyCost: 15,\n      recommendedLevel: 3,\n      rewards: [\n        { type: 'gold', amount: 200 },\n        { type: 'exp', amount: 80 },\n        { type: 'gem', amount: 5 }\n      ],\n      isUnlocked: false,\n      path: [\n        { x: 0, y: 150 }, { x: 100, y: 150 }, { x: 100, y: 50 },\n        { x: 250, y: 50 }, { x: 250, y: 250 }, { x: 400, y: 250 },\n        { x: 400, y: 100 }, { x: 600, y: 100 }\n      ],\n      enemies: [\n        { enemies: [], spawnDelay: 50 }\n      ],\n      background: '#1a3d1a'\n    },\n    {\n      id: 3,\n      name: \"Ancient Ruins\",\n      difficulty: 'Hard',\n      energyCost: 20,\n      recommendedLevel: 5,\n      rewards: [\n        { type: 'gold', amount: 350 },\n        { type: 'exp', amount: 120 },\n        { type: 'gem', amount: 10 }\n      ],\n      isUnlocked: false,\n      path: [\n        { x: 0, y: 200 }, { x: 80, y: 200 }, { x: 80, y: 80 },\n        { x: 200, y: 80 }, { x: 200, y: 320 }, { x: 320, y: 320 },\n        { x: 320, y: 120 }, { x: 500, y: 120 }, { x: 500, y: 280 },\n        { x: 600, y: 280 }\n      ],\n      enemies: [\n        { enemies: [], spawnDelay: 40 }\n      ],\n      background: '#4a4a2a'\n    },\n    {\n      id: 4,\n      name: \"Dragon's Lair\",\n      difficulty: 'Expert',\n      energyCost: 25,\n      recommendedLevel: 8,\n      rewards: [\n        { type: 'gold', amount: 500 },\n        { type: 'exp', amount: 200 },\n        { type: 'gem', amount: 20 }\n      ],\n      isUnlocked: false,\n      path: [\n        { x: 0, y: 200 }, { x: 150, y: 200 }, { x: 150, y: 100 },\n        { x: 450, y: 100 }, { x: 450, y: 300 }, { x: 600, y: 300 }\n      ],\n      enemies: [\n        { enemies: [], spawnDelay: 35 }\n      ],\n      background: '#5d1a1a'\n    },\n    {\n      id: 5,\n      name: \"Demon Realm\",\n      difficulty: 'Hell',\n      energyCost: 30,\n      recommendedLevel: 12,\n      rewards: [\n        { type: 'gold', amount: 1000 },\n        { type: 'exp', amount: 400 },\n        { type: 'gem', amount: 50 }\n      ],\n      isUnlocked: false,\n      path: [\n        { x: 0, y: 200 }, { x: 100, y: 200 }, { x: 200, y: 200 },\n        { x: 300, y: 200 }, { x: 400, y: 200 }, { x: 500, y: 200 },\n        { x: 600, y: 200 }\n      ],\n      enemies: [\n        { enemies: [], spawnDelay: 30 }\n      ],\n      background: '#2d0d0d'\n    }\n  ];\n\n  // Tower types\n  const towerTypes = {\n    'archer': { cost: 80, damage: 25, range: 120, speed: 30, color: '#8B4513', icon: '🏹' },\n    'cannon': { cost: 150, damage: 60, range: 100, speed: 60, color: '#696969', icon: '💣' },\n    'magic': { cost: 220, damage: 40, range: 140, speed: 40, color: '#9400D3', icon: '✨' },\n    'ice': { cost: 180, damage: 20, range: 110, speed: 35, color: '#00BFFF', icon: '❄️' },\n    'lightning': { cost: 300, damage: 80, range: 150, speed: 50, color: '#FFD700', icon: '⚡' }\n  };\n\n  // Enemy types\n  const enemyTypes = {\n    'goblin': { health: 80, speed: 2, reward: 15, color: '#228B22', icon: '👹', armor: 0 },\n    'orc': { health: 150, speed: 1.5, reward: 25, color: '#8B4513', icon: '🗡️', armor: 2 },\n    'troll': { health: 300, speed: 1, reward: 40, color: '#2F4F4F', icon: '🏔️', armor: 5 },\n    'dragon': { health: 500, speed: 0.8, reward: 80, color: '#DC143C', icon: '🐉', armor: 8 },\n    'demon': { health: 800, speed: 0.6, reward: 150, color: '#8B0000', icon: '😈', armor: 12 }\n  };\n\n  // Initialize session\n  useEffect(() => {\n    onAction('session_started', {\n      player_id: playerData.id,\n      player_level: playerData.level,\n      total_gold: playerData.gold,\n      unlocked_stages: playerData.unlockedStages,\n      login_streak: 1\n    });\n  }, []);\n\n  // Energy regeneration\n  useEffect(() => {\n    const energyRegen = setInterval(() => {\n      setPlayerData(prev => ({\n        ...prev,\n        energy: Math.min(prev.maxEnergy, prev.energy + 1)\n      }));\n    }, 60000); // 1 energy per minute\n\n    return () => clearInterval(energyRegen);\n  }, []);\n\n  // Level up check\n  useEffect(() => {\n    const expNeeded = playerData.level * 100;\n    if (playerData.experience >= expNeeded) {\n      const newLevel = playerData.level + 1;\n      setPlayerData(prev => ({\n        ...prev,\n        level: newLevel,\n        experience: prev.experience - expNeeded,\n        maxEnergy: prev.maxEnergy + 10\n      }));\n\n      onAction('player_level_up', {\n        player_id: playerData.id,\n        old_level: playerData.level,\n        new_level: newLevel,\n        new_max_energy: playerData.maxEnergy + 10,\n        total_playtime: playerData.totalPlayTime\n      });\n    }\n  }, [playerData.experience, playerData.level, playerData.maxEnergy, playerData.totalPlayTime, playerData.id, onAction]);\n\n  // Keyboard handling\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    // Prevent page scrolling\n    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'w', 'a', 's', 'd', ' ', 'Enter', 'Escape'].includes(e.key)) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    switch (e.key.toLowerCase()) {\n      case 'escape':\n        if (gameState.currentScene === 'battle') {\n          pauseBattle();\n        } else if (gameState.currentScene !== 'lobby') {\n          setGameState(prev => ({ ...prev, currentScene: 'lobby' }));\n        }\n        break;\n      case ' ':\n        if (gameState.currentScene === 'battle') {\n          startWave();\n        }\n        break;\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n        if (gameState.currentScene === 'battle') {\n          const towerIndex = parseInt(e.key) - 1;\n          const towerTypeKeys = Object.keys(towerTypes);\n          if (towerIndex < towerTypeKeys.length) {\n            setGameState(prev => ({\n              ...prev,\n              selectedTowerType: towerTypeKeys[towerIndex],\n              selectedTower: null\n            }));\n          }\n        }\n        break;\n    }\n  }, [gameState.currentScene]);\n\n  // Mouse/Click handling\n  const handleCanvasClick = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    switch (gameState.currentScene) {\n      case 'lobby':\n        handleLobbyClick(x, y);\n        break;\n      case 'dungeon':\n        handleDungeonClick(x, y);\n        break;\n      case 'battle':\n        handleBattleClick(x, y);\n        break;\n      case 'stageComplete':\n      case 'stageFailed':\n        handleResultsClick(x, y);\n        break;\n    }\n  }, [gameState.currentScene]);\n\n  const handleLobbyClick = (x: number, y: number) => {\n    // Dungeon button\n    if (x >= 250 && x <= 350 && y >= 200 && y <= 250) {\n      setGameState(prev => ({ ...prev, currentScene: 'dungeon' }));\n      \n      onAction('menu_navigation', {\n        player_id: playerData.id,\n        from_scene: 'lobby',\n        to_scene: 'dungeon',\n        player_level: playerData.level\n      });\n    }\n    \n    // Shop button\n    if (x >= 100 && x <= 200 && y >= 300 && y <= 350) {\n      setGameState(prev => ({ ...prev, currentScene: 'shop' }));\n      \n      onAction('menu_navigation', {\n        player_id: playerData.id,\n        from_scene: 'lobby',\n        to_scene: 'shop',\n        player_level: playerData.level\n      });\n    }\n\n    // Inventory button\n    if (x >= 400 && x <= 500 && y >= 300 && y <= 350) {\n      setGameState(prev => ({ ...prev, currentScene: 'inventory' }));\n      \n      onAction('menu_navigation', {\n        player_id: playerData.id,\n        from_scene: 'lobby',\n        to_scene: 'inventory',\n        player_level: playerData.level\n      });\n    }\n  };\n\n  const handleDungeonClick = (x: number, y: number) => {\n    // Stage selection\n    stageDefinitions.forEach((stage, index) => {\n      const stageX = 50 + (index % 3) * 200;\n      const stageY = 100 + Math.floor(index / 3) * 150;\n      \n      if (x >= stageX && x <= stageX + 150 && y >= stageY && y <= stageY + 100) {\n        if (stage.id <= playerData.unlockedStages && playerData.energy >= stage.energyCost) {\n          enterStage(stage.id);\n        }\n      }\n    });\n\n    // Back button\n    if (x >= 50 && x <= 150 && y >= 350 && y <= 380) {\n      setGameState(prev => ({ ...prev, currentScene: 'lobby' }));\n    }\n  };\n\n  const enterStage = (stageId: number) => {\n    const stage = stageDefinitions.find(s => s.id === stageId);\n    if (!stage) return;\n\n    // Consume energy\n    setPlayerData(prev => ({ ...prev, energy: prev.energy - stage.energyCost }));\n\n    // Initialize battle\n    setGameState(prev => ({\n      ...prev,\n      currentScene: 'battle',\n      selectedStage: stageId,\n      battleState: {\n        wave: 1,\n        lives: 20,\n        score: 0,\n        isWaveActive: false,\n        towers: [],\n        enemies: [],\n        waveProgress: 0,\n        battleTime: 0\n      }\n    }));\n\n    onAction('stage_entered', {\n      player_id: playerData.id,\n      stage_id: stageId,\n      stage_name: stage.name,\n      energy_cost: stage.energyCost,\n      remaining_energy: playerData.energy - stage.energyCost,\n      player_level: playerData.level,\n      recommended_level: stage.recommendedLevel\n    });\n  };\n\n  const handleBattleClick = (x: number, y: number) => {\n    // UI area (bottom 80px)\n    if (y > 320) return;\n\n    if (gameState.selectedTowerType) {\n      // Place tower\n      if (canPlaceTower(x, y)) {\n        placeTower(x, y, gameState.selectedTowerType);\n      }\n    } else {\n      // Select existing tower\n      const clickedTower = gameState.battleState.towers.find(tower => {\n        const distance = Math.sqrt((x - tower.x) ** 2 + (y - tower.y) ** 2);\n        return distance < 25;\n      });\n\n      if (clickedTower) {\n        setGameState(prev => ({\n          ...prev,\n          selectedTower: clickedTower,\n          selectedTowerType: null\n        }));\n      }\n    }\n  };\n\n  const canPlaceTower = (x: number, y: number): boolean => {\n    if (!gameState.selectedStage) return false;\n    \n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return false;\n\n    // Check distance from path\n    for (const point of stage.path) {\n      const distance = Math.sqrt((x - point.x) ** 2 + (y - point.y) ** 2);\n      if (distance < 40) return false;\n    }\n\n    // Check distance from other towers\n    for (const tower of gameState.battleState.towers) {\n      const distance = Math.sqrt((x - tower.x) ** 2 + (y - tower.y) ** 2);\n      if (distance < 50) return false;\n    }\n\n    return x > 25 && x < 575 && y > 25 && y < 295;\n  };\n\n  const placeTower = (x: number, y: number, type: string) => {\n    const towerConfig = towerTypes[type as keyof typeof towerTypes];\n    if (playerData.gold < towerConfig.cost) return;\n\n    const newTower: Tower = {\n      id: `tower_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      x, y, type,\n      level: 1,\n      damage: towerConfig.damage,\n      range: towerConfig.range,\n      attackSpeed: towerConfig.speed,\n      lastAttack: 0,\n      cost: towerConfig.cost,\n      kills: 0\n    };\n\n    setPlayerData(prev => ({ ...prev, gold: prev.gold - towerConfig.cost }));\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        towers: [...prev.battleState.towers, newTower]\n      },\n      selectedTowerType: null\n    }));\n\n    onAction('tower_placed', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      tower_type: type,\n      tower_cost: towerConfig.cost,\n      position_x: x,\n      position_y: y,\n      remaining_gold: playerData.gold - towerConfig.cost,\n      wave_number: gameState.battleState.wave\n    });\n  };\n\n  const startWave = () => {\n    if (gameState.battleState.isWaveActive) return;\n\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        isWaveActive: true,\n        waveProgress: 0\n      }\n    }));\n\n    onAction('wave_started', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      wave_number: gameState.battleState.wave,\n      towers_count: gameState.battleState.towers.length,\n      current_gold: playerData.gold\n    });\n\n    // Spawn enemies\n    spawnEnemyWave();\n  };\n\n  const spawnEnemyWave = () => {\n    if (!gameState.selectedStage) return;\n    \n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n\n    const enemyCount = 8 + gameState.battleState.wave * 2;\n    const enemyTypeKeys = Object.keys(enemyTypes);\n    \n    for (let i = 0; i < enemyCount; i++) {\n      setTimeout(() => {\n        const enemyType = enemyTypeKeys[Math.min(gameState.battleState.wave - 1, enemyTypeKeys.length - 1)];\n        const enemyConfig = enemyTypes[enemyType as keyof typeof enemyTypes];\n        \n        const newEnemy: Enemy = {\n          id: `enemy_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n          x: stage.path[0].x,\n          y: stage.path[0].y,\n          health: enemyConfig.health * gameState.selectedStage!,\n          maxHealth: enemyConfig.health * gameState.selectedStage!,\n          speed: enemyConfig.speed,\n          type: enemyType,\n          pathIndex: 0,\n          alive: true,\n          armor: enemyConfig.armor,\n          reward: [\n            { type: 'gold', amount: enemyConfig.reward },\n            { type: 'exp', amount: enemyConfig.reward / 2 }\n          ]\n        };\n\n        setGameState(prev => ({\n          ...prev,\n          battleState: {\n            ...prev.battleState,\n            enemies: [...prev.battleState.enemies, newEnemy]\n          }\n        }));\n      }, i * 800);\n    }\n  };\n\n  const pauseBattle = () => {\n    onAction('battle_paused', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      wave_number: gameState.battleState.wave,\n      battle_time: gameState.battleState.battleTime,\n      current_score: gameState.battleState.score\n    });\n  };\n\n  const completeStage = (victory: boolean) => {\n    if (!gameState.selectedStage) return;\n\n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n\n    const starsEarned = victory ? calculateStars() : 0;\n    const rewards = victory ? stage.rewards : [];\n    \n    // Apply rewards\n    if (victory) {\n      let goldGained = 0;\n      let expGained = 0;\n      let gemsGained = 0;\n\n      rewards.forEach(reward => {\n        switch (reward.type) {\n          case 'gold':\n            goldGained += reward.amount;\n            break;\n          case 'exp':\n            expGained += reward.amount;\n            break;\n          case 'gem':\n            gemsGained += reward.amount;\n            break;\n        }\n      });\n\n      setPlayerData(prev => ({\n        ...prev,\n        gold: prev.gold + goldGained,\n        experience: prev.experience + expGained,\n        gems: prev.gems + gemsGained,\n        unlockedStages: Math.max(prev.unlockedStages, gameState.selectedStage! + 1)\n      }));\n\n      // Record completion\n      const completion: CompletedStage = {\n        stageId: gameState.selectedStage,\n        bestScore: gameState.battleState.score,\n        completionTime: gameState.battleState.battleTime,\n        starsEarned,\n        completedAt: new Date().toISOString()\n      };\n\n      setPlayerData(prev => {\n        const existingIndex = prev.completedStages.findIndex(c => c.stageId === gameState.selectedStage);\n        const newCompletedStages = [...prev.completedStages];\n        \n        if (existingIndex >= 0) {\n          newCompletedStages[existingIndex] = completion;\n        } else {\n          newCompletedStages.push(completion);\n        }\n\n        return { ...prev, completedStages: newCompletedStages };\n      });\n    }\n\n    const results: StageResults = {\n      victory,\n      score: gameState.battleState.score,\n      starsEarned,\n      timeBonus: victory ? Math.max(0, 300 - gameState.battleState.battleTime) : 0,\n      rewards,\n      newUnlocks: victory && gameState.selectedStage === playerData.unlockedStages ? \n        [`Stage ${gameState.selectedStage + 1} Unlocked!`] : []\n    };\n\n    setGameState(prev => ({\n      ...prev,\n      currentScene: victory ? 'stageComplete' : 'stageFailed',\n      stageResults: results\n    }));\n\n    onAction(victory ? 'stage_victory' : 'stage_defeat', {\n      player_id: playerData.id,\n      stage_id: gameState.selectedStage,\n      stage_name: stage.name,\n      final_score: gameState.battleState.score,\n      stars_earned: starsEarned,\n      battle_time: gameState.battleState.battleTime,\n      towers_built: gameState.battleState.towers.length,\n      waves_completed: gameState.battleState.wave,\n      gold_gained: victory ? rewards.find(r => r.type === 'gold')?.amount || 0 : 0,\n      exp_gained: victory ? rewards.find(r => r.type === 'exp')?.amount || 0 : 0,\n      new_unlocks: results.newUnlocks\n    });\n  };\n\n  const calculateStars = (): number => {\n    const baseScore = gameState.battleState.score;\n    const timeBonus = Math.max(0, 300 - gameState.battleState.battleTime);\n    const livesBonus = gameState.battleState.lives * 10;\n    \n    const totalScore = baseScore + timeBonus + livesBonus;\n    \n    if (totalScore >= 1000) return 3;\n    if (totalScore >= 500) return 2;\n    return 1;\n  };\n\n  const handleResultsClick = (x: number, y: number) => {\n    // Continue button\n    if (x >= 200 && x <= 400 && y >= 300 && y <= 350) {\n      setGameState(prev => ({\n        ...prev,\n        currentScene: 'lobby',\n        stageResults: null,\n        selectedStage: null\n      }));\n    }\n  };\n\n  // Game loop updates\n  const updateBattle = useCallback(() => {\n    if (gameState.currentScene !== 'battle' || !gameState.battleState.isWaveActive) return;\n\n    // Update battle time\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        battleTime: prev.battleState.battleTime + 1\n      }\n    }));\n\n    // Update enemies\n    updateEnemies();\n    \n    // Update towers\n    updateTowers();\n\n    // Check win/lose conditions\n    checkBattleEnd();\n  }, [gameState.currentScene, gameState.battleState.isWaveActive]);\n\n  const updateEnemies = () => {\n    if (!gameState.selectedStage) return;\n    \n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n\n    setGameState(prev => ({\n      ...prev,\n      battleState: {\n        ...prev.battleState,\n        enemies: prev.battleState.enemies.map(enemy => {\n          if (!enemy.alive) return enemy;\n\n          const currentTarget = stage.path[enemy.pathIndex + 1];\n          if (currentTarget) {\n            const dx = currentTarget.x - enemy.x;\n            const dy = currentTarget.y - enemy.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n\n            if (distance < 5) {\n              enemy.pathIndex++;\n              if (enemy.pathIndex >= stage.path.length - 1) {\n                // Enemy reached end\n                setGameState(prev2 => ({\n                  ...prev2,\n                  battleState: {\n                    ...prev2.battleState,\n                    lives: prev2.battleState.lives - 1\n                  }\n                }));\n\n                onAction('life_lost', {\n                  player_id: playerData.id,\n                  stage_id: gameState.selectedStage,\n                  enemy_type: enemy.type,\n                  remaining_lives: gameState.battleState.lives - 1,\n                  wave_number: gameState.battleState.wave\n                });\n\n                return { ...enemy, alive: false };\n              }\n            } else {\n              const moveX = (dx / distance) * enemy.speed;\n              const moveY = (dy / distance) * enemy.speed;\n              enemy.x += moveX;\n              enemy.y += moveY;\n            }\n          }\n\n          return enemy;\n        }).filter(enemy => enemy.alive || enemy.pathIndex < stage.path.length - 1)\n      }\n    }));\n  };\n\n  const updateTowers = () => {\n    gameState.battleState.towers.forEach(tower => {\n      if (frameCount - tower.lastAttack < tower.attackSpeed) return;\n\n      const enemiesInRange = gameState.battleState.enemies.filter(enemy => {\n        if (!enemy.alive) return false;\n        const distance = Math.sqrt((enemy.x - tower.x) ** 2 + (enemy.y - tower.y) ** 2);\n        return distance <= tower.range;\n      });\n\n      if (enemiesInRange.length > 0) {\n        const target = enemiesInRange.reduce((best, current) => \n          current.pathIndex > best.pathIndex ? current : best\n        );\n\n        const actualDamage = Math.max(1, tower.damage - target.armor);\n        \n        setGameState(prev => ({\n          ...prev,\n          battleState: {\n            ...prev.battleState,\n            enemies: prev.battleState.enemies.map(enemy => {\n              if (enemy.id === target.id) {\n                const newHealth = Math.max(0, enemy.health - actualDamage);\n                const killed = newHealth <= 0;\n\n                if (killed) {\n                  // Apply rewards\n                  const goldGain = enemy.reward.find(r => r.type === 'gold')?.amount || 0;\n                  const expGain = enemy.reward.find(r => r.type === 'exp')?.amount || 0;\n                  \n                  setPlayerData(prev2 => ({\n                    ...prev2,\n                    gold: prev2.gold + goldGain,\n                    experience: prev2.experience + expGain\n                  }));\n\n                  setGameState(prev2 => ({\n                    ...prev2,\n                    battleState: {\n                      ...prev2.battleState,\n                      score: prev2.battleState.score + goldGain * 10,\n                      towers: prev2.battleState.towers.map(t => \n                        t.id === tower.id ? { ...t, kills: t.kills + 1 } : t\n                      )\n                    }\n                  }));\n\n                  if (enemy.type === 'demon') {\n                    onAction('boss_defeated', {\n                      player_id: playerData.id,\n                      stage_id: gameState.selectedStage,\n                      boss_type: enemy.type,\n                      tower_type: tower.type,\n                      gold_gained: goldGain,\n                      exp_gained: expGain\n                    });\n                  }\n\n                  return { ...enemy, health: 0, alive: false };\n                }\n\n                return { ...enemy, health: newHealth };\n              }\n              return enemy;\n            })\n          }\n        }));\n\n        tower.lastAttack = frameCount;\n      }\n    });\n  };\n\n  const checkBattleEnd = () => {\n    if (gameState.battleState.lives <= 0) {\n      completeStage(false);\n      return;\n    }\n\n    const aliveEnemies = gameState.battleState.enemies.filter(e => e.alive);\n    if (aliveEnemies.length === 0 && gameState.battleState.waveProgress > 100) {\n      if (gameState.battleState.wave >= 3) {\n        completeStage(true);\n      } else {\n        // Next wave\n        setGameState(prev => ({\n          ...prev,\n          battleState: {\n            ...prev.battleState,\n            wave: prev.battleState.wave + 1,\n            isWaveActive: false,\n            waveProgress: 0\n          }\n        }));\n      }\n    }\n  };\n\n  // Drawing functions\n  const drawLobby = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    // Background\n    ctx.fillStyle = '#1a1a2e';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Title\n    ctx.fillStyle = '#FFD700';\n    ctx.font = 'bold 32px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('🏰 TOWER DEFENSE', canvas.width / 2, 80);\n\n    // Player info panel\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';\n    ctx.fillRect(50, 100, 500, 80);\n    \n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '16px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`${playerData.name} - Level ${playerData.level}`, 70, 125);\n    ctx.fillText(`Gold: ${playerData.gold} | Gems: ${playerData.gems}`, 70, 145);\n    ctx.fillText(`Energy: ${playerData.energy}/${playerData.maxEnergy}`, 70, 165);\n    \n    // Experience bar\n    const expNeeded = playerData.level * 100;\n    const expPercent = playerData.experience / expNeeded;\n    ctx.fillStyle = '#444';\n    ctx.fillRect(350, 140, 180, 12);\n    ctx.fillStyle = '#FFD700';\n    ctx.fillRect(350, 140, 180 * expPercent, 12);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '12px Arial';\n    ctx.fillText(`EXP: ${playerData.experience}/${expNeeded}`, 355, 150);\n\n    // Menu buttons\n    const buttons = [\n      { text: '⚔️ DUNGEON', x: 250, y: 200, w: 100, h: 50 },\n      { text: '🛒 SHOP', x: 100, y: 300, w: 100, h: 50 },\n      { text: '🎒 INVENTORY', x: 400, y: 300, w: 100, h: 50 }\n    ];\n\n    buttons.forEach(button => {\n      ctx.fillStyle = 'rgba(74, 144, 226, 0.8)';\n      ctx.fillRect(button.x, button.y, button.w, button.h);\n      \n      ctx.strokeStyle = '#FFFFFF';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(button.x, button.y, button.w, button.h);\n      \n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(button.text, button.x + button.w/2, button.y + button.h/2 + 5);\n    });\n  };\n\n  const drawDungeon = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    // Background\n    ctx.fillStyle = '#0f1419';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Title\n    ctx.fillStyle = '#FFD700';\n    ctx.font = 'bold 24px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('🗡️ DUNGEON SELECT', canvas.width / 2, 40);\n\n    // Stage cards\n    stageDefinitions.forEach((stage, index) => {\n      const x = 50 + (index % 3) * 200;\n      const y = 70 + Math.floor(index / 3) * 120;\n      \n      const isUnlocked = stage.id <= playerData.unlockedStages;\n      const hasEnergy = playerData.energy >= stage.energyCost;\n      const canEnter = isUnlocked && hasEnergy;\n\n      // Stage card background\n      ctx.fillStyle = canEnter ? 'rgba(74, 144, 226, 0.8)' : 'rgba(100, 100, 100, 0.5)';\n      ctx.fillRect(x, y, 150, 100);\n      \n      ctx.strokeStyle = canEnter ? '#4a90e2' : '#666';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(x, y, 150, 100);\n\n      // Stage info\n      ctx.fillStyle = canEnter ? '#FFFFFF' : '#999';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(`Stage ${stage.id}`, x + 75, y + 20);\n      \n      ctx.font = '12px Arial';\n      ctx.fillText(stage.name, x + 75, y + 35);\n      ctx.fillText(stage.difficulty, x + 75, y + 50);\n      ctx.fillText(`Energy: ${stage.energyCost}`, x + 75, y + 65);\n      ctx.fillText(`Lv.${stage.recommendedLevel} Rec.`, x + 75, y + 80);\n\n      // Lock indicator\n      if (!isUnlocked) {\n        ctx.fillStyle = '#FF0000';\n        ctx.font = 'bold 20px Arial';\n        ctx.fillText('🔒', x + 75, y + 55);\n      }\n\n      // Completion stars\n      const completed = playerData.completedStages.find(c => c.stageId === stage.id);\n      if (completed) {\n        for (let i = 0; i < completed.starsEarned; i++) {\n          ctx.fillStyle = '#FFD700';\n          ctx.font = '16px Arial';\n          ctx.fillText('⭐', x + 20 + i * 20, y + 95);\n        }\n      }\n    });\n\n    // Back button\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.8)';\n    ctx.fillRect(50, 350, 100, 30);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('← BACK', 100, 370);\n  };\n\n  const drawBattle = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    if (!gameState.selectedStage) return;\n    \n    const stage = stageDefinitions.find(s => s.id === gameState.selectedStage);\n    if (!stage) return;\n\n    // Background\n    ctx.fillStyle = stage.background;\n    ctx.fillRect(0, 0, canvas.width, 320);\n\n    // Draw path\n    ctx.strokeStyle = '#8B4513';\n    ctx.lineWidth = 20;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    \n    ctx.beginPath();\n    ctx.moveTo(stage.path[0].x, stage.path[0].y);\n    stage.path.slice(1).forEach(point => {\n      ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n\n    ctx.strokeStyle = '#DEB887';\n    ctx.lineWidth = 12;\n    ctx.beginPath();\n    ctx.moveTo(stage.path[0].x, stage.path[0].y);\n    stage.path.slice(1).forEach(point => {\n      ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n\n    // Draw towers\n    gameState.battleState.towers.forEach(tower => {\n      const config = towerTypes[tower.type as keyof typeof towerTypes];\n      const isSelected = gameState.selectedTower?.id === tower.id;\n      \n      // Tower base\n      ctx.fillStyle = isSelected ? '#FFD700' : '#696969';\n      ctx.beginPath();\n      ctx.arc(tower.x, tower.y, 18, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Tower body\n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(tower.x, tower.y, 14, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Tower icon\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '12px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(config.icon, tower.x, tower.y + 4);\n\n      // Level indicator\n      ctx.fillStyle = '#FFD700';\n      ctx.font = '10px Arial';\n      ctx.fillText(`Lv.${tower.level}`, tower.x, tower.y - 25);\n\n      // Range for selected tower\n      if (isSelected) {\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n        ctx.lineWidth = 2;\n        ctx.setLineDash([5, 5]);\n        ctx.beginPath();\n        ctx.arc(tower.x, tower.y, tower.range, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.setLineDash([]);\n      }\n    });\n\n    // Draw enemies\n    gameState.battleState.enemies.forEach(enemy => {\n      if (!enemy.alive) return;\n\n      const config = enemyTypes[enemy.type as keyof typeof enemyTypes];\n      \n      // Enemy body\n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(enemy.x, enemy.y, 12, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Enemy icon\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '12px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(config.icon, enemy.x, enemy.y + 4);\n\n      // Health bar\n      const barWidth = 20;\n      const barHeight = 4;\n      const healthPercent = enemy.health / enemy.maxHealth;\n      \n      ctx.fillStyle = '#FF0000';\n      ctx.fillRect(enemy.x - barWidth/2, enemy.y - 18, barWidth, barHeight);\n      ctx.fillStyle = '#00FF00';\n      ctx.fillRect(enemy.x - barWidth/2, enemy.y - 18, barWidth * healthPercent, barHeight);\n    });\n\n    // UI Panel\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n    ctx.fillRect(0, 320, canvas.width, 80);\n\n    // Battle stats\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`Stage ${gameState.selectedStage}: ${stage.name}`, 10, 340);\n    ctx.fillText(`Wave: ${gameState.battleState.wave}/3`, 10, 355);\n    ctx.fillText(`Lives: ${gameState.battleState.lives}`, 10, 370);\n    ctx.fillText(`Score: ${gameState.battleState.score}`, 10, 385);\n    ctx.fillText(`Gold: ${playerData.gold}`, 150, 340);\n    ctx.fillText(`Towers: ${gameState.battleState.towers.length}`, 150, 355);\n\n    // Tower selection buttons\n    Object.entries(towerTypes).forEach(([type, config], index) => {\n      const x = 300 + index * 60;\n      const y = 340;\n      const isSelected = gameState.selectedTowerType === type;\n      const canAfford = playerData.gold >= config.cost;\n\n      ctx.fillStyle = isSelected ? 'rgba(255, 255, 0, 0.5)' : \n                     canAfford ? 'rgba(255, 255, 255, 0.2)' : 'rgba(255, 0, 0, 0.2)';\n      ctx.fillRect(x, y, 50, 50);\n\n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(x + 25, y + 20, 12, 0, 2 * Math.PI);\n      ctx.fill();\n\n      ctx.fillStyle = canAfford ? '#FFFFFF' : '#FF6666';\n      ctx.font = '10px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(`${index + 1}: $${config.cost}`, x + 25, y + 45);\n    });\n\n    // Wave control\n    if (!gameState.battleState.isWaveActive) {\n      ctx.fillStyle = 'rgba(0, 255, 0, 0.8)';\n      ctx.fillRect(450, 350, 100, 30);\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = 'bold 14px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('START WAVE', 500, 370);\n    }\n\n    // Pause button\n    ctx.fillStyle = 'rgba(255, 200, 0, 0.8)';\n    ctx.fillRect(560, 350, 30, 30);\n    ctx.fillStyle = '#000';\n    ctx.font = '16px Arial';\n    ctx.fillText('⏸', 575, 370);\n  };\n\n  const drawResults = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    if (!gameState.stageResults) return;\n\n    const results = gameState.stageResults;\n    \n    // Overlay\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Results panel\n    ctx.fillStyle = 'rgba(50, 50, 50, 0.95)';\n    ctx.fillRect(100, 50, 400, 300);\n    ctx.strokeStyle = '#FFD700';\n    ctx.lineWidth = 3;\n    ctx.strokeRect(100, 50, 400, 300);\n\n    // Title\n    ctx.fillStyle = results.victory ? '#00FF00' : '#FF0000';\n    ctx.font = 'bold 24px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(results.victory ? '🎉 VICTORY!' : '💀 DEFEAT!', 300, 90);\n\n    // Results\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '16px Arial';\n    ctx.textAlign = 'left';\n    \n    let yPos = 120;\n    ctx.fillText(`Score: ${results.score}`, 120, yPos);\n    yPos += 25;\n    \n    if (results.victory) {\n      ctx.fillText(`Stars: ${'⭐'.repeat(results.starsEarned)}`, 120, yPos);\n      yPos += 25;\n      \n      ctx.fillText('Rewards:', 120, yPos);\n      yPos += 20;\n      \n      results.rewards.forEach(reward => {\n        const icon = { gold: '💰', exp: '⭐', gem: '💎' }[reward.type] || '🎁';\n        ctx.fillText(`${icon} +${reward.amount}`, 140, yPos);\n        yPos += 20;\n      });\n\n      if (results.newUnlocks.length > 0) {\n        yPos += 10;\n        ctx.fillStyle = '#FFD700';\n        results.newUnlocks.forEach(unlock => {\n          ctx.fillText(`🔓 ${unlock}`, 120, yPos);\n          yPos += 20;\n        });\n      }\n    }\n\n    // Continue button\n    ctx.fillStyle = 'rgba(74, 144, 226, 0.8)';\n    ctx.fillRect(200, 300, 200, 50);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = 'bold 16px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('CONTINUE', 300, 330);\n  };\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    switch (gameState.currentScene) {\n      case 'lobby':\n        drawLobby(ctx, canvas);\n        break;\n      case 'dungeon':\n        drawDungeon(ctx, canvas);\n        break;\n      case 'battle':\n        drawBattle(ctx, canvas);\n        break;\n      case 'stageComplete':\n      case 'stageFailed':\n        drawBattle(ctx, canvas);\n        drawResults(ctx, canvas);\n        break;\n      case 'shop':\n        drawLobby(ctx, canvas);\n        // Add shop overlay\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = '#FFD700';\n        ctx.font = 'bold 24px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText('🛒 SHOP (Coming Soon)', canvas.width / 2, canvas.height / 2);\n        break;\n      case 'inventory':\n        drawLobby(ctx, canvas);\n        // Add inventory overlay\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = '#FFD700';\n        ctx.font = 'bold 24px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText('🎒 INVENTORY (Coming Soon)', canvas.width / 2, canvas.height / 2);\n        break;\n    }\n  }, [gameState, playerData]);\n\n  // Game loop\n  useEffect(() => {\n    const gameLoop = () => {\n      updateBattle();\n      draw();\n      setFrameCount(prev => prev + 1);\n      gameLoopRef.current = requestAnimationFrame(gameLoop);\n    };\n\n    gameLoopRef.current = requestAnimationFrame(gameLoop);\n\n    return () => {\n      if (gameLoopRef.current) {\n        cancelAnimationFrame(gameLoopRef.current);\n      }\n    };\n  }, [updateBattle, draw]);\n\n  // Event listeners\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown);\n    \n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n\n  return (\n    <div style={{ \n      display: 'flex', \n      flexDirection: 'column', \n      alignItems: 'center',\n      background: '#0a0a0a',\n      borderRadius: '12px',\n      padding: '16px',\n      border: '2px solid #2d3748',\n      maxHeight: '500px',\n      overflowY: 'auto',\n      overflowX: 'auto'\n    }}>\n      <canvas\n        ref={canvasRef}\n        width={600}\n        height={400}\n        style={{\n          border: '2px solid #4a5568',\n          borderRadius: '8px',\n          cursor: gameState.selectedTowerType ? 'crosshair' : 'pointer',\n          maxWidth: '100%',\n          height: 'auto'\n        }}\n        onClick={handleCanvasClick}\n        tabIndex={0}\n      />\n      \n      <div style={{\n        marginTop: '12px',\n        color: '#ffffff',\n        fontSize: '14px',\n        textAlign: 'center',\n        maxWidth: '600px',\n      }}>\n        <p>🏰 <strong>Complete Tower Defense RPG</strong></p>\n        <p>\n          {gameState.currentScene === 'lobby' && '로비에서 던전을 선택하세요!'}\n          {gameState.currentScene === 'dungeon' && '스테이지를 선택하세요!'}\n          {gameState.currentScene === 'battle' && `Stage ${gameState.selectedStage} - Space로 웨이브 시작!`}\n          {(gameState.currentScene === 'stageComplete' || gameState.currentScene === 'stageFailed') && '결과를 확인하고 계속하세요!'}\n        </p>\n        <p>Level {playerData.level} | Gold: {playerData.gold} | Energy: {playerData.energy}/{playerData.maxEnergy}</p>\n      </div>\n    </div>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}