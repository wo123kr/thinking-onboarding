{"ast":null,"code":"var _jsxFileName = \"/Users/jegaljin-u/workspace/thinking-guide/src/components/AdvancedTowerDefense.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AdvancedTowerDefense = ({\n  onAction,\n  playerStats,\n  setPlayerStats,\n  currentUser\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const gameLoopRef = useRef();\n\n  // Different maps for each stage\n  const stageMaps = {\n    1: [\n    // Simple path\n    {\n      x: 0,\n      y: 200\n    }, {\n      x: 150,\n      y: 200\n    }, {\n      x: 150,\n      y: 100\n    }, {\n      x: 300,\n      y: 100\n    }, {\n      x: 300,\n      y: 300\n    }, {\n      x: 450,\n      y: 300\n    }, {\n      x: 450,\n      y: 150\n    }, {\n      x: 600,\n      y: 150\n    }],\n    2: [\n    // Zigzag path\n    {\n      x: 0,\n      y: 100\n    }, {\n      x: 100,\n      y: 100\n    }, {\n      x: 100,\n      y: 250\n    }, {\n      x: 200,\n      y: 250\n    }, {\n      x: 200,\n      y: 50\n    }, {\n      x: 350,\n      y: 50\n    }, {\n      x: 350,\n      y: 200\n    }, {\n      x: 500,\n      y: 200\n    }, {\n      x: 500,\n      y: 350\n    }, {\n      x: 600,\n      y: 350\n    }],\n    3: [\n    // Spiral path\n    {\n      x: 0,\n      y: 200\n    }, {\n      x: 80,\n      y: 200\n    }, {\n      x: 80,\n      y: 120\n    }, {\n      x: 200,\n      y: 120\n    }, {\n      x: 200,\n      y: 280\n    }, {\n      x: 320,\n      y: 280\n    }, {\n      x: 320,\n      y: 80\n    }, {\n      x: 480,\n      y: 80\n    }, {\n      x: 480,\n      y: 320\n    }, {\n      x: 600,\n      y: 320\n    }],\n    4: [\n    // Double path\n    {\n      x: 0,\n      y: 150\n    }, {\n      x: 150,\n      y: 150\n    }, {\n      x: 150,\n      y: 100\n    }, {\n      x: 300,\n      y: 100\n    }, {\n      x: 300,\n      y: 200\n    }, {\n      x: 450,\n      y: 200\n    }, {\n      x: 600,\n      y: 200\n    }],\n    5: [\n    // Boss arena\n    {\n      x: 0,\n      y: 200\n    }, {\n      x: 100,\n      y: 200\n    }, {\n      x: 200,\n      y: 200\n    }, {\n      x: 300,\n      y: 200\n    }, {\n      x: 400,\n      y: 200\n    }, {\n      x: 500,\n      y: 200\n    }, {\n      x: 600,\n      y: 200\n    }]\n  };\n  const [gameState, setGameState] = useState({\n    stage: 1,\n    wave: 1,\n    lives: 20,\n    gold: 600,\n    score: 0,\n    experience: 0,\n    playerLevel: 1,\n    waveProgress: 0,\n    gameStatus: 'playing',\n    selectedTowerType: null,\n    selectedTower: null,\n    shopItems: [],\n    currentMap: 1\n  });\n  const [towers, setTowers] = useState([]);\n  const [enemies, setEnemies] = useState([]);\n  const [frameCount, setFrameCount] = useState(0);\n  const [nextEnemySpawn, setNextEnemySpawn] = useState(0);\n\n  // Enhanced tower types\n  const towerTypes = {\n    archer: {\n      cost: 80,\n      damage: 20,\n      range: 120,\n      speed: 25,\n      color: '#8B4513'\n    },\n    cannon: {\n      cost: 150,\n      damage: 50,\n      range: 90,\n      speed: 50,\n      color: '#696969'\n    },\n    magic: {\n      cost: 220,\n      damage: 35,\n      range: 130,\n      speed: 35,\n      color: '#9400D3'\n    },\n    ice: {\n      cost: 180,\n      damage: 15,\n      range: 100,\n      speed: 30,\n      color: '#00BFFF'\n    },\n    lightning: {\n      cost: 300,\n      damage: 80,\n      range: 150,\n      speed: 70,\n      color: '#FFD700'\n    }\n  };\n\n  // Stage-specific enemies\n  const stageEnemies = {\n    1: [{\n      type: 'goblin',\n      count: 8\n    }],\n    2: [{\n      type: 'goblin',\n      count: 6\n    }, {\n      type: 'orc',\n      count: 4\n    }],\n    3: [{\n      type: 'orc',\n      count: 5\n    }, {\n      type: 'troll',\n      count: 3\n    }],\n    4: [{\n      type: 'troll',\n      count: 4\n    }, {\n      type: 'dragon',\n      count: 2\n    }],\n    5: [{\n      type: 'dragon',\n      count: 3\n    }, {\n      type: 'demon_lord',\n      count: 1\n    }] // Boss stage\n  };\n  const enemyTypes = {\n    goblin: {\n      health: 60,\n      speed: 2.5,\n      reward: 12,\n      color: '#228B22',\n      armor: 0\n    },\n    orc: {\n      health: 120,\n      speed: 2,\n      reward: 20,\n      color: '#8B4513',\n      armor: 2\n    },\n    troll: {\n      health: 250,\n      speed: 1.5,\n      reward: 35,\n      color: '#2F4F4F',\n      armor: 5\n    },\n    dragon: {\n      health: 400,\n      speed: 1.2,\n      reward: 60,\n      color: '#DC143C',\n      armor: 8\n    },\n    demon_lord: {\n      health: 1000,\n      speed: 0.8,\n      reward: 200,\n      color: '#8B0000',\n      armor: 15\n    },\n    // Boss\n    ice_giant: {\n      health: 600,\n      speed: 1,\n      reward: 80,\n      color: '#4682B4',\n      armor: 10\n    },\n    fire_elemental: {\n      health: 300,\n      speed: 2.2,\n      reward: 45,\n      color: '#FF4500',\n      armor: 3\n    }\n  };\n\n  // Generate shop items\n  const generateShopItems = () => {\n    return [{\n      id: 'damage_boost',\n      name: '공격력 강화',\n      description: '모든 타워 데미지 +20%',\n      cost: 200,\n      type: 'upgrade',\n      effect: {\n        type: 'damage',\n        value: 1.2\n      }\n    }, {\n      id: 'range_boost',\n      name: '사거리 확장',\n      description: '모든 타워 사거리 +25%',\n      cost: 180,\n      type: 'upgrade',\n      effect: {\n        type: 'range',\n        value: 1.25\n      }\n    }, {\n      id: 'gold_boost',\n      name: '골드 배율',\n      description: '적 처치 골드 +50%',\n      cost: 150,\n      type: 'power',\n      effect: {\n        type: 'gold_multiplier',\n        value: 1.5\n      }\n    }, {\n      id: 'lightning_tower',\n      name: '라이트닝 타워',\n      description: '강력한 전기 공격',\n      cost: 300,\n      type: 'tower',\n      effect: {\n        type: 'unlock_tower',\n        tower: 'lightning'\n      }\n    }];\n  };\n\n  // Initialize shop\n  useEffect(() => {\n    setGameState(prev => ({\n      ...prev,\n      shopItems: generateShopItems()\n    }));\n  }, []);\n  const handleKeyDown = useCallback(e => {\n    if (['1', '2', '3', '4', '5', ' ', 'Enter', 'Escape', 's', 'u'].includes(e.key.toLowerCase())) {\n      e.preventDefault();\n      e.stopPropagation();\n      switch (e.key.toLowerCase()) {\n        case '1':\n          setGameState(prev => ({\n            ...prev,\n            selectedTowerType: 'archer',\n            selectedTower: null\n          }));\n          break;\n        case '2':\n          setGameState(prev => ({\n            ...prev,\n            selectedTowerType: 'cannon',\n            selectedTower: null\n          }));\n          break;\n        case '3':\n          setGameState(prev => ({\n            ...prev,\n            selectedTowerType: 'magic',\n            selectedTower: null\n          }));\n          break;\n        case '4':\n          setGameState(prev => ({\n            ...prev,\n            selectedTowerType: 'ice',\n            selectedTower: null\n          }));\n          break;\n        case '5':\n          if (gameState.playerLevel >= 3) {\n            setGameState(prev => ({\n              ...prev,\n              selectedTowerType: 'lightning',\n              selectedTower: null\n            }));\n          }\n          break;\n        case ' ':\n          if (gameState.gameStatus === 'playing') {\n            startNextWave();\n          }\n          break;\n        case 's':\n          if (gameState.gameStatus === 'stageComplete') {\n            setGameState(prev => ({\n              ...prev,\n              gameStatus: 'shop'\n            }));\n          }\n          break;\n        case 'u':\n          if (gameState.selectedTower) {\n            upgradeTower(gameState.selectedTower);\n          }\n          break;\n        case 'escape':\n          setGameState(prev => ({\n            ...prev,\n            selectedTowerType: null,\n            selectedTower: null,\n            gameStatus: gameState.gameStatus === 'shop' ? 'playing' : prev.gameStatus\n          }));\n          break;\n      }\n    }\n  }, [gameState.playerLevel, gameState.gameStatus, gameState.selectedTower]);\n  const handleCanvasClick = useCallback(e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    // Check if clicking on shop items\n    if (gameState.gameStatus === 'shop') {\n      handleShopClick(x, y);\n      return;\n    }\n\n    // Check if clicking on existing tower\n    const clickedTower = towers.find(tower => {\n      const distance = Math.sqrt((x - tower.x) ** 2 + (y - tower.y) ** 2);\n      return distance < 25;\n    });\n    if (clickedTower) {\n      setGameState(prev => ({\n        ...prev,\n        selectedTower: clickedTower,\n        selectedTowerType: null\n      }));\n      return;\n    }\n\n    // Place new tower\n    if (gameState.selectedTowerType && canPlaceTower(x, y)) {\n      placeTower(x, y, gameState.selectedTowerType);\n    }\n  }, [gameState.gameStatus, gameState.selectedTowerType, towers]);\n  const handleShopClick = (x, y) => {\n    gameState.shopItems.forEach((item, index) => {\n      const itemY = 100 + index * 60;\n      if (x >= 50 && x <= 550 && y >= itemY && y <= itemY + 50) {\n        purchaseShopItem(item);\n      }\n    });\n  };\n  const purchaseShopItem = item => {\n    if (gameState.gold < item.cost) return;\n    setGameState(prev => ({\n      ...prev,\n      gold: prev.gold - item.cost\n    }));\n\n    // Apply item effect\n    switch (item.effect.type) {\n      case 'damage':\n        setTowers(prevTowers => prevTowers.map(tower => ({\n          ...tower,\n          damage: Math.round(tower.damage * item.effect.value)\n        })));\n        break;\n      case 'range':\n        setTowers(prevTowers => prevTowers.map(tower => ({\n          ...tower,\n          range: Math.round(tower.range * item.effect.value)\n        })));\n        break;\n    }\n    onAction('shop_purchase', {\n      item_name: item.name,\n      item_cost: item.cost,\n      remaining_gold: gameState.gold - item.cost,\n      stage: gameState.stage,\n      player_level: gameState.playerLevel\n    });\n  };\n  const canPlaceTower = (x, y) => {\n    const currentPath = stageMaps[gameState.currentMap];\n\n    // Check distance from path\n    for (const point of currentPath) {\n      const distance = Math.sqrt((x - point.x) ** 2 + (y - point.y) ** 2);\n      if (distance < 45) return false;\n    }\n\n    // Check distance from other towers\n    for (const tower of towers) {\n      const distance = Math.sqrt((x - tower.x) ** 2 + (y - tower.y) ** 2);\n      if (distance < 60) return false;\n    }\n    return x > 30 && x < 570 && y > 70 && y < 330;\n  };\n  const placeTower = (x, y, type) => {\n    const towerConfig = towerTypes[type];\n    if (gameState.gold < towerConfig.cost) return;\n    const newTower = {\n      id: `tower_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      x,\n      y,\n      type,\n      level: 1,\n      damage: towerConfig.damage,\n      range: towerConfig.range,\n      attackSpeed: towerConfig.speed,\n      lastAttack: 0,\n      cost: towerConfig.cost,\n      kills: 0,\n      upgradeCost: Math.round(towerConfig.cost * 0.6)\n    };\n    setTowers(prev => [...prev, newTower]);\n    setGameState(prev => ({\n      ...prev,\n      gold: prev.gold - towerConfig.cost,\n      selectedTowerType: null\n    }));\n\n    // Only log tower placement - key strategic decision\n    onAction('tower_placed', {\n      tower_type: type,\n      position_x: x,\n      position_y: y,\n      cost: towerConfig.cost,\n      remaining_gold: gameState.gold - towerConfig.cost,\n      stage: gameState.stage,\n      wave: gameState.wave\n    });\n  };\n  const upgradeTower = tower => {\n    if (gameState.gold < tower.upgradeCost) return;\n    setTowers(prevTowers => prevTowers.map(t => t.id === tower.id ? {\n      ...t,\n      level: t.level + 1,\n      damage: Math.round(t.damage * 1.4),\n      range: Math.round(t.range * 1.1),\n      upgradeCost: Math.round(t.upgradeCost * 1.5)\n    } : t));\n    setGameState(prev => ({\n      ...prev,\n      gold: prev.gold - tower.upgradeCost,\n      selectedTower: null\n    }));\n    onAction('tower_upgraded', {\n      tower_type: tower.type,\n      new_level: tower.level + 1,\n      upgrade_cost: tower.upgradeCost,\n      stage: gameState.stage\n    });\n  };\n  const startNextWave = () => {\n    if (gameState.waveProgress > 0) return;\n    setGameState(prev => ({\n      ...prev,\n      waveProgress: 1\n    }));\n    setNextEnemySpawn(frameCount + 60);\n\n    // Log wave start - key gameplay event\n    onAction('wave_started', {\n      stage: gameState.stage,\n      wave: gameState.wave,\n      player_level: gameState.playerLevel,\n      towers_count: towers.length,\n      gold: gameState.gold\n    });\n  };\n  const spawnEnemy = () => {\n    const stageConfig = stageEnemies[gameState.stage];\n    if (!stageConfig) return;\n    const enemyPool = [];\n    stageConfig.forEach(config => {\n      for (let i = 0; i < config.count; i++) {\n        enemyPool.push(config.type);\n      }\n    });\n    const enemyType = enemyPool[Math.floor(Math.random() * enemyPool.length)];\n    const enemyConfig = enemyTypes[enemyType];\n    const currentPath = stageMaps[gameState.currentMap];\n    const newEnemy = {\n      id: `enemy_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      x: currentPath[0].x,\n      y: currentPath[0].y,\n      health: enemyConfig.health + (gameState.stage - 1) * 30,\n      maxHealth: enemyConfig.health + (gameState.stage - 1) * 30,\n      speed: enemyConfig.speed,\n      type: enemyType,\n      reward: enemyConfig.reward + gameState.stage * 3,\n      pathIndex: 0,\n      alive: true,\n      isBoss: enemyType === 'demon_lord',\n      armor: enemyConfig.armor\n    };\n    setEnemies(prev => [...prev, newEnemy]);\n  };\n  const updateEnemies = useCallback(() => {\n    const currentPath = stageMaps[gameState.currentMap];\n    setEnemies(prev => prev.map(enemy => {\n      if (!enemy.alive) return enemy;\n      const currentTarget = currentPath[enemy.pathIndex + 1];\n      if (currentTarget) {\n        const dx = currentTarget.x - enemy.x;\n        const dy = currentTarget.y - enemy.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < 5) {\n          enemy.pathIndex++;\n          if (enemy.pathIndex >= currentPath.length - 1) {\n            // Enemy reached end - critical event\n            const livesLost = enemy.isBoss ? 5 : 1;\n            setGameState(prevState => ({\n              ...prevState,\n              lives: prevState.lives - livesLost\n            }));\n            onAction('life_lost', {\n              enemy_type: enemy.type,\n              is_boss: enemy.isBoss,\n              lives_lost: livesLost,\n              remaining_lives: gameState.lives - livesLost,\n              stage: gameState.stage\n            });\n            return {\n              ...enemy,\n              alive: false\n            };\n          }\n        } else {\n          const moveX = dx / distance * enemy.speed;\n          const moveY = dy / distance * enemy.speed;\n          enemy.x += moveX;\n          enemy.y += moveY;\n        }\n      }\n      return enemy;\n    }).filter(enemy => enemy.alive || enemy.pathIndex < currentPath.length - 1));\n  }, [gameState.currentMap, gameState.lives, gameState.stage, onAction]);\n  const updateTowers = useCallback(() => {\n    towers.forEach(tower => {\n      if (frameCount - tower.lastAttack < tower.attackSpeed) return;\n      const enemiesInRange = enemies.filter(enemy => {\n        if (!enemy.alive) return false;\n        const distance = Math.sqrt((enemy.x - tower.x) ** 2 + (enemy.y - tower.y) ** 2);\n        return distance <= tower.range;\n      });\n      if (enemiesInRange.length > 0) {\n        const target = enemiesInRange.reduce((best, current) => current.pathIndex > best.pathIndex ? current : best);\n        const actualDamage = Math.max(1, tower.damage - target.armor);\n        setEnemies(prevEnemies => prevEnemies.map(enemy => {\n          if (enemy.id === target.id) {\n            const newHealth = Math.max(0, enemy.health - actualDamage);\n            const killed = newHealth <= 0;\n            if (killed) {\n              const goldGain = enemy.reward;\n              const expGain = enemy.isBoss ? 100 : 15;\n              setGameState(prevState => ({\n                ...prevState,\n                gold: prevState.gold + goldGain,\n                score: prevState.score + goldGain * 10,\n                experience: prevState.experience + expGain\n              }));\n              setTowers(prevTowers => prevTowers.map(t => t.id === tower.id ? {\n                ...t,\n                kills: t.kills + 1\n              } : t));\n\n              // Only log boss defeats - significant events\n              if (enemy.isBoss) {\n                onAction('boss_defeated', {\n                  boss_type: enemy.type,\n                  stage: gameState.stage,\n                  gold_gained: goldGain,\n                  exp_gained: expGain\n                });\n              }\n              return {\n                ...enemy,\n                health: 0,\n                alive: false\n              };\n            }\n            return {\n              ...enemy,\n              health: newHealth\n            };\n          }\n          return enemy;\n        }));\n        tower.lastAttack = frameCount;\n      }\n    });\n  }, [towers, enemies, frameCount, gameState.stage, onAction]);\n\n  // Level up system\n  useEffect(() => {\n    const expNeeded = gameState.playerLevel * 100;\n    if (gameState.experience >= expNeeded) {\n      setGameState(prev => ({\n        ...prev,\n        playerLevel: prev.playerLevel + 1,\n        experience: prev.experience - expNeeded\n      }));\n\n      // Log level up - player progression event\n      onAction('level_up', {\n        new_level: gameState.playerLevel + 1,\n        stage: gameState.stage,\n        total_score: gameState.score\n      });\n    }\n  }, [gameState.experience, gameState.playerLevel, gameState.stage, gameState.score, onAction]);\n\n  // Wave and stage management\n  useEffect(() => {\n    if (gameState.waveProgress > 0 && frameCount >= nextEnemySpawn) {\n      const maxEnemies = 8 + gameState.stage * 2;\n      const currentEnemies = enemies.filter(e => e.alive).length;\n      if (currentEnemies < maxEnemies) {\n        spawnEnemy();\n        setNextEnemySpawn(frameCount + Math.max(30, 80 - gameState.stage * 10));\n      } else if (enemies.filter(e => e.alive).length === 0) {\n        // Wave complete\n        if (gameState.wave >= 3) {\n          // Stage complete\n          setGameState(prev => ({\n            ...prev,\n            gameStatus: 'stageComplete',\n            waveProgress: 0\n          }));\n\n          // Log stage victory - major milestone\n          onAction('stage_victory', {\n            stage: gameState.stage,\n            final_score: gameState.score,\n            player_level: gameState.playerLevel,\n            towers_built: towers.length\n          });\n        } else {\n          // Next wave\n          setGameState(prev => ({\n            ...prev,\n            wave: prev.wave + 1,\n            waveProgress: 0,\n            gold: prev.gold + 50 + prev.stage * 20\n          }));\n        }\n      }\n    }\n  }, [frameCount, nextEnemySpawn, gameState, enemies, towers.length, onAction]);\n\n  // Game over check\n  useEffect(() => {\n    if (gameState.lives <= 0) {\n      setGameState(prev => ({\n        ...prev,\n        gameStatus: 'gameOver'\n      }));\n\n      // Log game over - critical failure event\n      onAction('stage_defeat', {\n        stage: gameState.stage,\n        wave: gameState.wave,\n        final_score: gameState.score,\n        player_level: gameState.playerLevel,\n        cause: 'lives_depleted'\n      });\n    }\n  }, [gameState.lives, gameState.stage, gameState.wave, gameState.score, gameState.playerLevel, onAction]);\n  const nextStage = () => {\n    if (gameState.stage >= 5) {\n      setGameState(prev => ({\n        ...prev,\n        gameStatus: 'victory'\n      }));\n      onAction('game_victory', {\n        final_score: gameState.score,\n        player_level: gameState.playerLevel,\n        total_towers: towers.length\n      });\n      return;\n    }\n    setGameState(prev => ({\n      ...prev,\n      stage: prev.stage + 1,\n      wave: 1,\n      currentMap: prev.stage + 1,\n      gameStatus: 'playing',\n      gold: prev.gold + 100,\n      lives: Math.min(20, prev.lives + 2)\n    }));\n    setEnemies([]);\n    setTowers([]);\n\n    // Log stage start - new chapter begins\n    onAction('stage_started', {\n      stage: gameState.stage + 1,\n      player_level: gameState.playerLevel,\n      starting_gold: gameState.gold + 100\n    });\n  };\n\n  // Drawing functions\n  const drawPath = ctx => {\n    const currentPath = stageMaps[gameState.currentMap];\n    ctx.strokeStyle = '#8B4513';\n    ctx.lineWidth = 25;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    ctx.beginPath();\n    ctx.moveTo(currentPath[0].x, currentPath[0].y);\n    currentPath.slice(1).forEach(point => {\n      ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n    ctx.strokeStyle = '#DEB887';\n    ctx.lineWidth = 15;\n    ctx.beginPath();\n    ctx.moveTo(currentPath[0].x, currentPath[0].y);\n    currentPath.slice(1).forEach(point => {\n      ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n  };\n  const drawTower = (ctx, tower) => {\n    var _gameState$selectedTo;\n    const config = towerTypes[tower.type];\n    const isSelected = ((_gameState$selectedTo = gameState.selectedTower) === null || _gameState$selectedTo === void 0 ? void 0 : _gameState$selectedTo.id) === tower.id;\n\n    // Tower base\n    ctx.fillStyle = isSelected ? '#FFD700' : '#696969';\n    ctx.beginPath();\n    ctx.arc(tower.x, tower.y, 22, 0, 2 * Math.PI);\n    ctx.fill();\n\n    // Tower body\n    ctx.fillStyle = config.color;\n    ctx.beginPath();\n    ctx.arc(tower.x, tower.y, 18, 0, 2 * Math.PI);\n    ctx.fill();\n\n    // Level indicator\n    for (let i = 0; i < tower.level; i++) {\n      ctx.fillStyle = '#FFD700';\n      ctx.fillRect(tower.x - 15 + i * 6, tower.y - 25, 4, 4);\n    }\n\n    // Tower icon\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'center';\n    const symbols = {\n      archer: '🏹',\n      cannon: '💣',\n      magic: '✨',\n      ice: '❄️',\n      lightning: '⚡'\n    };\n    ctx.fillText(symbols[tower.type], tower.x, tower.y + 4);\n\n    // Range for selected tower\n    if (isSelected) {\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n      ctx.lineWidth = 2;\n      ctx.setLineDash([5, 5]);\n      ctx.beginPath();\n      ctx.arc(tower.x, tower.y, tower.range, 0, 2 * Math.PI);\n      ctx.stroke();\n      ctx.setLineDash([]);\n\n      // Upgrade info\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '12px Arial';\n      ctx.fillText(`Lv.${tower.level}`, tower.x, tower.y - 35);\n      ctx.fillText(`$${tower.upgradeCost}`, tower.x, tower.y - 50);\n    }\n\n    // Kill count\n    if (tower.kills > 0) {\n      ctx.fillStyle = '#FFD700';\n      ctx.font = '10px Arial';\n      ctx.fillText(tower.kills.toString(), tower.x + 20, tower.y - 20);\n    }\n  };\n  const drawEnemy = (ctx, enemy) => {\n    if (!enemy.alive) return;\n    const config = enemyTypes[enemy.type];\n    const sizeMap = {\n      goblin: 12,\n      orc: 16,\n      troll: 20,\n      dragon: 24,\n      demon_lord: 30,\n      ice_giant: 26,\n      fire_elemental: 18\n    };\n    const size = enemy.isBoss ? 30 : sizeMap[enemy.type] || 16;\n\n    // Boss glow effect\n    if (enemy.isBoss) {\n      ctx.shadowColor = '#FF0000';\n      ctx.shadowBlur = 20;\n    }\n\n    // Enemy body\n    ctx.fillStyle = config.color;\n    ctx.beginPath();\n    ctx.arc(enemy.x, enemy.y, size, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.shadowBlur = 0;\n\n    // Enemy icon\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = `${size}px Arial`;\n    ctx.textAlign = 'center';\n    const symbols = {\n      goblin: '👹',\n      orc: '🗡️',\n      troll: '🏔️',\n      dragon: '🐉',\n      demon_lord: '😈',\n      ice_giant: '🧊',\n      fire_elemental: '🔥'\n    };\n    ctx.fillText(symbols[enemy.type], enemy.x, enemy.y + size / 3);\n\n    // Health bar\n    const barWidth = size * 2.5;\n    const barHeight = 6;\n    const healthPercent = enemy.health / enemy.maxHealth;\n    ctx.fillStyle = enemy.isBoss ? '#8B0000' : '#FF0000';\n    ctx.fillRect(enemy.x - barWidth / 2, enemy.y - size - 15, barWidth, barHeight);\n    ctx.fillStyle = enemy.isBoss ? '#FFD700' : '#00FF00';\n    ctx.fillRect(enemy.x - barWidth / 2, enemy.y - size - 15, barWidth * healthPercent, barHeight);\n\n    // Armor indicator\n    if (enemy.armor > 0) {\n      ctx.fillStyle = '#C0C0C0';\n      ctx.font = '8px Arial';\n      ctx.fillText(`⚔${enemy.armor}`, enemy.x, enemy.y + size + 12);\n    }\n  };\n  const drawUI = (ctx, canvas) => {\n    // Top status bar\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    ctx.fillRect(0, 0, canvas.width, 60);\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '16px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`Stage: ${gameState.stage}`, 10, 25);\n    ctx.fillText(`Wave: ${gameState.wave}/3`, 10, 45);\n    ctx.fillText(`Lives: ${gameState.lives}`, 120, 25);\n    ctx.fillText(`Gold: ${gameState.gold}`, 120, 45);\n    ctx.fillText(`Level: ${gameState.playerLevel}`, 220, 25);\n    ctx.fillText(`Score: ${gameState.score}`, 220, 45);\n\n    // Experience bar\n    const expNeeded = gameState.playerLevel * 100;\n    const expPercent = gameState.experience / expNeeded;\n    ctx.fillStyle = '#8B4513';\n    ctx.fillRect(320, 35, 200, 8);\n    ctx.fillStyle = '#FFD700';\n    ctx.fillRect(320, 35, 200 * expPercent, 8);\n\n    // Tower selection panel\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n    ctx.fillRect(0, canvas.height - 90, canvas.width, 90);\n    const towerButtons = [{\n      type: 'archer',\n      x: 60,\n      key: '1',\n      unlocked: true\n    }, {\n      type: 'cannon',\n      x: 140,\n      key: '2',\n      unlocked: true\n    }, {\n      type: 'magic',\n      x: 220,\n      key: '3',\n      unlocked: true\n    }, {\n      type: 'ice',\n      x: 300,\n      key: '4',\n      unlocked: true\n    }, {\n      type: 'lightning',\n      x: 380,\n      key: '5',\n      unlocked: gameState.playerLevel >= 3\n    }];\n    towerButtons.forEach(button => {\n      if (!button.unlocked) return;\n      const config = towerTypes[button.type];\n      const isSelected = gameState.selectedTowerType === button.type;\n      const canAfford = gameState.gold >= config.cost;\n      ctx.fillStyle = isSelected ? 'rgba(255, 255, 0, 0.5)' : canAfford ? 'rgba(255, 255, 255, 0.2)' : 'rgba(255, 0, 0, 0.2)';\n      ctx.fillRect(button.x - 30, canvas.height - 80, 60, 70);\n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(button.x, canvas.height - 60, 15, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.fillStyle = canAfford ? '#FFFFFF' : '#FF6666';\n      ctx.font = '12px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(`${button.key}: $${config.cost}`, button.x, canvas.height - 25);\n    });\n\n    // Instructions\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'right';\n    ctx.fillText('SPACE: Next Wave', canvas.width - 10, canvas.height - 65);\n    ctx.fillText('U: Upgrade Tower', canvas.width - 10, canvas.height - 45);\n    ctx.fillText('S: Shop (after stage)', canvas.width - 10, canvas.height - 25);\n    ctx.fillText('ESC: Cancel', canvas.width - 10, canvas.height - 5);\n\n    // Selected tower info\n    if (gameState.selectedTower) {\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n      ctx.fillRect(canvas.width - 200, 70, 190, 100);\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '14px Arial';\n      ctx.textAlign = 'left';\n      const tower = gameState.selectedTower;\n      ctx.fillText(`${tower.type.toUpperCase()} Lv.${tower.level}`, canvas.width - 190, 90);\n      ctx.fillText(`Damage: ${tower.damage}`, canvas.width - 190, 110);\n      ctx.fillText(`Range: ${tower.range}`, canvas.width - 190, 130);\n      ctx.fillText(`Kills: ${tower.kills}`, canvas.width - 190, 150);\n      ctx.fillText(`Upgrade: $${tower.upgradeCost}`, canvas.width - 190, 170);\n    }\n\n    // Game status overlays\n    if (gameState.gameStatus === 'stageComplete') {\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.fillStyle = '#00FF00';\n      ctx.font = '32px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('STAGE COMPLETE!', canvas.width / 2, canvas.height / 2 - 40);\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '18px Arial';\n      ctx.fillText('Press S for Shop, ENTER for Next Stage', canvas.width / 2, canvas.height / 2 + 20);\n    }\n    if (gameState.gameStatus === 'shop') {\n      drawShop(ctx, canvas);\n    }\n    if (gameState.gameStatus === 'gameOver') {\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.fillStyle = '#FF0000';\n      ctx.font = '32px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('GAME OVER', canvas.width / 2, canvas.height / 2 - 50);\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '18px Arial';\n      ctx.fillText(`Stage Reached: ${gameState.stage}`, canvas.width / 2, canvas.height / 2);\n      ctx.fillText(`Final Score: ${gameState.score}`, canvas.width / 2, canvas.height / 2 + 30);\n    }\n    if (gameState.gameStatus === 'victory') {\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.fillStyle = '#FFD700';\n      ctx.font = '32px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('VICTORY!', canvas.width / 2, canvas.height / 2 - 50);\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '18px Arial';\n      ctx.fillText('All stages conquered!', canvas.width / 2, canvas.height / 2);\n      ctx.fillText(`Final Score: ${gameState.score}`, canvas.width / 2, canvas.height / 2 + 30);\n    }\n  };\n  const drawShop = (ctx, canvas) => {\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.fillStyle = '#FFD700';\n    ctx.font = '24px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('🛒 SHOP', canvas.width / 2, 50);\n    gameState.shopItems.forEach((item, index) => {\n      const y = 100 + index * 60;\n      const canAfford = gameState.gold >= item.cost;\n      ctx.fillStyle = canAfford ? 'rgba(255, 255, 255, 0.1)' : 'rgba(255, 0, 0, 0.1)';\n      ctx.fillRect(50, y, 500, 50);\n      ctx.fillStyle = canAfford ? '#FFFFFF' : '#999999';\n      ctx.font = '16px Arial';\n      ctx.textAlign = 'left';\n      ctx.fillText(item.name, 60, y + 20);\n      ctx.font = '12px Arial';\n      ctx.fillText(item.description, 60, y + 35);\n      ctx.textAlign = 'right';\n      ctx.font = '16px Arial';\n      ctx.fillText(`$${item.cost}`, 540, y + 25);\n    });\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '16px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('Click items to purchase, ESC to close', canvas.width / 2, canvas.height - 30);\n  };\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Stage-specific backgrounds\n    const stageColors = {\n      1: '#1a4c2e',\n      2: '#2d2d2d',\n      3: '#1a1a3a',\n      4: '#3a1a1a',\n      5: '#0f0f0f'\n    };\n    ctx.fillStyle = stageColors[gameState.stage] || '#1a4c2e';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    if (gameState.gameStatus !== 'shop') {\n      drawPath(ctx);\n      towers.forEach(tower => drawTower(ctx, tower));\n      enemies.forEach(enemy => drawEnemy(ctx, enemy));\n    }\n    drawUI(ctx, canvas);\n  }, [towers, enemies, gameState]);\n\n  // Game loop\n  useEffect(() => {\n    const gameLoop = () => {\n      if (gameState.gameStatus === 'playing') {\n        updateEnemies();\n        updateTowers();\n      }\n      draw();\n      setFrameCount(prev => prev + 1);\n      gameLoopRef.current = requestAnimationFrame(gameLoop);\n    };\n    gameLoopRef.current = requestAnimationFrame(gameLoop);\n    return () => {\n      if (gameLoopRef.current) {\n        cancelAnimationFrame(gameLoopRef.current);\n      }\n    };\n  }, [updateEnemies, updateTowers, draw, gameState.gameStatus]);\n\n  // Event listeners\n  useEffect(() => {\n    const handleKeyPress = e => {\n      if (e.key === 'Enter' && gameState.gameStatus === 'stageComplete') {\n        nextStage();\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keydown', handleKeyPress);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [handleKeyDown, gameState.gameStatus]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      background: '#0f1419',\n      borderRadius: '12px',\n      padding: '16px',\n      border: '2px solid #2d3748'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 600,\n      height: 400,\n      style: {\n        border: '2px solid #4a5568',\n        borderRadius: '8px',\n        cursor: gameState.selectedTowerType ? 'crosshair' : 'default'\n      },\n      onClick: handleCanvasClick,\n      tabIndex: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1033,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '12px',\n        color: '#ffffff',\n        fontSize: '14px',\n        textAlign: 'center',\n        maxWidth: '600px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD83C\\uDFF0 \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Advanced Tower Defense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1053,\n          columnNumber: 15\n        }, this), \" - 5 stages, boss battles, upgrades & shop!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1053,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Stage \", gameState.stage, \"/5 | Level \", gameState.playerLevel, \" | Score: \", gameState.score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1054,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1046,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1024,\n    columnNumber: 5\n  }, this);\n};\n_s(AdvancedTowerDefense, \"hXCsmP4isvgilA7mClvzamHn4vU=\");\n_c = AdvancedTowerDefense;\nvar _c;\n$RefreshReg$(_c, \"AdvancedTowerDefense\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","jsxDEV","_jsxDEV","AdvancedTowerDefense","onAction","playerStats","setPlayerStats","currentUser","_s","canvasRef","gameLoopRef","stageMaps","x","y","gameState","setGameState","stage","wave","lives","gold","score","experience","playerLevel","waveProgress","gameStatus","selectedTowerType","selectedTower","shopItems","currentMap","towers","setTowers","enemies","setEnemies","frameCount","setFrameCount","nextEnemySpawn","setNextEnemySpawn","towerTypes","archer","cost","damage","range","speed","color","cannon","magic","ice","lightning","stageEnemies","type","count","enemyTypes","goblin","health","reward","armor","orc","troll","dragon","demon_lord","ice_giant","fire_elemental","generateShopItems","id","name","description","effect","value","tower","prev","handleKeyDown","e","includes","key","toLowerCase","preventDefault","stopPropagation","startNextWave","upgradeTower","handleCanvasClick","canvas","current","rect","getBoundingClientRect","clientX","left","clientY","top","handleShopClick","clickedTower","find","distance","Math","sqrt","canPlaceTower","placeTower","forEach","item","index","itemY","purchaseShopItem","prevTowers","map","round","item_name","item_cost","remaining_gold","player_level","currentPath","point","towerConfig","newTower","Date","now","random","toString","substr","level","attackSpeed","lastAttack","kills","upgradeCost","tower_type","position_x","position_y","t","new_level","upgrade_cost","towers_count","length","spawnEnemy","stageConfig","enemyPool","config","i","push","enemyType","floor","enemyConfig","newEnemy","maxHealth","pathIndex","alive","isBoss","updateEnemies","enemy","currentTarget","dx","dy","livesLost","prevState","enemy_type","is_boss","lives_lost","remaining_lives","moveX","moveY","filter","updateTowers","enemiesInRange","target","reduce","best","actualDamage","max","prevEnemies","newHealth","killed","goldGain","expGain","boss_type","gold_gained","exp_gained","expNeeded","total_score","maxEnemies","currentEnemies","final_score","towers_built","cause","nextStage","total_towers","min","starting_gold","drawPath","ctx","strokeStyle","lineWidth","lineCap","lineJoin","beginPath","moveTo","slice","lineTo","stroke","drawTower","_gameState$selectedTo","isSelected","fillStyle","arc","PI","fill","fillRect","font","textAlign","symbols","fillText","setLineDash","drawEnemy","sizeMap","size","shadowColor","shadowBlur","barWidth","barHeight","healthPercent","drawUI","width","expPercent","height","towerButtons","unlocked","button","canAfford","toUpperCase","drawShop","draw","getContext","stageColors","gameLoop","requestAnimationFrame","cancelAnimationFrame","handleKeyPress","document","addEventListener","removeEventListener","style","display","flexDirection","alignItems","background","borderRadius","padding","border","children","ref","cursor","onClick","tabIndex","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","fontSize","maxWidth","_c","$RefreshReg$"],"sources":["/Users/jegaljin-u/workspace/thinking-guide/src/components/AdvancedTowerDefense.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\n\ninterface GameProps {\n  onAction: (eventType: string, data: any) => void;\n  isSimulating: boolean;\n  currentAction: string | null;\n  playerStats: any;\n  setPlayerStats: (stats: any) => void;\n  currentUser: any;\n}\n\ninterface Tower {\n  id: string;\n  x: number;\n  y: number;\n  type: 'archer' | 'cannon' | 'magic' | 'ice' | 'lightning';\n  level: number;\n  damage: number;\n  range: number;\n  attackSpeed: number;\n  lastAttack: number;\n  cost: number;\n  kills: number;\n  upgradeCost: number;\n}\n\ninterface Enemy {\n  id: string;\n  x: number;\n  y: number;\n  health: number;\n  maxHealth: number;\n  speed: number;\n  type: 'goblin' | 'orc' | 'troll' | 'dragon' | 'demon_lord' | 'ice_giant' | 'fire_elemental';\n  reward: number;\n  pathIndex: number;\n  alive: boolean;\n  isBoss: boolean;\n  armor: number;\n}\n\ninterface GameState {\n  stage: number;\n  wave: number;\n  lives: number;\n  gold: number;\n  score: number;\n  experience: number;\n  playerLevel: number;\n  waveProgress: number;\n  gameStatus: 'playing' | 'paused' | 'gameOver' | 'victory' | 'shop' | 'stageComplete';\n  selectedTowerType: Tower['type'] | null;\n  selectedTower: Tower | null;\n  shopItems: ShopItem[];\n  currentMap: number;\n}\n\ninterface ShopItem {\n  id: string;\n  name: string;\n  description: string;\n  cost: number;\n  type: 'upgrade' | 'power' | 'tower';\n  effect: any;\n}\n\nexport const AdvancedTowerDefense: React.FC<GameProps> = ({\n  onAction,\n  playerStats,\n  setPlayerStats,\n  currentUser\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const gameLoopRef = useRef<number>();\n  \n  // Different maps for each stage\n  const stageMaps = {\n    1: [ // Simple path\n      { x: 0, y: 200 }, { x: 150, y: 200 }, { x: 150, y: 100 }, \n      { x: 300, y: 100 }, { x: 300, y: 300 }, { x: 450, y: 300 }, \n      { x: 450, y: 150 }, { x: 600, y: 150 }\n    ],\n    2: [ // Zigzag path\n      { x: 0, y: 100 }, { x: 100, y: 100 }, { x: 100, y: 250 },\n      { x: 200, y: 250 }, { x: 200, y: 50 }, { x: 350, y: 50 },\n      { x: 350, y: 200 }, { x: 500, y: 200 }, { x: 500, y: 350 }, { x: 600, y: 350 }\n    ],\n    3: [ // Spiral path\n      { x: 0, y: 200 }, { x: 80, y: 200 }, { x: 80, y: 120 },\n      { x: 200, y: 120 }, { x: 200, y: 280 }, { x: 320, y: 280 },\n      { x: 320, y: 80 }, { x: 480, y: 80 }, { x: 480, y: 320 }, { x: 600, y: 320 }\n    ],\n    4: [ // Double path\n      { x: 0, y: 150 }, { x: 150, y: 150 }, { x: 150, y: 100 },\n      { x: 300, y: 100 }, { x: 300, y: 200 }, { x: 450, y: 200 }, { x: 600, y: 200 }\n    ],\n    5: [ // Boss arena\n      { x: 0, y: 200 }, { x: 100, y: 200 }, { x: 200, y: 200 },\n      { x: 300, y: 200 }, { x: 400, y: 200 }, { x: 500, y: 200 }, { x: 600, y: 200 }\n    ]\n  };\n\n  const [gameState, setGameState] = useState<GameState>({\n    stage: 1,\n    wave: 1,\n    lives: 20,\n    gold: 600,\n    score: 0,\n    experience: 0,\n    playerLevel: 1,\n    waveProgress: 0,\n    gameStatus: 'playing',\n    selectedTowerType: null,\n    selectedTower: null,\n    shopItems: [],\n    currentMap: 1,\n  });\n\n  const [towers, setTowers] = useState<Tower[]>([]);\n  const [enemies, setEnemies] = useState<Enemy[]>([]);\n  const [frameCount, setFrameCount] = useState(0);\n  const [nextEnemySpawn, setNextEnemySpawn] = useState(0);\n\n  // Enhanced tower types\n  const towerTypes = {\n    archer: { cost: 80, damage: 20, range: 120, speed: 25, color: '#8B4513' },\n    cannon: { cost: 150, damage: 50, range: 90, speed: 50, color: '#696969' },\n    magic: { cost: 220, damage: 35, range: 130, speed: 35, color: '#9400D3' },\n    ice: { cost: 180, damage: 15, range: 100, speed: 30, color: '#00BFFF' },\n    lightning: { cost: 300, damage: 80, range: 150, speed: 70, color: '#FFD700' }\n  };\n\n  // Stage-specific enemies\n  const stageEnemies = {\n    1: [{ type: 'goblin', count: 8 }],\n    2: [{ type: 'goblin', count: 6 }, { type: 'orc', count: 4 }],\n    3: [{ type: 'orc', count: 5 }, { type: 'troll', count: 3 }],\n    4: [{ type: 'troll', count: 4 }, { type: 'dragon', count: 2 }],\n    5: [{ type: 'dragon', count: 3 }, { type: 'demon_lord', count: 1 }] // Boss stage\n  };\n\n  const enemyTypes = {\n    goblin: { health: 60, speed: 2.5, reward: 12, color: '#228B22', armor: 0 },\n    orc: { health: 120, speed: 2, reward: 20, color: '#8B4513', armor: 2 },\n    troll: { health: 250, speed: 1.5, reward: 35, color: '#2F4F4F', armor: 5 },\n    dragon: { health: 400, speed: 1.2, reward: 60, color: '#DC143C', armor: 8 },\n    demon_lord: { health: 1000, speed: 0.8, reward: 200, color: '#8B0000', armor: 15 }, // Boss\n    ice_giant: { health: 600, speed: 1, reward: 80, color: '#4682B4', armor: 10 },\n    fire_elemental: { health: 300, speed: 2.2, reward: 45, color: '#FF4500', armor: 3 }\n  };\n\n  // Generate shop items\n  const generateShopItems = (): ShopItem[] => {\n    return [\n      {\n        id: 'damage_boost',\n        name: '공격력 강화',\n        description: '모든 타워 데미지 +20%',\n        cost: 200,\n        type: 'upgrade',\n        effect: { type: 'damage', value: 1.2 }\n      },\n      {\n        id: 'range_boost',\n        name: '사거리 확장',\n        description: '모든 타워 사거리 +25%',\n        cost: 180,\n        type: 'upgrade',\n        effect: { type: 'range', value: 1.25 }\n      },\n      {\n        id: 'gold_boost',\n        name: '골드 배율',\n        description: '적 처치 골드 +50%',\n        cost: 150,\n        type: 'power',\n        effect: { type: 'gold_multiplier', value: 1.5 }\n      },\n      {\n        id: 'lightning_tower',\n        name: '라이트닝 타워',\n        description: '강력한 전기 공격',\n        cost: 300,\n        type: 'tower',\n        effect: { type: 'unlock_tower', tower: 'lightning' }\n      }\n    ];\n  };\n\n  // Initialize shop\n  useEffect(() => {\n    setGameState(prev => ({ ...prev, shopItems: generateShopItems() }));\n  }, []);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (['1', '2', '3', '4', '5', ' ', 'Enter', 'Escape', 's', 'u'].includes(e.key.toLowerCase())) {\n      e.preventDefault();\n      e.stopPropagation();\n      \n      switch(e.key.toLowerCase()) {\n        case '1':\n          setGameState(prev => ({ ...prev, selectedTowerType: 'archer', selectedTower: null }));\n          break;\n        case '2':\n          setGameState(prev => ({ ...prev, selectedTowerType: 'cannon', selectedTower: null }));\n          break;\n        case '3':\n          setGameState(prev => ({ ...prev, selectedTowerType: 'magic', selectedTower: null }));\n          break;\n        case '4':\n          setGameState(prev => ({ ...prev, selectedTowerType: 'ice', selectedTower: null }));\n          break;\n        case '5':\n          if (gameState.playerLevel >= 3) {\n            setGameState(prev => ({ ...prev, selectedTowerType: 'lightning', selectedTower: null }));\n          }\n          break;\n        case ' ':\n          if (gameState.gameStatus === 'playing') {\n            startNextWave();\n          }\n          break;\n        case 's':\n          if (gameState.gameStatus === 'stageComplete') {\n            setGameState(prev => ({ ...prev, gameStatus: 'shop' }));\n          }\n          break;\n        case 'u':\n          if (gameState.selectedTower) {\n            upgradeTower(gameState.selectedTower);\n          }\n          break;\n        case 'escape':\n          setGameState(prev => ({ \n            ...prev, \n            selectedTowerType: null, \n            selectedTower: null,\n            gameStatus: gameState.gameStatus === 'shop' ? 'playing' : prev.gameStatus\n          }));\n          break;\n      }\n    }\n  }, [gameState.playerLevel, gameState.gameStatus, gameState.selectedTower]);\n\n  const handleCanvasClick = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    // Check if clicking on shop items\n    if (gameState.gameStatus === 'shop') {\n      handleShopClick(x, y);\n      return;\n    }\n\n    // Check if clicking on existing tower\n    const clickedTower = towers.find(tower => {\n      const distance = Math.sqrt((x - tower.x) ** 2 + (y - tower.y) ** 2);\n      return distance < 25;\n    });\n\n    if (clickedTower) {\n      setGameState(prev => ({ ...prev, selectedTower: clickedTower, selectedTowerType: null }));\n      return;\n    }\n\n    // Place new tower\n    if (gameState.selectedTowerType && canPlaceTower(x, y)) {\n      placeTower(x, y, gameState.selectedTowerType);\n    }\n  }, [gameState.gameStatus, gameState.selectedTowerType, towers]);\n\n  const handleShopClick = (x: number, y: number) => {\n    gameState.shopItems.forEach((item, index) => {\n      const itemY = 100 + index * 60;\n      if (x >= 50 && x <= 550 && y >= itemY && y <= itemY + 50) {\n        purchaseShopItem(item);\n      }\n    });\n  };\n\n  const purchaseShopItem = (item: ShopItem) => {\n    if (gameState.gold < item.cost) return;\n\n    setGameState(prev => ({ ...prev, gold: prev.gold - item.cost }));\n    \n    // Apply item effect\n    switch (item.effect.type) {\n      case 'damage':\n        setTowers(prevTowers => prevTowers.map(tower => ({\n          ...tower,\n          damage: Math.round(tower.damage * item.effect.value)\n        })));\n        break;\n      case 'range':\n        setTowers(prevTowers => prevTowers.map(tower => ({\n          ...tower,\n          range: Math.round(tower.range * item.effect.value)\n        })));\n        break;\n    }\n\n    onAction('shop_purchase', {\n      item_name: item.name,\n      item_cost: item.cost,\n      remaining_gold: gameState.gold - item.cost,\n      stage: gameState.stage,\n      player_level: gameState.playerLevel\n    });\n  };\n\n  const canPlaceTower = (x: number, y: number): boolean => {\n    const currentPath = stageMaps[gameState.currentMap as keyof typeof stageMaps];\n    \n    // Check distance from path\n    for (const point of currentPath) {\n      const distance = Math.sqrt((x - point.x) ** 2 + (y - point.y) ** 2);\n      if (distance < 45) return false;\n    }\n\n    // Check distance from other towers\n    for (const tower of towers) {\n      const distance = Math.sqrt((x - tower.x) ** 2 + (y - tower.y) ** 2);\n      if (distance < 60) return false;\n    }\n\n    return x > 30 && x < 570 && y > 70 && y < 330;\n  };\n\n  const placeTower = (x: number, y: number, type: Tower['type']) => {\n    const towerConfig = towerTypes[type];\n    \n    if (gameState.gold < towerConfig.cost) return;\n\n    const newTower: Tower = {\n      id: `tower_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      x, y, type,\n      level: 1,\n      damage: towerConfig.damage,\n      range: towerConfig.range,\n      attackSpeed: towerConfig.speed,\n      lastAttack: 0,\n      cost: towerConfig.cost,\n      kills: 0,\n      upgradeCost: Math.round(towerConfig.cost * 0.6),\n    };\n\n    setTowers(prev => [...prev, newTower]);\n    setGameState(prev => ({ \n      ...prev, \n      gold: prev.gold - towerConfig.cost,\n      selectedTowerType: null \n    }));\n\n    // Only log tower placement - key strategic decision\n    onAction('tower_placed', {\n      tower_type: type,\n      position_x: x,\n      position_y: y,\n      cost: towerConfig.cost,\n      remaining_gold: gameState.gold - towerConfig.cost,\n      stage: gameState.stage,\n      wave: gameState.wave\n    });\n  };\n\n  const upgradeTower = (tower: Tower) => {\n    if (gameState.gold < tower.upgradeCost) return;\n\n    setTowers(prevTowers => prevTowers.map(t => \n      t.id === tower.id ? {\n        ...t,\n        level: t.level + 1,\n        damage: Math.round(t.damage * 1.4),\n        range: Math.round(t.range * 1.1),\n        upgradeCost: Math.round(t.upgradeCost * 1.5)\n      } : t\n    ));\n\n    setGameState(prev => ({ \n      ...prev, \n      gold: prev.gold - tower.upgradeCost,\n      selectedTower: null \n    }));\n\n    onAction('tower_upgraded', {\n      tower_type: tower.type,\n      new_level: tower.level + 1,\n      upgrade_cost: tower.upgradeCost,\n      stage: gameState.stage\n    });\n  };\n\n  const startNextWave = () => {\n    if (gameState.waveProgress > 0) return;\n\n    setGameState(prev => ({ ...prev, waveProgress: 1 }));\n    setNextEnemySpawn(frameCount + 60);\n\n    // Log wave start - key gameplay event\n    onAction('wave_started', {\n      stage: gameState.stage,\n      wave: gameState.wave,\n      player_level: gameState.playerLevel,\n      towers_count: towers.length,\n      gold: gameState.gold\n    });\n  };\n\n  const spawnEnemy = () => {\n    const stageConfig = stageEnemies[gameState.stage as keyof typeof stageEnemies];\n    if (!stageConfig) return;\n\n    const enemyPool: string[] = [];\n    stageConfig.forEach(config => {\n      for (let i = 0; i < config.count; i++) {\n        enemyPool.push(config.type);\n      }\n    });\n\n    const enemyType = enemyPool[Math.floor(Math.random() * enemyPool.length)] as Enemy['type'];\n    const enemyConfig = enemyTypes[enemyType];\n    const currentPath = stageMaps[gameState.currentMap as keyof typeof stageMaps];\n\n    const newEnemy: Enemy = {\n      id: `enemy_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      x: currentPath[0].x,\n      y: currentPath[0].y,\n      health: enemyConfig.health + (gameState.stage - 1) * 30,\n      maxHealth: enemyConfig.health + (gameState.stage - 1) * 30,\n      speed: enemyConfig.speed,\n      type: enemyType,\n      reward: enemyConfig.reward + gameState.stage * 3,\n      pathIndex: 0,\n      alive: true,\n      isBoss: enemyType === 'demon_lord',\n      armor: enemyConfig.armor,\n    };\n\n    setEnemies(prev => [...prev, newEnemy]);\n  };\n\n  const updateEnemies = useCallback(() => {\n    const currentPath = stageMaps[gameState.currentMap as keyof typeof stageMaps];\n    \n    setEnemies(prev => prev.map(enemy => {\n      if (!enemy.alive) return enemy;\n\n      const currentTarget = currentPath[enemy.pathIndex + 1];\n      if (currentTarget) {\n        const dx = currentTarget.x - enemy.x;\n        const dy = currentTarget.y - enemy.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        if (distance < 5) {\n          enemy.pathIndex++;\n          if (enemy.pathIndex >= currentPath.length - 1) {\n            // Enemy reached end - critical event\n            const livesLost = enemy.isBoss ? 5 : 1;\n            setGameState(prevState => ({ \n              ...prevState, \n              lives: prevState.lives - livesLost \n            }));\n\n            onAction('life_lost', {\n              enemy_type: enemy.type,\n              is_boss: enemy.isBoss,\n              lives_lost: livesLost,\n              remaining_lives: gameState.lives - livesLost,\n              stage: gameState.stage\n            });\n\n            return { ...enemy, alive: false };\n          }\n        } else {\n          const moveX = (dx / distance) * enemy.speed;\n          const moveY = (dy / distance) * enemy.speed;\n          enemy.x += moveX;\n          enemy.y += moveY;\n        }\n      }\n\n      return enemy;\n    }).filter(enemy => enemy.alive || enemy.pathIndex < currentPath.length - 1));\n  }, [gameState.currentMap, gameState.lives, gameState.stage, onAction]);\n\n  const updateTowers = useCallback(() => {\n    towers.forEach(tower => {\n      if (frameCount - tower.lastAttack < tower.attackSpeed) return;\n\n      const enemiesInRange = enemies.filter(enemy => {\n        if (!enemy.alive) return false;\n        const distance = Math.sqrt((enemy.x - tower.x) ** 2 + (enemy.y - tower.y) ** 2);\n        return distance <= tower.range;\n      });\n\n      if (enemiesInRange.length > 0) {\n        const target = enemiesInRange.reduce((best, current) => \n          current.pathIndex > best.pathIndex ? current : best\n        );\n\n        const actualDamage = Math.max(1, tower.damage - target.armor);\n        \n        setEnemies(prevEnemies => prevEnemies.map(enemy => {\n          if (enemy.id === target.id) {\n            const newHealth = Math.max(0, enemy.health - actualDamage);\n            const killed = newHealth <= 0;\n\n            if (killed) {\n              const goldGain = enemy.reward;\n              const expGain = enemy.isBoss ? 100 : 15;\n              \n              setGameState(prevState => ({ \n                ...prevState, \n                gold: prevState.gold + goldGain,\n                score: prevState.score + goldGain * 10,\n                experience: prevState.experience + expGain\n              }));\n\n              setTowers(prevTowers => prevTowers.map(t => \n                t.id === tower.id ? { ...t, kills: t.kills + 1 } : t\n              ));\n\n              // Only log boss defeats - significant events\n              if (enemy.isBoss) {\n                onAction('boss_defeated', {\n                  boss_type: enemy.type,\n                  stage: gameState.stage,\n                  gold_gained: goldGain,\n                  exp_gained: expGain\n                });\n              }\n\n              return { ...enemy, health: 0, alive: false };\n            }\n\n            return { ...enemy, health: newHealth };\n          }\n          return enemy;\n        }));\n\n        tower.lastAttack = frameCount;\n      }\n    });\n  }, [towers, enemies, frameCount, gameState.stage, onAction]);\n\n  // Level up system\n  useEffect(() => {\n    const expNeeded = gameState.playerLevel * 100;\n    if (gameState.experience >= expNeeded) {\n      setGameState(prev => ({\n        ...prev,\n        playerLevel: prev.playerLevel + 1,\n        experience: prev.experience - expNeeded\n      }));\n\n      // Log level up - player progression event\n      onAction('level_up', {\n        new_level: gameState.playerLevel + 1,\n        stage: gameState.stage,\n        total_score: gameState.score\n      });\n    }\n  }, [gameState.experience, gameState.playerLevel, gameState.stage, gameState.score, onAction]);\n\n  // Wave and stage management\n  useEffect(() => {\n    if (gameState.waveProgress > 0 && frameCount >= nextEnemySpawn) {\n      const maxEnemies = 8 + gameState.stage * 2;\n      const currentEnemies = enemies.filter(e => e.alive).length;\n      \n      if (currentEnemies < maxEnemies) {\n        spawnEnemy();\n        setNextEnemySpawn(frameCount + Math.max(30, 80 - gameState.stage * 10));\n      } else if (enemies.filter(e => e.alive).length === 0) {\n        // Wave complete\n        if (gameState.wave >= 3) {\n          // Stage complete\n          setGameState(prev => ({ \n            ...prev, \n            gameStatus: 'stageComplete',\n            waveProgress: 0\n          }));\n\n          // Log stage victory - major milestone\n          onAction('stage_victory', {\n            stage: gameState.stage,\n            final_score: gameState.score,\n            player_level: gameState.playerLevel,\n            towers_built: towers.length\n          });\n        } else {\n          // Next wave\n          setGameState(prev => ({ \n            ...prev, \n            wave: prev.wave + 1, \n            waveProgress: 0,\n            gold: prev.gold + 50 + prev.stage * 20\n          }));\n        }\n      }\n    }\n  }, [frameCount, nextEnemySpawn, gameState, enemies, towers.length, onAction]);\n\n  // Game over check\n  useEffect(() => {\n    if (gameState.lives <= 0) {\n      setGameState(prev => ({ ...prev, gameStatus: 'gameOver' }));\n      \n      // Log game over - critical failure event\n      onAction('stage_defeat', {\n        stage: gameState.stage,\n        wave: gameState.wave,\n        final_score: gameState.score,\n        player_level: gameState.playerLevel,\n        cause: 'lives_depleted'\n      });\n    }\n  }, [gameState.lives, gameState.stage, gameState.wave, gameState.score, gameState.playerLevel, onAction]);\n\n  const nextStage = () => {\n    if (gameState.stage >= 5) {\n      setGameState(prev => ({ ...prev, gameStatus: 'victory' }));\n      \n      onAction('game_victory', {\n        final_score: gameState.score,\n        player_level: gameState.playerLevel,\n        total_towers: towers.length\n      });\n      return;\n    }\n\n    setGameState(prev => ({\n      ...prev,\n      stage: prev.stage + 1,\n      wave: 1,\n      currentMap: prev.stage + 1,\n      gameStatus: 'playing',\n      gold: prev.gold + 100,\n      lives: Math.min(20, prev.lives + 2)\n    }));\n\n    setEnemies([]);\n    setTowers([]);\n\n    // Log stage start - new chapter begins\n    onAction('stage_started', {\n      stage: gameState.stage + 1,\n      player_level: gameState.playerLevel,\n      starting_gold: gameState.gold + 100\n    });\n  };\n\n  // Drawing functions\n  const drawPath = (ctx: CanvasRenderingContext2D) => {\n    const currentPath = stageMaps[gameState.currentMap as keyof typeof stageMaps];\n    \n    ctx.strokeStyle = '#8B4513';\n    ctx.lineWidth = 25;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    \n    ctx.beginPath();\n    ctx.moveTo(currentPath[0].x, currentPath[0].y);\n    currentPath.slice(1).forEach(point => {\n      ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n\n    ctx.strokeStyle = '#DEB887';\n    ctx.lineWidth = 15;\n    ctx.beginPath();\n    ctx.moveTo(currentPath[0].x, currentPath[0].y);\n    currentPath.slice(1).forEach(point => {\n      ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n  };\n\n  const drawTower = (ctx: CanvasRenderingContext2D, tower: Tower) => {\n    const config = towerTypes[tower.type];\n    const isSelected = gameState.selectedTower?.id === tower.id;\n    \n    // Tower base\n    ctx.fillStyle = isSelected ? '#FFD700' : '#696969';\n    ctx.beginPath();\n    ctx.arc(tower.x, tower.y, 22, 0, 2 * Math.PI);\n    ctx.fill();\n\n    // Tower body\n    ctx.fillStyle = config.color;\n    ctx.beginPath();\n    ctx.arc(tower.x, tower.y, 18, 0, 2 * Math.PI);\n    ctx.fill();\n\n    // Level indicator\n    for (let i = 0; i < tower.level; i++) {\n      ctx.fillStyle = '#FFD700';\n      ctx.fillRect(tower.x - 15 + i * 6, tower.y - 25, 4, 4);\n    }\n\n    // Tower icon\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'center';\n    \n    const symbols = { \n      archer: '🏹', cannon: '💣', magic: '✨', \n      ice: '❄️', lightning: '⚡' \n    };\n    ctx.fillText(symbols[tower.type], tower.x, tower.y + 4);\n\n    // Range for selected tower\n    if (isSelected) {\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n      ctx.lineWidth = 2;\n      ctx.setLineDash([5, 5]);\n      ctx.beginPath();\n      ctx.arc(tower.x, tower.y, tower.range, 0, 2 * Math.PI);\n      ctx.stroke();\n      ctx.setLineDash([]);\n\n      // Upgrade info\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '12px Arial';\n      ctx.fillText(`Lv.${tower.level}`, tower.x, tower.y - 35);\n      ctx.fillText(`$${tower.upgradeCost}`, tower.x, tower.y - 50);\n    }\n\n    // Kill count\n    if (tower.kills > 0) {\n      ctx.fillStyle = '#FFD700';\n      ctx.font = '10px Arial';\n      ctx.fillText(tower.kills.toString(), tower.x + 20, tower.y - 20);\n    }\n  };\n\n  const drawEnemy = (ctx: CanvasRenderingContext2D, enemy: Enemy) => {\n    if (!enemy.alive) return;\n\n    const config = enemyTypes[enemy.type];\n    const sizeMap: Record<string, number> = { \n      goblin: 12, orc: 16, troll: 20, dragon: 24, \n      demon_lord: 30, ice_giant: 26, fire_elemental: 18 \n    };\n    const size = enemy.isBoss ? 30 : sizeMap[enemy.type] || 16;\n\n    // Boss glow effect\n    if (enemy.isBoss) {\n      ctx.shadowColor = '#FF0000';\n      ctx.shadowBlur = 20;\n    }\n\n    // Enemy body\n    ctx.fillStyle = config.color;\n    ctx.beginPath();\n    ctx.arc(enemy.x, enemy.y, size, 0, 2 * Math.PI);\n    ctx.fill();\n\n    ctx.shadowBlur = 0;\n\n    // Enemy icon\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = `${size}px Arial`;\n    ctx.textAlign = 'center';\n    \n    const symbols = { \n      goblin: '👹', orc: '🗡️', troll: '🏔️', \n      dragon: '🐉', demon_lord: '😈',\n      ice_giant: '🧊', fire_elemental: '🔥'\n    };\n    ctx.fillText(symbols[enemy.type], enemy.x, enemy.y + size/3);\n\n    // Health bar\n    const barWidth = size * 2.5;\n    const barHeight = 6;\n    const healthPercent = enemy.health / enemy.maxHealth;\n    \n    ctx.fillStyle = enemy.isBoss ? '#8B0000' : '#FF0000';\n    ctx.fillRect(enemy.x - barWidth/2, enemy.y - size - 15, barWidth, barHeight);\n    ctx.fillStyle = enemy.isBoss ? '#FFD700' : '#00FF00';\n    ctx.fillRect(enemy.x - barWidth/2, enemy.y - size - 15, barWidth * healthPercent, barHeight);\n\n    // Armor indicator\n    if (enemy.armor > 0) {\n      ctx.fillStyle = '#C0C0C0';\n      ctx.font = '8px Arial';\n      ctx.fillText(`⚔${enemy.armor}`, enemy.x, enemy.y + size + 12);\n    }\n  };\n\n  const drawUI = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    // Top status bar\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    ctx.fillRect(0, 0, canvas.width, 60);\n    \n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '16px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`Stage: ${gameState.stage}`, 10, 25);\n    ctx.fillText(`Wave: ${gameState.wave}/3`, 10, 45);\n    ctx.fillText(`Lives: ${gameState.lives}`, 120, 25);\n    ctx.fillText(`Gold: ${gameState.gold}`, 120, 45);\n    ctx.fillText(`Level: ${gameState.playerLevel}`, 220, 25);\n    ctx.fillText(`Score: ${gameState.score}`, 220, 45);\n\n    // Experience bar\n    const expNeeded = gameState.playerLevel * 100;\n    const expPercent = gameState.experience / expNeeded;\n    ctx.fillStyle = '#8B4513';\n    ctx.fillRect(320, 35, 200, 8);\n    ctx.fillStyle = '#FFD700';\n    ctx.fillRect(320, 35, 200 * expPercent, 8);\n\n    // Tower selection panel\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n    ctx.fillRect(0, canvas.height - 90, canvas.width, 90);\n\n    const towerButtons = [\n      { type: 'archer', x: 60, key: '1', unlocked: true },\n      { type: 'cannon', x: 140, key: '2', unlocked: true },\n      { type: 'magic', x: 220, key: '3', unlocked: true },\n      { type: 'ice', x: 300, key: '4', unlocked: true },\n      { type: 'lightning', x: 380, key: '5', unlocked: gameState.playerLevel >= 3 }\n    ];\n\n    towerButtons.forEach(button => {\n      if (!button.unlocked) return;\n      \n      const config = towerTypes[button.type as keyof typeof towerTypes];\n      const isSelected = gameState.selectedTowerType === button.type;\n      const canAfford = gameState.gold >= config.cost;\n\n      ctx.fillStyle = isSelected ? 'rgba(255, 255, 0, 0.5)' : \n                     canAfford ? 'rgba(255, 255, 255, 0.2)' : 'rgba(255, 0, 0, 0.2)';\n      ctx.fillRect(button.x - 30, canvas.height - 80, 60, 70);\n\n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(button.x, canvas.height - 60, 15, 0, 2 * Math.PI);\n      ctx.fill();\n\n      ctx.fillStyle = canAfford ? '#FFFFFF' : '#FF6666';\n      ctx.font = '12px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(`${button.key}: $${config.cost}`, button.x, canvas.height - 25);\n    });\n\n    // Instructions\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'right';\n    ctx.fillText('SPACE: Next Wave', canvas.width - 10, canvas.height - 65);\n    ctx.fillText('U: Upgrade Tower', canvas.width - 10, canvas.height - 45);\n    ctx.fillText('S: Shop (after stage)', canvas.width - 10, canvas.height - 25);\n    ctx.fillText('ESC: Cancel', canvas.width - 10, canvas.height - 5);\n\n    // Selected tower info\n    if (gameState.selectedTower) {\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n      ctx.fillRect(canvas.width - 200, 70, 190, 100);\n      \n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '14px Arial';\n      ctx.textAlign = 'left';\n      const tower = gameState.selectedTower;\n      ctx.fillText(`${tower.type.toUpperCase()} Lv.${tower.level}`, canvas.width - 190, 90);\n      ctx.fillText(`Damage: ${tower.damage}`, canvas.width - 190, 110);\n      ctx.fillText(`Range: ${tower.range}`, canvas.width - 190, 130);\n      ctx.fillText(`Kills: ${tower.kills}`, canvas.width - 190, 150);\n      ctx.fillText(`Upgrade: $${tower.upgradeCost}`, canvas.width - 190, 170);\n    }\n\n    // Game status overlays\n    if (gameState.gameStatus === 'stageComplete') {\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      ctx.fillStyle = '#00FF00';\n      ctx.font = '32px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('STAGE COMPLETE!', canvas.width / 2, canvas.height / 2 - 40);\n      \n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '18px Arial';\n      ctx.fillText('Press S for Shop, ENTER for Next Stage', canvas.width / 2, canvas.height / 2 + 20);\n    }\n\n    if (gameState.gameStatus === 'shop') {\n      drawShop(ctx, canvas);\n    }\n\n    if (gameState.gameStatus === 'gameOver') {\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      ctx.fillStyle = '#FF0000';\n      ctx.font = '32px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('GAME OVER', canvas.width / 2, canvas.height / 2 - 50);\n      \n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '18px Arial';\n      ctx.fillText(`Stage Reached: ${gameState.stage}`, canvas.width / 2, canvas.height / 2);\n      ctx.fillText(`Final Score: ${gameState.score}`, canvas.width / 2, canvas.height / 2 + 30);\n    }\n\n    if (gameState.gameStatus === 'victory') {\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      ctx.fillStyle = '#FFD700';\n      ctx.font = '32px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('VICTORY!', canvas.width / 2, canvas.height / 2 - 50);\n      \n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '18px Arial';\n      ctx.fillText('All stages conquered!', canvas.width / 2, canvas.height / 2);\n      ctx.fillText(`Final Score: ${gameState.score}`, canvas.width / 2, canvas.height / 2 + 30);\n    }\n  };\n\n  const drawShop = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    \n    ctx.fillStyle = '#FFD700';\n    ctx.font = '24px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('🛒 SHOP', canvas.width / 2, 50);\n\n    gameState.shopItems.forEach((item, index) => {\n      const y = 100 + index * 60;\n      const canAfford = gameState.gold >= item.cost;\n      \n      ctx.fillStyle = canAfford ? 'rgba(255, 255, 255, 0.1)' : 'rgba(255, 0, 0, 0.1)';\n      ctx.fillRect(50, y, 500, 50);\n      \n      ctx.fillStyle = canAfford ? '#FFFFFF' : '#999999';\n      ctx.font = '16px Arial';\n      ctx.textAlign = 'left';\n      ctx.fillText(item.name, 60, y + 20);\n      ctx.font = '12px Arial';\n      ctx.fillText(item.description, 60, y + 35);\n      \n      ctx.textAlign = 'right';\n      ctx.font = '16px Arial';\n      ctx.fillText(`$${item.cost}`, 540, y + 25);\n    });\n\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '16px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('Click items to purchase, ESC to close', canvas.width / 2, canvas.height - 30);\n  };\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Stage-specific backgrounds\n    const stageColors = {\n      1: '#1a4c2e', 2: '#2d2d2d', 3: '#1a1a3a', \n      4: '#3a1a1a', 5: '#0f0f0f'\n    };\n    ctx.fillStyle = stageColors[gameState.stage as keyof typeof stageColors] || '#1a4c2e';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    if (gameState.gameStatus !== 'shop') {\n      drawPath(ctx);\n      towers.forEach(tower => drawTower(ctx, tower));\n      enemies.forEach(enemy => drawEnemy(ctx, enemy));\n    }\n    \n    drawUI(ctx, canvas);\n  }, [towers, enemies, gameState]);\n\n  // Game loop\n  useEffect(() => {\n    const gameLoop = () => {\n      if (gameState.gameStatus === 'playing') {\n        updateEnemies();\n        updateTowers();\n      }\n      draw();\n      setFrameCount(prev => prev + 1);\n      gameLoopRef.current = requestAnimationFrame(gameLoop);\n    };\n\n    gameLoopRef.current = requestAnimationFrame(gameLoop);\n\n    return () => {\n      if (gameLoopRef.current) {\n        cancelAnimationFrame(gameLoopRef.current);\n      }\n    };\n  }, [updateEnemies, updateTowers, draw, gameState.gameStatus]);\n\n  // Event listeners\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' && gameState.gameStatus === 'stageComplete') {\n        nextStage();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keydown', handleKeyPress);\n    \n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [handleKeyDown, gameState.gameStatus]);\n\n  return (\n    <div style={{ \n      display: 'flex', \n      flexDirection: 'column', \n      alignItems: 'center',\n      background: '#0f1419',\n      borderRadius: '12px',\n      padding: '16px',\n      border: '2px solid #2d3748',\n    }}>\n      <canvas\n        ref={canvasRef}\n        width={600}\n        height={400}\n        style={{\n          border: '2px solid #4a5568',\n          borderRadius: '8px',\n          cursor: gameState.selectedTowerType ? 'crosshair' : 'default',\n        }}\n        onClick={handleCanvasClick}\n        tabIndex={0}\n      />\n      \n      <div style={{\n        marginTop: '12px',\n        color: '#ffffff',\n        fontSize: '14px',\n        textAlign: 'center',\n        maxWidth: '600px',\n      }}>\n        <p>🏰 <strong>Advanced Tower Defense</strong> - 5 stages, boss battles, upgrades & shop!</p>\n        <p>Stage {gameState.stage}/5 | Level {gameState.playerLevel} | Score: {gameState.score}</p>\n      </div>\n    </div>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}