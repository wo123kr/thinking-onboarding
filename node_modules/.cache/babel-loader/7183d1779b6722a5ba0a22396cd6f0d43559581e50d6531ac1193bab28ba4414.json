{"ast":null,"code":"var _jsxFileName = \"/Users/jegaljin-u/workspace/thinking-guide/src/components/MMORPGGame.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MMORPGGame = ({\n  onAction,\n  playerStats,\n  setPlayerStats,\n  currentUser\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const gameLoopRef = useRef();\n  const [frameCount, setFrameCount] = useState(0);\n\n  // Game state\n  const [gameState, setGameState] = useState({\n    currentScene: 'characterSelect',\n    selectedCharacter: null,\n    worldMap: {\n      width: 2000,\n      height: 1500,\n      zones: []\n    },\n    camera: {\n      x: 0,\n      y: 0\n    },\n    chatMessages: [],\n    party: null,\n    guild: null,\n    selectedNPC: null,\n    activeQuests: [],\n    inventory: []\n  });\n\n  // Online players simulation\n  const [onlinePlayers, setOnlinePlayers] = useState([]);\n\n  // Character classes\n  const characterClasses = {\n    Warrior: {\n      icon: '⚔️',\n      color: '#FF4444',\n      baseStats: {\n        health: 150,\n        mana: 50,\n        attack: 20,\n        defense: 15\n      },\n      description: '근접 전투의 전문가, 높은 체력과 방어력'\n    },\n    Mage: {\n      icon: '🔮',\n      color: '#4444FF',\n      baseStats: {\n        health: 80,\n        mana: 120,\n        attack: 25,\n        defense: 8\n      },\n      description: '강력한 마법 공격, 높은 마나'\n    },\n    Archer: {\n      icon: '🏹',\n      color: '#44FF44',\n      baseStats: {\n        health: 100,\n        mana: 80,\n        attack: 22,\n        defense: 12\n      },\n      description: '원거리 공격 전문, 균형잡힌 능력치'\n    },\n    Healer: {\n      icon: '✨',\n      color: '#FFFF44',\n      baseStats: {\n        health: 120,\n        mana: 100,\n        attack: 15,\n        defense: 10\n      },\n      description: '치유와 보조 마법의 전문가'\n    }\n  };\n\n  // World zones\n  const worldZones = [{\n    id: 'starter_village',\n    name: '시작 마을',\n    x: 100,\n    y: 100,\n    width: 400,\n    height: 300,\n    level: 1,\n    type: 'peaceful',\n    background: '#90EE90',\n    npcs: [{\n      id: 'village_elder',\n      name: '마을 촌장',\n      type: 'questGiver',\n      x: 200,\n      y: 200,\n      dialogue: ['안녕하신가, 젊은 모험가여!', '우리 마을에 도움이 필요하다네.'],\n      quests: [{\n        id: 'first_quest',\n        title: '늑대 퇴치',\n        description: '마을 근처의 늑대 5마리를 처치하세요.',\n        objectives: [{\n          type: 'kill',\n          target: 'wolf',\n          amount: 5,\n          current: 0\n        }],\n        rewards: [{\n          type: 'exp',\n          amount: 100\n        }, {\n          type: 'gold',\n          amount: 50\n        }],\n        level: 1,\n        completed: false\n      }]\n    }, {\n      id: 'weapon_shop',\n      name: '무기 상인',\n      type: 'shop',\n      x: 150,\n      y: 180,\n      dialogue: ['최고 품질의 무기를 판매합니다!'],\n      shop: [{\n        id: 'iron_sword',\n        name: '철 검',\n        type: 'weapon',\n        rarity: 'common',\n        stats: {\n          attack: 15\n        },\n        price: 100,\n        level: 1\n      }, {\n        id: 'steel_bow',\n        name: '강철 활',\n        type: 'weapon',\n        rarity: 'common',\n        stats: {\n          attack: 12,\n          critChance: 10\n        },\n        price: 120,\n        level: 1\n      }]\n    }],\n    monsters: []\n  }, {\n    id: 'forest',\n    name: '어둠의 숲',\n    x: 600,\n    y: 100,\n    width: 500,\n    height: 400,\n    level: 2,\n    type: 'combat',\n    background: '#228B22',\n    npcs: [],\n    monsters: [{\n      id: 'wolf_1',\n      name: '늑대',\n      type: 'monster',\n      x: 700,\n      y: 200,\n      level: 2,\n      health: 60,\n      maxHealth: 60\n    }, {\n      id: 'wolf_2',\n      name: '늑대',\n      type: 'monster',\n      x: 800,\n      y: 300,\n      level: 2,\n      health: 60,\n      maxHealth: 60\n    }]\n  }, {\n    id: 'dungeon_entrance',\n    name: '던전 입구',\n    x: 400,\n    y: 500,\n    width: 200,\n    height: 200,\n    level: 5,\n    type: 'dungeon',\n    background: '#8B4513',\n    npcs: [{\n      id: 'dungeon_guard',\n      name: '던전 수호자',\n      type: 'guard',\n      x: 500,\n      y: 600,\n      dialogue: ['던전에 들어가려면 파티가 필요합니다.', '레벨 5 이상만 입장 가능합니다.']\n    }],\n    monsters: []\n  }, {\n    id: 'pvp_arena',\n    name: 'PvP 경기장',\n    x: 1000,\n    y: 500,\n    width: 300,\n    height: 300,\n    level: 10,\n    type: 'pvp',\n    background: '#DC143C',\n    npcs: [{\n      id: 'arena_master',\n      name: '경기장 관리인',\n      type: 'questGiver',\n      x: 1150,\n      y: 650,\n      dialogue: ['여기서 다른 플레이어와 대결할 수 있습니다!', 'PvP 랭킹을 올려보세요!']\n    }],\n    monsters: []\n  }];\n\n  // Initialize game\n  useEffect(() => {\n    setGameState(prev => ({\n      ...prev,\n      worldMap: {\n        ...prev.worldMap,\n        zones: worldZones\n      }\n    }));\n\n    // Simulate online players\n    const simulateOnlinePlayers = () => {\n      const playerNames = ['DragonSlayer', 'MagicMaster', 'ShadowArcher', 'HolyPriest', 'IronWarrior'];\n      const classes = ['Warrior', 'Mage', 'Archer', 'Healer'];\n      const players = playerNames.map((name, index) => ({\n        id: `player_${index}`,\n        name,\n        class: classes[index % classes.length],\n        level: Math.floor(Math.random() * 20) + 1,\n        experience: Math.floor(Math.random() * 1000),\n        health: 100,\n        maxHealth: 100,\n        mana: 50,\n        maxMana: 50,\n        x: Math.random() * 1500 + 200,\n        y: Math.random() * 1000 + 200,\n        gold: Math.floor(Math.random() * 1000),\n        equipment: {},\n        isOnline: Math.random() > 0.3,\n        lastSeen: new Date().toISOString()\n      }));\n      setOnlinePlayers(players);\n    };\n    simulateOnlinePlayers();\n    const interval = setInterval(simulateOnlinePlayers, 30000); // Update every 30 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Create character\n  const createCharacter = (name, selectedClass) => {\n    const classData = characterClasses[selectedClass];\n    const newCharacter = {\n      id: `${currentUser.user_id}_${Date.now()}`,\n      name,\n      class: selectedClass,\n      level: 1,\n      experience: 0,\n      health: classData.baseStats.health,\n      maxHealth: classData.baseStats.health,\n      mana: classData.baseStats.mana,\n      maxMana: classData.baseStats.mana,\n      x: 250,\n      // Start in village\n      y: 250,\n      gold: 100,\n      equipment: {},\n      isOnline: true,\n      lastSeen: new Date().toISOString()\n    };\n    setGameState(prev => ({\n      ...prev,\n      selectedCharacter: newCharacter,\n      currentScene: 'world',\n      camera: {\n        x: newCharacter.x - 300,\n        y: newCharacter.y - 200\n      }\n    }));\n    setPlayerStats(prev => ({\n      ...prev,\n      character: newCharacter\n    }));\n    onAction('character_created', {\n      player_id: currentUser.user_id,\n      character_name: name,\n      character_class: selectedClass,\n      starting_stats: classData.baseStats\n    });\n  };\n\n  // Movement\n  const moveCharacter = useCallback((dx, dy) => {\n    if (!gameState.selectedCharacter) return;\n    const newX = Math.max(0, Math.min(gameState.worldMap.width, gameState.selectedCharacter.x + dx));\n    const newY = Math.max(0, Math.min(gameState.worldMap.height, gameState.selectedCharacter.y + dy));\n    setGameState(prev => ({\n      ...prev,\n      selectedCharacter: prev.selectedCharacter ? {\n        ...prev.selectedCharacter,\n        x: newX,\n        y: newY\n      } : null,\n      camera: {\n        x: newX - 300,\n        y: newY - 200\n      }\n    }));\n\n    // Check for zone entry\n    const currentZone = worldZones.find(zone => newX >= zone.x && newX <= zone.x + zone.width && newY >= zone.y && newY <= zone.y + zone.height);\n    if (currentZone) {\n      onAction('zone_entered', {\n        player_id: currentUser.user_id,\n        zone_id: currentZone.id,\n        zone_name: currentZone.name,\n        zone_level: currentZone.level,\n        player_level: gameState.selectedCharacter.level\n      });\n    }\n  }, [gameState.selectedCharacter, gameState.worldMap, currentUser.user_id, onAction]);\n\n  // Keyboard handling\n  const handleKeyDown = useCallback(e => {\n    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'w', 'a', 's', 'd'].includes(e.key)) {\n      e.preventDefault();\n    }\n    if (gameState.currentScene === 'world' && gameState.selectedCharacter) {\n      const speed = 5;\n      switch (e.key.toLowerCase()) {\n        case 'arrowup':\n        case 'w':\n          moveCharacter(0, -speed);\n          break;\n        case 'arrowdown':\n        case 's':\n          moveCharacter(0, speed);\n          break;\n        case 'arrowleft':\n        case 'a':\n          moveCharacter(-speed, 0);\n          break;\n        case 'arrowright':\n        case 'd':\n          moveCharacter(speed, 0);\n          break;\n        case 'enter':\n          // Open chat\n          break;\n        case 'i':\n          setGameState(prev => ({\n            ...prev,\n            currentScene: 'inventory'\n          }));\n          break;\n        case 'escape':\n          setGameState(prev => ({\n            ...prev,\n            currentScene: 'world'\n          }));\n          break;\n      }\n    }\n  }, [gameState.currentScene, gameState.selectedCharacter, moveCharacter]);\n\n  // Chat system\n  const sendChatMessage = (message, channel = 'global') => {\n    if (!gameState.selectedCharacter) return;\n    const chatMessage = {\n      id: `msg_${Date.now()}`,\n      player: gameState.selectedCharacter.name,\n      message,\n      channel,\n      timestamp: Date.now()\n    };\n    setGameState(prev => ({\n      ...prev,\n      chatMessages: [...prev.chatMessages.slice(-49), chatMessage] // Keep last 50 messages\n    }));\n    onAction('chat_message_sent', {\n      player_id: currentUser.user_id,\n      player_name: gameState.selectedCharacter.name,\n      message,\n      channel\n    });\n  };\n\n  // Drawing functions\n  const drawCharacterSelect = (ctx, canvas) => {\n    // Background\n    ctx.fillStyle = '#2C1810';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Title\n    ctx.fillStyle = '#FFD700';\n    ctx.font = 'bold 32px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('🌟 MMO RPG - 캐릭터 생성', canvas.width / 2, 80);\n\n    // Class selection\n    const classes = Object.entries(characterClasses);\n    classes.forEach(([className, classData], index) => {\n      const x = 50 + index % 2 * 280;\n      const y = 150 + Math.floor(index / 2) * 120;\n\n      // Class card\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';\n      ctx.fillRect(x, y, 250, 100);\n      ctx.strokeStyle = classData.color;\n      ctx.lineWidth = 3;\n      ctx.strokeRect(x, y, 250, 100);\n\n      // Class info\n      ctx.fillStyle = classData.color;\n      ctx.font = 'bold 20px Arial';\n      ctx.textAlign = 'left';\n      ctx.fillText(`${classData.icon} ${className}`, x + 20, y + 30);\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '12px Arial';\n      ctx.fillText(classData.description, x + 20, y + 50);\n\n      // Stats\n      ctx.font = '10px Arial';\n      ctx.fillText(`HP: ${classData.baseStats.health} MP: ${classData.baseStats.mana}`, x + 20, y + 65);\n      ctx.fillText(`ATK: ${classData.baseStats.attack} DEF: ${classData.baseStats.defense}`, x + 20, y + 80);\n    });\n\n    // Instructions\n    ctx.fillStyle = '#CCCCCC';\n    ctx.font = '16px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('클릭해서 클래스를 선택하세요', canvas.width / 2, canvas.height - 30);\n  };\n  const drawWorld = (ctx, canvas) => {\n    if (!gameState.selectedCharacter) return;\n\n    // Camera offset\n    const offsetX = -gameState.camera.x;\n    const offsetY = -gameState.camera.y;\n\n    // Background\n    ctx.fillStyle = '#87CEEB';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw zones\n    gameState.worldMap.zones.forEach(zone => {\n      const zoneX = zone.x + offsetX;\n      const zoneY = zone.y + offsetY;\n\n      // Zone background\n      ctx.fillStyle = zone.background;\n      ctx.fillRect(zoneX, zoneY, zone.width, zone.height);\n\n      // Zone border\n      ctx.strokeStyle = '#000000';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(zoneX, zoneY, zone.width, zone.height);\n\n      // Zone name\n      ctx.fillStyle = '#000000';\n      ctx.font = 'bold 16px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(zone.name, zoneX + zone.width / 2, zoneY + 25);\n      ctx.fillText(`Lv.${zone.level}`, zoneX + zone.width / 2, zoneY + 45);\n\n      // NPCs\n      zone.npcs.forEach(npc => {\n        const npcX = npc.x + offsetX;\n        const npcY = npc.y + offsetY;\n\n        // NPC icon based on type\n        const npcIcons = {\n          questGiver: '❗',\n          shop: '🛒',\n          guard: '🛡️',\n          monster: '👹'\n        };\n        ctx.fillStyle = '#FFD700';\n        ctx.font = '20px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(npcIcons[npc.type], npcX, npcY);\n\n        // NPC name\n        ctx.fillStyle = '#000000';\n        ctx.font = '12px Arial';\n        ctx.fillText(npc.name, npcX, npcY + 25);\n      });\n\n      // Monsters\n      zone.monsters.forEach(monster => {\n        const monsterX = monster.x + offsetX;\n        const monsterY = monster.y + offsetY;\n        ctx.fillStyle = '#FF0000';\n        ctx.font = '16px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText('👹', monsterX, monsterY);\n\n        // Health bar\n        if (monster.health && monster.maxHealth) {\n          const healthPercent = monster.health / monster.maxHealth;\n          ctx.fillStyle = '#FF0000';\n          ctx.fillRect(monsterX - 15, monsterY - 25, 30, 4);\n          ctx.fillStyle = '#00FF00';\n          ctx.fillRect(monsterX - 15, monsterY - 25, 30 * healthPercent, 4);\n        }\n      });\n    });\n\n    // Draw online players\n    onlinePlayers.forEach(player => {\n      var _gameState$selectedCh;\n      if (!player.isOnline || player.id === ((_gameState$selectedCh = gameState.selectedCharacter) === null || _gameState$selectedCh === void 0 ? void 0 : _gameState$selectedCh.id)) return;\n      const playerX = player.x + offsetX;\n      const playerY = player.y + offsetY;\n\n      // Player character\n      const classData = characterClasses[player.class];\n      ctx.fillStyle = classData.color;\n      ctx.font = '20px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(classData.icon, playerX, playerY);\n\n      // Player name\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '12px Arial';\n      ctx.fillText(player.name, playerX, playerY + 25);\n      ctx.fillText(`Lv.${player.level}`, playerX, playerY + 38);\n    });\n\n    // Draw player character\n    const playerX = gameState.selectedCharacter.x + offsetX;\n    const playerY = gameState.selectedCharacter.y + offsetY;\n    const playerClass = characterClasses[gameState.selectedCharacter.class];\n\n    // Player glow effect\n    ctx.shadowColor = playerClass.color;\n    ctx.shadowBlur = 10;\n    ctx.fillStyle = playerClass.color;\n    ctx.font = '24px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(playerClass.icon, playerX, playerY);\n    ctx.shadowBlur = 0;\n\n    // Player name and level\n    ctx.fillStyle = '#FFFF00';\n    ctx.font = 'bold 14px Arial';\n    ctx.fillText(gameState.selectedCharacter.name, playerX, playerY + 30);\n    ctx.fillText(`Lv.${gameState.selectedCharacter.level}`, playerX, playerY + 45);\n\n    // Health and mana bars\n    const barWidth = 40;\n    // Health bar\n    ctx.fillStyle = '#FF0000';\n    ctx.fillRect(playerX - barWidth / 2, playerY - 35, barWidth, 4);\n    ctx.fillStyle = '#00FF00';\n    const healthPercent = gameState.selectedCharacter.health / gameState.selectedCharacter.maxHealth;\n    ctx.fillRect(playerX - barWidth / 2, playerY - 35, barWidth * healthPercent, 4);\n\n    // Mana bar\n    ctx.fillStyle = '#000080';\n    ctx.fillRect(playerX - barWidth / 2, playerY - 28, barWidth, 4);\n    ctx.fillStyle = '#0080FF';\n    const manaPercent = gameState.selectedCharacter.mana / gameState.selectedCharacter.maxMana;\n    ctx.fillRect(playerX - barWidth / 2, playerY - 28, barWidth * manaPercent, 4);\n\n    // UI Panel\n    drawUI(ctx, canvas);\n  };\n  const drawUI = (ctx, canvas) => {\n    if (!gameState.selectedCharacter) return;\n\n    // Bottom UI panel\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    ctx.fillRect(0, canvas.height - 120, canvas.width, 120);\n\n    // Player stats\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`${gameState.selectedCharacter.name} - Lv.${gameState.selectedCharacter.level}`, 20, canvas.height - 95);\n    ctx.fillText(`HP: ${gameState.selectedCharacter.health}/${gameState.selectedCharacter.maxHealth}`, 20, canvas.height - 75);\n    ctx.fillText(`MP: ${gameState.selectedCharacter.mana}/${gameState.selectedCharacter.maxMana}`, 20, canvas.height - 55);\n    ctx.fillText(`Gold: ${gameState.selectedCharacter.gold}`, 20, canvas.height - 35);\n    ctx.fillText(`EXP: ${gameState.selectedCharacter.experience}/${gameState.selectedCharacter.level * 100}`, 20, canvas.height - 15);\n\n    // Online players count\n    const onlineCount = onlinePlayers.filter(p => p.isOnline).length;\n    ctx.fillStyle = '#00FF00';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'right';\n    ctx.fillText(`🌐 Online: ${onlineCount} players`, canvas.width - 20, canvas.height - 95);\n\n    // Chat messages\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'left';\n    gameState.chatMessages.slice(-5).forEach((msg, index) => {\n      const channelColors = {\n        global: '#FFFFFF',\n        party: '#00FF00',\n        guild: '#FFD700',\n        whisper: '#FF69B4'\n      };\n      ctx.fillStyle = channelColors[msg.channel];\n      const y = canvas.height - 95 + index * 15;\n      ctx.fillText(`[${msg.channel.toUpperCase()}] ${msg.player}: ${msg.message}`, 200, y);\n    });\n\n    // Controls\n    ctx.fillStyle = '#CCCCCC';\n    ctx.font = '10px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('WASD: Move | I: Inventory | Enter: Chat | ESC: Menu', canvas.width / 2, canvas.height - 5);\n  };\n\n  // Click handling\n  const handleCanvasClick = useCallback(e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    if (gameState.currentScene === 'characterSelect') {\n      // Handle class selection\n      const classes = Object.keys(characterClasses);\n      classes.forEach((className, index) => {\n        const cardX = 50 + index % 2 * 280;\n        const cardY = 150 + Math.floor(index / 2) * 120;\n        if (x >= cardX && x <= cardX + 250 && y >= cardY && y <= cardY + 100) {\n          const characterName = `Hero_${Math.floor(Math.random() * 1000)}`;\n          createCharacter(characterName, className);\n        }\n      });\n    }\n  }, [gameState.currentScene]);\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    switch (gameState.currentScene) {\n      case 'characterSelect':\n        drawCharacterSelect(ctx, canvas);\n        break;\n      case 'world':\n        drawWorld(ctx, canvas);\n        break;\n    }\n  }, [gameState]);\n\n  // Game loop\n  useEffect(() => {\n    const gameLoop = () => {\n      draw();\n      setFrameCount(prev => prev + 1);\n      gameLoopRef.current = requestAnimationFrame(gameLoop);\n    };\n    gameLoopRef.current = requestAnimationFrame(gameLoop);\n    return () => {\n      if (gameLoopRef.current) {\n        cancelAnimationFrame(gameLoopRef.current);\n      }\n    };\n  }, [draw]);\n\n  // Event listeners\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      background: '#0a0a0a',\n      borderRadius: '12px',\n      padding: '16px',\n      border: '2px solid #2d3748',\n      maxHeight: '500px',\n      overflowY: 'auto',\n      overflowX: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 600,\n      height: 400,\n      style: {\n        border: '2px solid #4a5568',\n        borderRadius: '8px',\n        cursor: 'pointer',\n        maxWidth: '100%',\n        height: 'auto'\n      },\n      onClick: handleCanvasClick,\n      tabIndex: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 821,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '12px',\n        color: '#ffffff',\n        fontSize: '14px',\n        textAlign: 'center',\n        maxWidth: '600px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD83C\\uDF1F \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"MMO RPG Adventure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 843,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 843,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [gameState.currentScene === 'characterSelect' && '클래스를 선택해서 모험을 시작하세요!', gameState.currentScene === 'world' && 'WASD로 이동하며 다른 플레이어들과 함께 모험하세요!']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 844,\n        columnNumber: 9\n      }, this), gameState.selectedCharacter && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [gameState.selectedCharacter.name, \" | Level \", gameState.selectedCharacter.level, \" |\", characterClasses[gameState.selectedCharacter.class].icon, \" \", gameState.selectedCharacter.class]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 849,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 836,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 809,\n    columnNumber: 5\n  }, this);\n};\n_s(MMORPGGame, \"TVocfHS4mpsGmOYXB6XWTz78dR4=\");\n_c = MMORPGGame;\nvar _c;\n$RefreshReg$(_c, \"MMORPGGame\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","jsxDEV","_jsxDEV","MMORPGGame","onAction","playerStats","setPlayerStats","currentUser","_s","canvasRef","gameLoopRef","frameCount","setFrameCount","gameState","setGameState","currentScene","selectedCharacter","worldMap","width","height","zones","camera","x","y","chatMessages","party","guild","selectedNPC","activeQuests","inventory","onlinePlayers","setOnlinePlayers","characterClasses","Warrior","icon","color","baseStats","health","mana","attack","defense","description","Mage","Archer","Healer","worldZones","id","name","level","type","background","npcs","dialogue","quests","title","objectives","target","amount","current","rewards","completed","shop","rarity","stats","price","critChance","monsters","maxHealth","prev","simulateOnlinePlayers","playerNames","classes","players","map","index","class","length","Math","floor","random","experience","maxMana","gold","equipment","isOnline","lastSeen","Date","toISOString","interval","setInterval","clearInterval","createCharacter","selectedClass","classData","newCharacter","user_id","now","character","player_id","character_name","character_class","starting_stats","moveCharacter","dx","dy","newX","max","min","newY","currentZone","find","zone","zone_id","zone_name","zone_level","player_level","handleKeyDown","e","includes","key","preventDefault","speed","toLowerCase","sendChatMessage","message","channel","chatMessage","player","timestamp","slice","player_name","drawCharacterSelect","ctx","canvas","fillStyle","fillRect","font","textAlign","fillText","Object","entries","forEach","className","strokeStyle","lineWidth","strokeRect","drawWorld","offsetX","offsetY","zoneX","zoneY","npc","npcX","npcY","npcIcons","questGiver","guard","monster","monsterX","monsterY","healthPercent","_gameState$selectedCh","playerX","playerY","playerClass","shadowColor","shadowBlur","barWidth","manaPercent","drawUI","onlineCount","filter","p","msg","channelColors","global","whisper","toUpperCase","handleCanvasClick","rect","getBoundingClientRect","clientX","left","clientY","top","keys","cardX","cardY","characterName","draw","getContext","clearRect","gameLoop","requestAnimationFrame","cancelAnimationFrame","document","addEventListener","removeEventListener","style","display","flexDirection","alignItems","borderRadius","padding","border","maxHeight","overflowY","overflowX","children","ref","cursor","maxWidth","onClick","tabIndex","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","fontSize","_c","$RefreshReg$"],"sources":["/Users/jegaljin-u/workspace/thinking-guide/src/components/MMORPGGame.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\n\ninterface GameProps {\n  onAction: (eventType: string, data: any) => void;\n  isSimulating: boolean;\n  currentAction: string | null;\n  playerStats: any;\n  setPlayerStats: (stats: any) => void;\n  currentUser: any;\n}\n\ninterface Player {\n  id: string;\n  name: string;\n  class: 'Warrior' | 'Mage' | 'Archer' | 'Healer';\n  level: number;\n  experience: number;\n  health: number;\n  maxHealth: number;\n  mana: number;\n  maxMana: number;\n  x: number;\n  y: number;\n  gold: number;\n  equipment: Equipment;\n  guild?: string;\n  isOnline: boolean;\n  lastSeen: string;\n}\n\ninterface Equipment {\n  weapon?: Item;\n  armor?: Item;\n  accessory?: Item;\n}\n\ninterface Item {\n  id: string;\n  name: string;\n  type: 'weapon' | 'armor' | 'accessory' | 'consumable';\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  stats: {\n    attack?: number;\n    defense?: number;\n    health?: number;\n    mana?: number;\n    critChance?: number;\n  };\n  price: number;\n  level: number;\n}\n\ninterface NPC {\n  id: string;\n  name: string;\n  type: 'questGiver' | 'shop' | 'guard' | 'monster';\n  x: number;\n  y: number;\n  level?: number;\n  health?: number;\n  maxHealth?: number;\n  dialogue?: string[];\n  quests?: Quest[];\n  shop?: Item[];\n}\n\ninterface Quest {\n  id: string;\n  title: string;\n  description: string;\n  objectives: QuestObjective[];\n  rewards: QuestReward[];\n  level: number;\n  completed: boolean;\n}\n\ninterface QuestObjective {\n  type: 'kill' | 'collect' | 'talk' | 'reach';\n  target: string;\n  amount: number;\n  current: number;\n}\n\ninterface QuestReward {\n  type: 'exp' | 'gold' | 'item';\n  amount: number;\n  item?: Item;\n}\n\ninterface ChatMessage {\n  id: string;\n  player: string;\n  message: string;\n  channel: 'global' | 'party' | 'guild' | 'whisper';\n  timestamp: number;\n}\n\ninterface Party {\n  id: string;\n  leader: string;\n  members: string[];\n  maxMembers: number;\n}\n\ninterface Guild {\n  id: string;\n  name: string;\n  leader: string;\n  members: string[];\n  level: number;\n  experience: number;\n}\n\ninterface GameState {\n  currentScene: 'characterSelect' | 'world' | 'dungeon' | 'pvp' | 'shop' | 'guild' | 'inventory';\n  selectedCharacter: Player | null;\n  worldMap: {\n    width: number;\n    height: number;\n    zones: Zone[];\n  };\n  camera: { x: number; y: number };\n  chatMessages: ChatMessage[];\n  party: Party | null;\n  guild: Guild | null;\n  selectedNPC: NPC | null;\n  activeQuests: Quest[];\n  inventory: Item[];\n}\n\ninterface Zone {\n  id: string;\n  name: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  level: number;\n  type: 'peaceful' | 'combat' | 'dungeon' | 'pvp';\n  background: string;\n  npcs: NPC[];\n  monsters: NPC[];\n}\n\nexport const MMORPGGame: React.FC<GameProps> = ({\n  onAction,\n  playerStats,\n  setPlayerStats,\n  currentUser\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const gameLoopRef = useRef<number>();\n  const [frameCount, setFrameCount] = useState(0);\n\n  // Game state\n  const [gameState, setGameState] = useState<GameState>({\n    currentScene: 'characterSelect',\n    selectedCharacter: null,\n    worldMap: {\n      width: 2000,\n      height: 1500,\n      zones: []\n    },\n    camera: { x: 0, y: 0 },\n    chatMessages: [],\n    party: null,\n    guild: null,\n    selectedNPC: null,\n    activeQuests: [],\n    inventory: []\n  });\n\n  // Online players simulation\n  const [onlinePlayers, setOnlinePlayers] = useState<Player[]>([]);\n\n  // Character classes\n  const characterClasses = {\n    Warrior: {\n      icon: '⚔️',\n      color: '#FF4444',\n      baseStats: { health: 150, mana: 50, attack: 20, defense: 15 },\n      description: '근접 전투의 전문가, 높은 체력과 방어력'\n    },\n    Mage: {\n      icon: '🔮',\n      color: '#4444FF',\n      baseStats: { health: 80, mana: 120, attack: 25, defense: 8 },\n      description: '강력한 마법 공격, 높은 마나'\n    },\n    Archer: {\n      icon: '🏹',\n      color: '#44FF44',\n      baseStats: { health: 100, mana: 80, attack: 22, defense: 12 },\n      description: '원거리 공격 전문, 균형잡힌 능력치'\n    },\n    Healer: {\n      icon: '✨',\n      color: '#FFFF44',\n      baseStats: { health: 120, mana: 100, attack: 15, defense: 10 },\n      description: '치유와 보조 마법의 전문가'\n    }\n  };\n\n  // World zones\n  const worldZones: Zone[] = [\n    {\n      id: 'starter_village',\n      name: '시작 마을',\n      x: 100, y: 100, width: 400, height: 300,\n      level: 1, type: 'peaceful',\n      background: '#90EE90',\n      npcs: [\n        {\n          id: 'village_elder',\n          name: '마을 촌장',\n          type: 'questGiver',\n          x: 200, y: 200,\n          dialogue: ['안녕하신가, 젊은 모험가여!', '우리 마을에 도움이 필요하다네.'],\n          quests: [\n            {\n              id: 'first_quest',\n              title: '늑대 퇴치',\n              description: '마을 근처의 늑대 5마리를 처치하세요.',\n              objectives: [{ type: 'kill', target: 'wolf', amount: 5, current: 0 }],\n              rewards: [{ type: 'exp', amount: 100 }, { type: 'gold', amount: 50 }],\n              level: 1,\n              completed: false\n            }\n          ]\n        },\n        {\n          id: 'weapon_shop',\n          name: '무기 상인',\n          type: 'shop',\n          x: 150, y: 180,\n          dialogue: ['최고 품질의 무기를 판매합니다!'],\n          shop: [\n            {\n              id: 'iron_sword',\n              name: '철 검',\n              type: 'weapon',\n              rarity: 'common',\n              stats: { attack: 15 },\n              price: 100,\n              level: 1\n            },\n            {\n              id: 'steel_bow',\n              name: '강철 활',\n              type: 'weapon',\n              rarity: 'common',\n              stats: { attack: 12, critChance: 10 },\n              price: 120,\n              level: 1\n            }\n          ]\n        }\n      ],\n      monsters: []\n    },\n    {\n      id: 'forest',\n      name: '어둠의 숲',\n      x: 600, y: 100, width: 500, height: 400,\n      level: 2, type: 'combat',\n      background: '#228B22',\n      npcs: [],\n      monsters: [\n        {\n          id: 'wolf_1',\n          name: '늑대',\n          type: 'monster',\n          x: 700, y: 200,\n          level: 2,\n          health: 60,\n          maxHealth: 60\n        },\n        {\n          id: 'wolf_2',\n          name: '늑대',\n          type: 'monster',\n          x: 800, y: 300,\n          level: 2,\n          health: 60,\n          maxHealth: 60\n        }\n      ]\n    },\n    {\n      id: 'dungeon_entrance',\n      name: '던전 입구',\n      x: 400, y: 500, width: 200, height: 200,\n      level: 5, type: 'dungeon',\n      background: '#8B4513',\n      npcs: [\n        {\n          id: 'dungeon_guard',\n          name: '던전 수호자',\n          type: 'guard',\n          x: 500, y: 600,\n          dialogue: ['던전에 들어가려면 파티가 필요합니다.', '레벨 5 이상만 입장 가능합니다.']\n        }\n      ],\n      monsters: []\n    },\n    {\n      id: 'pvp_arena',\n      name: 'PvP 경기장',\n      x: 1000, y: 500, width: 300, height: 300,\n      level: 10, type: 'pvp',\n      background: '#DC143C',\n      npcs: [\n        {\n          id: 'arena_master',\n          name: '경기장 관리인',\n          type: 'questGiver',\n          x: 1150, y: 650,\n          dialogue: ['여기서 다른 플레이어와 대결할 수 있습니다!', 'PvP 랭킹을 올려보세요!']\n        }\n      ],\n      monsters: []\n    }\n  ];\n\n  // Initialize game\n  useEffect(() => {\n    setGameState(prev => ({\n      ...prev,\n      worldMap: { ...prev.worldMap, zones: worldZones }\n    }));\n\n    // Simulate online players\n    const simulateOnlinePlayers = () => {\n      const playerNames = ['DragonSlayer', 'MagicMaster', 'ShadowArcher', 'HolyPriest', 'IronWarrior'];\n      const classes: (keyof typeof characterClasses)[] = ['Warrior', 'Mage', 'Archer', 'Healer'];\n      \n      const players = playerNames.map((name, index) => ({\n        id: `player_${index}`,\n        name,\n        class: classes[index % classes.length],\n        level: Math.floor(Math.random() * 20) + 1,\n        experience: Math.floor(Math.random() * 1000),\n        health: 100,\n        maxHealth: 100,\n        mana: 50,\n        maxMana: 50,\n        x: Math.random() * 1500 + 200,\n        y: Math.random() * 1000 + 200,\n        gold: Math.floor(Math.random() * 1000),\n        equipment: {},\n        isOnline: Math.random() > 0.3,\n        lastSeen: new Date().toISOString()\n      }));\n\n      setOnlinePlayers(players);\n    };\n\n    simulateOnlinePlayers();\n    const interval = setInterval(simulateOnlinePlayers, 30000); // Update every 30 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Create character\n  const createCharacter = (name: string, selectedClass: keyof typeof characterClasses) => {\n    const classData = characterClasses[selectedClass];\n    const newCharacter: Player = {\n      id: `${currentUser.user_id}_${Date.now()}`,\n      name,\n      class: selectedClass,\n      level: 1,\n      experience: 0,\n      health: classData.baseStats.health,\n      maxHealth: classData.baseStats.health,\n      mana: classData.baseStats.mana,\n      maxMana: classData.baseStats.mana,\n      x: 250, // Start in village\n      y: 250,\n      gold: 100,\n      equipment: {},\n      isOnline: true,\n      lastSeen: new Date().toISOString()\n    };\n\n    setGameState(prev => ({\n      ...prev,\n      selectedCharacter: newCharacter,\n      currentScene: 'world',\n      camera: { x: newCharacter.x - 300, y: newCharacter.y - 200 }\n    }));\n\n    setPlayerStats(prev => ({\n      ...prev,\n      character: newCharacter\n    }));\n\n    onAction('character_created', {\n      player_id: currentUser.user_id,\n      character_name: name,\n      character_class: selectedClass,\n      starting_stats: classData.baseStats\n    });\n  };\n\n  // Movement\n  const moveCharacter = useCallback((dx: number, dy: number) => {\n    if (!gameState.selectedCharacter) return;\n\n    const newX = Math.max(0, Math.min(gameState.worldMap.width, gameState.selectedCharacter.x + dx));\n    const newY = Math.max(0, Math.min(gameState.worldMap.height, gameState.selectedCharacter.y + dy));\n\n    setGameState(prev => ({\n      ...prev,\n      selectedCharacter: prev.selectedCharacter ? {\n        ...prev.selectedCharacter,\n        x: newX,\n        y: newY\n      } : null,\n      camera: {\n        x: newX - 300,\n        y: newY - 200\n      }\n    }));\n\n    // Check for zone entry\n    const currentZone = worldZones.find(zone => \n      newX >= zone.x && newX <= zone.x + zone.width &&\n      newY >= zone.y && newY <= zone.y + zone.height\n    );\n\n    if (currentZone) {\n      onAction('zone_entered', {\n        player_id: currentUser.user_id,\n        zone_id: currentZone.id,\n        zone_name: currentZone.name,\n        zone_level: currentZone.level,\n        player_level: gameState.selectedCharacter.level\n      });\n    }\n  }, [gameState.selectedCharacter, gameState.worldMap, currentUser.user_id, onAction]);\n\n  // Keyboard handling\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'w', 'a', 's', 'd'].includes(e.key)) {\n      e.preventDefault();\n    }\n\n    if (gameState.currentScene === 'world' && gameState.selectedCharacter) {\n      const speed = 5;\n      switch (e.key.toLowerCase()) {\n        case 'arrowup':\n        case 'w':\n          moveCharacter(0, -speed);\n          break;\n        case 'arrowdown':\n        case 's':\n          moveCharacter(0, speed);\n          break;\n        case 'arrowleft':\n        case 'a':\n          moveCharacter(-speed, 0);\n          break;\n        case 'arrowright':\n        case 'd':\n          moveCharacter(speed, 0);\n          break;\n        case 'enter':\n          // Open chat\n          break;\n        case 'i':\n          setGameState(prev => ({ ...prev, currentScene: 'inventory' }));\n          break;\n        case 'escape':\n          setGameState(prev => ({ ...prev, currentScene: 'world' }));\n          break;\n      }\n    }\n  }, [gameState.currentScene, gameState.selectedCharacter, moveCharacter]);\n\n  // Chat system\n  const sendChatMessage = (message: string, channel: ChatMessage['channel'] = 'global') => {\n    if (!gameState.selectedCharacter) return;\n\n    const chatMessage: ChatMessage = {\n      id: `msg_${Date.now()}`,\n      player: gameState.selectedCharacter.name,\n      message,\n      channel,\n      timestamp: Date.now()\n    };\n\n    setGameState(prev => ({\n      ...prev,\n      chatMessages: [...prev.chatMessages.slice(-49), chatMessage] // Keep last 50 messages\n    }));\n\n    onAction('chat_message_sent', {\n      player_id: currentUser.user_id,\n      player_name: gameState.selectedCharacter.name,\n      message,\n      channel\n    });\n  };\n\n  // Drawing functions\n  const drawCharacterSelect = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    // Background\n    ctx.fillStyle = '#2C1810';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Title\n    ctx.fillStyle = '#FFD700';\n    ctx.font = 'bold 32px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('🌟 MMO RPG - 캐릭터 생성', canvas.width / 2, 80);\n\n    // Class selection\n    const classes = Object.entries(characterClasses);\n    classes.forEach(([className, classData], index) => {\n      const x = 50 + (index % 2) * 280;\n      const y = 150 + Math.floor(index / 2) * 120;\n\n      // Class card\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';\n      ctx.fillRect(x, y, 250, 100);\n      ctx.strokeStyle = classData.color;\n      ctx.lineWidth = 3;\n      ctx.strokeRect(x, y, 250, 100);\n\n      // Class info\n      ctx.fillStyle = classData.color;\n      ctx.font = 'bold 20px Arial';\n      ctx.textAlign = 'left';\n      ctx.fillText(`${classData.icon} ${className}`, x + 20, y + 30);\n\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '12px Arial';\n      ctx.fillText(classData.description, x + 20, y + 50);\n\n      // Stats\n      ctx.font = '10px Arial';\n      ctx.fillText(`HP: ${classData.baseStats.health} MP: ${classData.baseStats.mana}`, x + 20, y + 65);\n      ctx.fillText(`ATK: ${classData.baseStats.attack} DEF: ${classData.baseStats.defense}`, x + 20, y + 80);\n    });\n\n    // Instructions\n    ctx.fillStyle = '#CCCCCC';\n    ctx.font = '16px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('클릭해서 클래스를 선택하세요', canvas.width / 2, canvas.height - 30);\n  };\n\n  const drawWorld = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    if (!gameState.selectedCharacter) return;\n\n    // Camera offset\n    const offsetX = -gameState.camera.x;\n    const offsetY = -gameState.camera.y;\n\n    // Background\n    ctx.fillStyle = '#87CEEB';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw zones\n    gameState.worldMap.zones.forEach(zone => {\n      const zoneX = zone.x + offsetX;\n      const zoneY = zone.y + offsetY;\n\n      // Zone background\n      ctx.fillStyle = zone.background;\n      ctx.fillRect(zoneX, zoneY, zone.width, zone.height);\n\n      // Zone border\n      ctx.strokeStyle = '#000000';\n      ctx.lineWidth = 2;\n      ctx.strokeRect(zoneX, zoneY, zone.width, zone.height);\n\n      // Zone name\n      ctx.fillStyle = '#000000';\n      ctx.font = 'bold 16px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(zone.name, zoneX + zone.width / 2, zoneY + 25);\n      ctx.fillText(`Lv.${zone.level}`, zoneX + zone.width / 2, zoneY + 45);\n\n      // NPCs\n      zone.npcs.forEach(npc => {\n        const npcX = npc.x + offsetX;\n        const npcY = npc.y + offsetY;\n\n        // NPC icon based on type\n        const npcIcons = {\n          questGiver: '❗',\n          shop: '🛒',\n          guard: '🛡️',\n          monster: '👹'\n        };\n\n        ctx.fillStyle = '#FFD700';\n        ctx.font = '20px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(npcIcons[npc.type], npcX, npcY);\n\n        // NPC name\n        ctx.fillStyle = '#000000';\n        ctx.font = '12px Arial';\n        ctx.fillText(npc.name, npcX, npcY + 25);\n      });\n\n      // Monsters\n      zone.monsters.forEach(monster => {\n        const monsterX = monster.x + offsetX;\n        const monsterY = monster.y + offsetY;\n\n        ctx.fillStyle = '#FF0000';\n        ctx.font = '16px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText('👹', monsterX, monsterY);\n\n        // Health bar\n        if (monster.health && monster.maxHealth) {\n          const healthPercent = monster.health / monster.maxHealth;\n          ctx.fillStyle = '#FF0000';\n          ctx.fillRect(monsterX - 15, monsterY - 25, 30, 4);\n          ctx.fillStyle = '#00FF00';\n          ctx.fillRect(monsterX - 15, monsterY - 25, 30 * healthPercent, 4);\n        }\n      });\n    });\n\n    // Draw online players\n    onlinePlayers.forEach(player => {\n      if (!player.isOnline || player.id === gameState.selectedCharacter?.id) return;\n\n      const playerX = player.x + offsetX;\n      const playerY = player.y + offsetY;\n\n      // Player character\n      const classData = characterClasses[player.class];\n      ctx.fillStyle = classData.color;\n      ctx.font = '20px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(classData.icon, playerX, playerY);\n\n      // Player name\n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '12px Arial';\n      ctx.fillText(player.name, playerX, playerY + 25);\n      ctx.fillText(`Lv.${player.level}`, playerX, playerY + 38);\n    });\n\n    // Draw player character\n    const playerX = gameState.selectedCharacter.x + offsetX;\n    const playerY = gameState.selectedCharacter.y + offsetY;\n    const playerClass = characterClasses[gameState.selectedCharacter.class];\n\n    // Player glow effect\n    ctx.shadowColor = playerClass.color;\n    ctx.shadowBlur = 10;\n    ctx.fillStyle = playerClass.color;\n    ctx.font = '24px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(playerClass.icon, playerX, playerY);\n    ctx.shadowBlur = 0;\n\n    // Player name and level\n    ctx.fillStyle = '#FFFF00';\n    ctx.font = 'bold 14px Arial';\n    ctx.fillText(gameState.selectedCharacter.name, playerX, playerY + 30);\n    ctx.fillText(`Lv.${gameState.selectedCharacter.level}`, playerX, playerY + 45);\n\n    // Health and mana bars\n    const barWidth = 40;\n    // Health bar\n    ctx.fillStyle = '#FF0000';\n    ctx.fillRect(playerX - barWidth/2, playerY - 35, barWidth, 4);\n    ctx.fillStyle = '#00FF00';\n    const healthPercent = gameState.selectedCharacter.health / gameState.selectedCharacter.maxHealth;\n    ctx.fillRect(playerX - barWidth/2, playerY - 35, barWidth * healthPercent, 4);\n\n    // Mana bar\n    ctx.fillStyle = '#000080';\n    ctx.fillRect(playerX - barWidth/2, playerY - 28, barWidth, 4);\n    ctx.fillStyle = '#0080FF';\n    const manaPercent = gameState.selectedCharacter.mana / gameState.selectedCharacter.maxMana;\n    ctx.fillRect(playerX - barWidth/2, playerY - 28, barWidth * manaPercent, 4);\n\n    // UI Panel\n    drawUI(ctx, canvas);\n  };\n\n  const drawUI = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    if (!gameState.selectedCharacter) return;\n\n    // Bottom UI panel\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    ctx.fillRect(0, canvas.height - 120, canvas.width, 120);\n\n    // Player stats\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`${gameState.selectedCharacter.name} - Lv.${gameState.selectedCharacter.level}`, 20, canvas.height - 95);\n    ctx.fillText(`HP: ${gameState.selectedCharacter.health}/${gameState.selectedCharacter.maxHealth}`, 20, canvas.height - 75);\n    ctx.fillText(`MP: ${gameState.selectedCharacter.mana}/${gameState.selectedCharacter.maxMana}`, 20, canvas.height - 55);\n    ctx.fillText(`Gold: ${gameState.selectedCharacter.gold}`, 20, canvas.height - 35);\n    ctx.fillText(`EXP: ${gameState.selectedCharacter.experience}/${gameState.selectedCharacter.level * 100}`, 20, canvas.height - 15);\n\n    // Online players count\n    const onlineCount = onlinePlayers.filter(p => p.isOnline).length;\n    ctx.fillStyle = '#00FF00';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'right';\n    ctx.fillText(`🌐 Online: ${onlineCount} players`, canvas.width - 20, canvas.height - 95);\n\n    // Chat messages\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'left';\n    gameState.chatMessages.slice(-5).forEach((msg, index) => {\n      const channelColors = {\n        global: '#FFFFFF',\n        party: '#00FF00',\n        guild: '#FFD700',\n        whisper: '#FF69B4'\n      };\n      \n      ctx.fillStyle = channelColors[msg.channel];\n      const y = canvas.height - 95 + index * 15;\n      ctx.fillText(`[${msg.channel.toUpperCase()}] ${msg.player}: ${msg.message}`, 200, y);\n    });\n\n    // Controls\n    ctx.fillStyle = '#CCCCCC';\n    ctx.font = '10px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('WASD: Move | I: Inventory | Enter: Chat | ESC: Menu', canvas.width / 2, canvas.height - 5);\n  };\n\n  // Click handling\n  const handleCanvasClick = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    if (gameState.currentScene === 'characterSelect') {\n      // Handle class selection\n      const classes = Object.keys(characterClasses);\n      classes.forEach((className, index) => {\n        const cardX = 50 + (index % 2) * 280;\n        const cardY = 150 + Math.floor(index / 2) * 120;\n\n        if (x >= cardX && x <= cardX + 250 && y >= cardY && y <= cardY + 100) {\n          const characterName = `Hero_${Math.floor(Math.random() * 1000)}`;\n          createCharacter(characterName, className as keyof typeof characterClasses);\n        }\n      });\n    }\n  }, [gameState.currentScene]);\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    switch (gameState.currentScene) {\n      case 'characterSelect':\n        drawCharacterSelect(ctx, canvas);\n        break;\n      case 'world':\n        drawWorld(ctx, canvas);\n        break;\n    }\n  }, [gameState]);\n\n  // Game loop\n  useEffect(() => {\n    const gameLoop = () => {\n      draw();\n      setFrameCount(prev => prev + 1);\n      gameLoopRef.current = requestAnimationFrame(gameLoop);\n    };\n\n    gameLoopRef.current = requestAnimationFrame(gameLoop);\n\n    return () => {\n      if (gameLoopRef.current) {\n        cancelAnimationFrame(gameLoopRef.current);\n      }\n    };\n  }, [draw]);\n\n  // Event listeners\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown);\n    \n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n\n  return (\n    <div style={{ \n      display: 'flex', \n      flexDirection: 'column', \n      alignItems: 'center',\n      background: '#0a0a0a',\n      borderRadius: '12px',\n      padding: '16px',\n      border: '2px solid #2d3748',\n      maxHeight: '500px',\n      overflowY: 'auto',\n      overflowX: 'auto'\n    }}>\n      <canvas\n        ref={canvasRef}\n        width={600}\n        height={400}\n        style={{\n          border: '2px solid #4a5568',\n          borderRadius: '8px',\n          cursor: 'pointer',\n          maxWidth: '100%',\n          height: 'auto'\n        }}\n        onClick={handleCanvasClick}\n        tabIndex={0}\n      />\n      \n      <div style={{\n        marginTop: '12px',\n        color: '#ffffff',\n        fontSize: '14px',\n        textAlign: 'center',\n        maxWidth: '600px',\n      }}>\n        <p>🌟 <strong>MMO RPG Adventure</strong></p>\n        <p>\n          {gameState.currentScene === 'characterSelect' && '클래스를 선택해서 모험을 시작하세요!'}\n          {gameState.currentScene === 'world' && 'WASD로 이동하며 다른 플레이어들과 함께 모험하세요!'}\n        </p>\n        {gameState.selectedCharacter && (\n          <p>\n            {gameState.selectedCharacter.name} | Level {gameState.selectedCharacter.level} | \n            {characterClasses[gameState.selectedCharacter.class].icon} {gameState.selectedCharacter.class}\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}