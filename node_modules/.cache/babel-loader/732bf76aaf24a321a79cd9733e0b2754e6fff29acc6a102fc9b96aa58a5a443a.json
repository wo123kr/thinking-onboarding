{"ast":null,"code":"import React,{useRef,useEffect,useState,useCallback}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const TowerDefenseGame=_ref=>{let{onAction,playerStats,setPlayerStats,currentUser}=_ref;const canvasRef=useRef(null);const gameLoopRef=useRef();// Game path (enemy route)\nconst gamePath=[{x:0,y:200},{x:150,y:200},{x:150,y:100},{x:300,y:100},{x:300,y:300},{x:450,y:300},{x:450,y:150},{x:600,y:150}];// Game state\nconst[gameState,setGameState]=useState({wave:1,lives:20,gold:500,score:0,waveProgress:0,gameStatus:'playing',selectedTowerType:null});const[towers,setTowers]=useState([]);const[enemies,setEnemies]=useState([]);const[projectiles,setProjectiles]=useState([]);const[frameCount,setFrameCount]=useState(0);const[nextEnemySpawn,setNextEnemySpawn]=useState(0);// Tower types configuration\nconst towerTypes={archer:{cost:100,damage:25,range:120,speed:30,color:'#8B4513'},cannon:{cost:200,damage:60,range:100,speed:60,color:'#696969'},magic:{cost:300,damage:40,range:140,speed:40,color:'#9400D3'},ice:{cost:250,damage:20,range:110,speed:45,color:'#00BFFF'}};// Enemy types configuration\nconst enemyTypes={goblin:{health:80,speed:2,reward:15,color:'#228B22'},orc:{health:150,speed:1.5,reward:25,color:'#8B4513'},troll:{health:300,speed:1,reward:40,color:'#2F4F4F'},dragon:{health:500,speed:0.8,reward:80,color:'#DC143C'}};// Prevent default keyboard actions\nconst handleKeyDown=useCallback(e=>{// Prevent default for game keys to avoid page scrolling\nif(['1','2','3','4',' ','Enter','Escape'].includes(e.key)){e.preventDefault();e.stopPropagation();// Handle tower selection\nswitch(e.key){case'1':setGameState(prev=>({...prev,selectedTowerType:'archer'}));break;case'2':setGameState(prev=>({...prev,selectedTowerType:'cannon'}));break;case'3':setGameState(prev=>({...prev,selectedTowerType:'magic'}));break;case'4':setGameState(prev=>({...prev,selectedTowerType:'ice'}));break;case' ':startNextWave();break;case'Escape':setGameState(prev=>({...prev,selectedTowerType:null}));break;}}},[]);// Canvas click handler\nconst handleCanvasClick=useCallback(e=>{const canvas=canvasRef.current;if(!canvas||!gameState.selectedTowerType)return;const rect=canvas.getBoundingClientRect();const x=e.clientX-rect.left;const y=e.clientY-rect.top;// Check if click is valid tower placement\nif(canPlaceTower(x,y)){placeTower(x,y,gameState.selectedTowerType);}},[gameState.selectedTowerType]);const canPlaceTower=(x,y)=>{// Check if too close to path\nfor(const point of gamePath){const distance=Math.sqrt((x-point.x)**2+(y-point.y)**2);if(distance<40)return false;}// Check if too close to existing towers\nfor(const tower of towers){const distance=Math.sqrt((x-tower.x)**2+(y-tower.y)**2);if(distance<50)return false;}return true;};const placeTower=(x,y,type)=>{const towerConfig=towerTypes[type];if(gameState.gold<towerConfig.cost){onAction('tower_placement_failed',{reason:'insufficient_gold',required_gold:towerConfig.cost,current_gold:gameState.gold,tower_type:type});return;}const newTower={id:`tower_${Date.now()}_${Math.random().toString(36).substr(2,5)}`,x,y,type,level:1,damage:towerConfig.damage,range:towerConfig.range,attackSpeed:towerConfig.speed,lastAttack:0,cost:towerConfig.cost,kills:0};setTowers(prev=>[...prev,newTower]);setGameState(prev=>({...prev,gold:prev.gold-towerConfig.cost,selectedTowerType:null}));setPlayerStats(prev=>({...prev,gold:gameState.gold-towerConfig.cost}));onAction('tower_placed',{tower_type:type,tower_id:newTower.id,position_x:x,position_y:y,cost:towerConfig.cost,remaining_gold:gameState.gold-towerConfig.cost,wave:gameState.wave});};const startNextWave=()=>{if(gameState.waveProgress>0)return;// Wave already in progress\nsetGameState(prev=>({...prev,waveProgress:1}));setNextEnemySpawn(frameCount+60);// Start spawning in 1 second\nonAction('wave_started',{wave_number:gameState.wave,current_gold:gameState.gold,current_lives:gameState.lives,towers_count:towers.length});};const spawnEnemy=()=>{const waveTypes=['goblin','orc','troll','dragon'];const typeIndex=Math.min(Math.floor(gameState.wave/2),waveTypes.length-1);const enemyType=waveTypes[Math.floor(Math.random()*(typeIndex+1))];const enemyConfig=enemyTypes[enemyType];const newEnemy={id:`enemy_${Date.now()}_${Math.random().toString(36).substr(2,5)}`,x:gamePath[0].x,y:gamePath[0].y,health:enemyConfig.health+(gameState.wave-1)*20,maxHealth:enemyConfig.health+(gameState.wave-1)*20,speed:enemyConfig.speed,type:enemyType,reward:enemyConfig.reward+gameState.wave*2,pathIndex:0,alive:true,effects:[]};setEnemies(prev=>[...prev,newEnemy]);onAction('enemy_spawned',{enemy_type:enemyType,enemy_id:newEnemy.id,wave:gameState.wave,enemy_health:newEnemy.health,enemy_reward:newEnemy.reward});};const updateEnemies=useCallback(()=>{setEnemies(prev=>prev.map(enemy=>{if(!enemy.alive)return enemy;// Move along path\nconst currentTarget=gamePath[enemy.pathIndex+1];if(currentTarget){const dx=currentTarget.x-enemy.x;const dy=currentTarget.y-enemy.y;const distance=Math.sqrt(dx*dx+dy*dy);if(distance<5){enemy.pathIndex++;if(enemy.pathIndex>=gamePath.length-1){// Enemy reached the end\nsetGameState(prevState=>({...prevState,lives:prevState.lives-1}));onAction('enemy_reached_end',{enemy_type:enemy.type,enemy_id:enemy.id,lives_lost:1,remaining_lives:gameState.lives-1,wave:gameState.wave});return{...enemy,alive:false};}}else{const moveX=dx/distance*enemy.speed;const moveY=dy/distance*enemy.speed;enemy.x+=moveX;enemy.y+=moveY;}}return enemy;}).filter(enemy=>enemy.alive||enemy.pathIndex<gamePath.length-1));},[gameState.lives,gameState.wave,onAction]);const updateTowers=useCallback(()=>{towers.forEach(tower=>{if(frameCount-tower.lastAttack<tower.attackSpeed)return;// Find target\nconst enemiesInRange=enemies.filter(enemy=>{if(!enemy.alive)return false;const distance=Math.sqrt((enemy.x-tower.x)**2+(enemy.y-tower.y)**2);return distance<=tower.range;});if(enemiesInRange.length>0){// Target the enemy furthest along the path\nconst target=enemiesInRange.reduce((best,current)=>current.pathIndex>best.pathIndex?current:best);// Create projectile\nconst newProjectile={id:`proj_${Date.now()}_${Math.random().toString(36).substr(2,5)}`,x:tower.x,y:tower.y,targetX:target.x,targetY:target.y,speed:8,damage:tower.damage,type:tower.type,towerId:tower.id};setProjectiles(prev=>[...prev,newProjectile]);tower.lastAttack=frameCount;onAction('tower_attack',{tower_type:tower.type,tower_id:tower.id,target_enemy_id:target.id,target_enemy_type:target.type,damage:tower.damage,wave:gameState.wave});}});},[towers,enemies,frameCount,gameState.wave,onAction]);const updateProjectiles=useCallback(()=>{setProjectiles(prev=>prev.filter(proj=>{const dx=proj.targetX-proj.x;const dy=proj.targetY-proj.y;const distance=Math.sqrt(dx*dx+dy*dy);if(distance<5){// Hit target - find enemy and damage\nsetEnemies(prevEnemies=>prevEnemies.map(enemy=>{const enemyDistance=Math.sqrt((enemy.x-proj.targetX)**2+(enemy.y-proj.targetY)**2);if(enemyDistance<30&&enemy.alive){const newHealth=Math.max(0,enemy.health-proj.damage);const killed=newHealth<=0;if(killed){// Enemy killed\nsetGameState(prevState=>({...prevState,gold:prevState.gold+enemy.reward,score:prevState.score+enemy.reward*10}));setPlayerStats(prev=>({...prev,gold:gameState.gold+enemy.reward,experience:prev.experience+enemy.reward}));// Update tower kill count\nsetTowers(prevTowers=>prevTowers.map(tower=>tower.id===proj.towerId?{...tower,kills:tower.kills+1}:tower));onAction('enemy_defeated',{enemy_type:enemy.type,enemy_id:enemy.id,tower_type:proj.type,tower_id:proj.towerId,damage_dealt:proj.damage,gold_gained:enemy.reward,exp_gained:enemy.reward,wave:gameState.wave});return{...enemy,health:0,alive:false};}else{onAction('enemy_damaged',{enemy_type:enemy.type,enemy_id:enemy.id,tower_type:proj.type,damage_dealt:proj.damage,enemy_health_remaining:newHealth,wave:gameState.wave});return{...enemy,health:newHealth};}}return enemy;}));return false;// Remove projectile\n}// Move projectile\nconst moveX=dx/distance*proj.speed;const moveY=dy/distance*proj.speed;proj.x+=moveX;proj.y+=moveY;return true;// Keep projectile\n}));},[gameState.gold,gameState.wave,onAction,setPlayerStats]);// Wave management\nuseEffect(()=>{if(gameState.waveProgress>0&&frameCount>=nextEnemySpawn){const enemiesThisWave=5+gameState.wave*2;const spawnedCount=enemies.filter(e=>e.alive).length;if(spawnedCount<enemiesThisWave){spawnEnemy();setNextEnemySpawn(frameCount+45-Math.min(gameState.wave,30));// Faster spawning as waves progress\n}else if(enemies.filter(e=>e.alive).length===0){// Wave complete\nsetGameState(prev=>({...prev,wave:prev.wave+1,waveProgress:0,gold:prev.gold+50+prev.wave*10// Wave completion bonus\n}));onAction('wave_completed',{wave_number:gameState.wave,bonus_gold:50+gameState.wave*10,total_gold:gameState.gold+50+gameState.wave*10,score:gameState.score,towers_count:towers.length});}}},[frameCount,nextEnemySpawn,gameState.waveProgress,gameState.wave,enemies,gameState.gold,gameState.score,towers.length,onAction]);// Game over check\nuseEffect(()=>{if(gameState.lives<=0){setGameState(prev=>({...prev,gameStatus:'gameOver'}));onAction('game_over',{final_wave:gameState.wave,final_score:gameState.score,towers_built:towers.length,total_kills:towers.reduce((sum,tower)=>sum+tower.kills,0)});}},[gameState.lives,gameState.wave,gameState.score,towers,onAction]);// Drawing functions\nconst drawPath=ctx=>{ctx.strokeStyle='#8B4513';ctx.lineWidth=30;ctx.lineCap='round';ctx.lineJoin='round';ctx.beginPath();ctx.moveTo(gamePath[0].x,gamePath[0].y);gamePath.slice(1).forEach(point=>{ctx.lineTo(point.x,point.y);});ctx.stroke();// Path decorations\nctx.strokeStyle='#DEB887';ctx.lineWidth=20;ctx.beginPath();ctx.moveTo(gamePath[0].x,gamePath[0].y);gamePath.slice(1).forEach(point=>{ctx.lineTo(point.x,point.y);});ctx.stroke();};const drawTower=(ctx,tower)=>{const config=towerTypes[tower.type];// Tower base\nctx.fillStyle='#696969';ctx.beginPath();ctx.arc(tower.x,tower.y,20,0,2*Math.PI);ctx.fill();// Tower top\nctx.fillStyle=config.color;ctx.beginPath();ctx.arc(tower.x,tower.y,15,0,2*Math.PI);ctx.fill();// Tower details based on type\nctx.fillStyle='#FFFFFF';ctx.font='12px Arial';ctx.textAlign='center';const symbols={archer:'🏹',cannon:'💣',magic:'✨',ice:'❄️'};ctx.fillText(symbols[tower.type],tower.x,tower.y+4);// Range indicator for selected tower type\nif(gameState.selectedTowerType===tower.type){ctx.strokeStyle='rgba(255, 255, 255, 0.3)';ctx.lineWidth=2;ctx.setLineDash([5,5]);ctx.beginPath();ctx.arc(tower.x,tower.y,tower.range,0,2*Math.PI);ctx.stroke();ctx.setLineDash([]);}// Kill count\nif(tower.kills>0){ctx.fillStyle='#FFD700';ctx.font='10px Arial';ctx.fillText(tower.kills.toString(),tower.x,tower.y-25);}};const drawEnemy=(ctx,enemy)=>{if(!enemy.alive)return;const config=enemyTypes[enemy.type];const size={goblin:12,orc:16,troll:20,dragon:24}[enemy.type];// Enemy body\nctx.fillStyle=config.color;ctx.beginPath();ctx.arc(enemy.x,enemy.y,size,0,2*Math.PI);ctx.fill();// Enemy details\nctx.fillStyle='#FFFFFF';ctx.font='14px Arial';ctx.textAlign='center';const symbols={goblin:'👹',orc:'🗡️',troll:'🏔️',dragon:'🐉'};ctx.fillText(symbols[enemy.type],enemy.x,enemy.y+4);// Health bar\nconst barWidth=size*2;const barHeight=4;const healthPercent=enemy.health/enemy.maxHealth;ctx.fillStyle='#FF0000';ctx.fillRect(enemy.x-barWidth/2,enemy.y-size-10,barWidth,barHeight);ctx.fillStyle='#00FF00';ctx.fillRect(enemy.x-barWidth/2,enemy.y-size-10,barWidth*healthPercent,barHeight);};const drawProjectile=(ctx,projectile)=>{const colors={archer:'#8B4513',cannon:'#000000',magic:'#9400D3',ice:'#00BFFF'};ctx.fillStyle=colors[projectile.type];ctx.beginPath();ctx.arc(projectile.x,projectile.y,4,0,2*Math.PI);ctx.fill();// Trail effect\nctx.fillStyle=colors[projectile.type]+'80';ctx.beginPath();ctx.arc(projectile.x-2,projectile.y-2,2,0,2*Math.PI);ctx.fill();};const drawUI=(ctx,canvas)=>{// Game stats panel\nctx.fillStyle='rgba(0, 0, 0, 0.8)';ctx.fillRect(0,0,canvas.width,60);ctx.fillStyle='#FFFFFF';ctx.font='16px Arial';ctx.textAlign='left';ctx.fillText(`Wave: ${gameState.wave}`,10,25);ctx.fillText(`Lives: ${gameState.lives}`,10,45);ctx.fillText(`Gold: ${gameState.gold}`,120,25);ctx.fillText(`Score: ${gameState.score}`,120,45);// Tower selection panel\nctx.fillStyle='rgba(0, 0, 0, 0.8)';ctx.fillRect(0,canvas.height-80,canvas.width,80);const towerButtons=[{type:'archer',x:50,key:'1'},{type:'cannon',x:150,key:'2'},{type:'magic',x:250,key:'3'},{type:'ice',x:350,key:'4'}];towerButtons.forEach(button=>{const config=towerTypes[button.type];const isSelected=gameState.selectedTowerType===button.type;const canAfford=gameState.gold>=config.cost;// Button background\nctx.fillStyle=isSelected?'rgba(255, 255, 0, 0.5)':canAfford?'rgba(255, 255, 255, 0.2)':'rgba(255, 0, 0, 0.2)';ctx.fillRect(button.x-25,canvas.height-70,50,60);// Tower icon\nctx.fillStyle=config.color;ctx.beginPath();ctx.arc(button.x,canvas.height-55,12,0,2*Math.PI);ctx.fill();// Tower info\nctx.fillStyle=canAfford?'#FFFFFF':'#FF6666';ctx.font='12px Arial';ctx.textAlign='center';ctx.fillText(`${button.key}: $${config.cost}`,button.x,canvas.height-20);ctx.fillText(button.type.toUpperCase(),button.x,canvas.height-8);});// Instructions\nctx.fillStyle='#FFFFFF';ctx.font='14px Arial';ctx.textAlign='right';ctx.fillText('SPACE: Next Wave',canvas.width-10,canvas.height-45);ctx.fillText('ESC: Cancel',canvas.width-10,canvas.height-25);ctx.fillText('1-4: Select Tower',canvas.width-10,canvas.height-5);// Wave progress\nif(gameState.waveProgress>0){ctx.fillStyle='rgba(255, 255, 0, 0.8)';ctx.font='20px Arial';ctx.textAlign='center';ctx.fillText('WAVE IN PROGRESS',canvas.width/2,35);}// Game over screen\nif(gameState.gameStatus==='gameOver'){ctx.fillStyle='rgba(0, 0, 0, 0.8)';ctx.fillRect(0,0,canvas.width,canvas.height);ctx.fillStyle='#FF0000';ctx.font='32px Arial';ctx.textAlign='center';ctx.fillText('GAME OVER',canvas.width/2,canvas.height/2-50);ctx.fillStyle='#FFFFFF';ctx.font='18px Arial';ctx.fillText(`Final Wave: ${gameState.wave}`,canvas.width/2,canvas.height/2);ctx.fillText(`Final Score: ${gameState.score}`,canvas.width/2,canvas.height/2+30);}};const draw=useCallback(()=>{const canvas=canvasRef.current;if(!canvas)return;const ctx=canvas.getContext('2d');if(!ctx)return;// Clear canvas with background\nctx.fillStyle='#1a4c2e';ctx.fillRect(0,0,canvas.width,canvas.height);// Draw game elements\ndrawPath(ctx);towers.forEach(tower=>drawTower(ctx,tower));enemies.forEach(enemy=>drawEnemy(ctx,enemy));projectiles.forEach(proj=>drawProjectile(ctx,proj));drawUI(ctx,canvas);// Show placement preview\nif(gameState.selectedTowerType&&canvas){const rect=canvas.getBoundingClientRect();// This would need mouse position tracking for preview\n}},[towers,enemies,projectiles,gameState]);// Game loop\nuseEffect(()=>{const gameLoop=()=>{updateEnemies();updateTowers();updateProjectiles();draw();setFrameCount(prev=>prev+1);gameLoopRef.current=requestAnimationFrame(gameLoop);};gameLoopRef.current=requestAnimationFrame(gameLoop);return()=>{if(gameLoopRef.current){cancelAnimationFrame(gameLoopRef.current);}};},[updateEnemies,updateTowers,updateProjectiles,draw]);// Event listeners\nuseEffect(()=>{document.addEventListener('keydown',handleKeyDown);return()=>{document.removeEventListener('keydown',handleKeyDown);};},[handleKeyDown]);return/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'column',alignItems:'center',background:'#0f2419',borderRadius:'12px',padding:'16px',border:'2px solid #2d5016'},children:[/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:600,height:400,style:{border:'2px solid #4a6741',borderRadius:'8px',background:'#1a4c2e',cursor:gameState.selectedTowerType?'crosshair':'default'},onClick:handleCanvasClick,tabIndex:0}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'12px',color:'#ffffff',fontSize:'14px',textAlign:'center',maxWidth:'600px'},children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"\\uD83C\\uDFF0 \",/*#__PURE__*/_jsx(\"strong\",{children:\"Tower Defense\"}),\" - \\uD0A4\\uBCF4\\uB4DC 1-4\\uB85C \\uD0C0\\uC6CC \\uC120\\uD0DD, \\uD074\\uB9AD\\uC73C\\uB85C \\uBC30\\uCE58, Space\\uB85C \\uC6E8\\uC774\\uBE0C \\uC2DC\\uC791!\"]}),/*#__PURE__*/_jsx(\"p\",{children:\"\\uC801\\uB4E4\\uC774 \\uB05D\\uAE4C\\uC9C0 \\uAC00\\uC9C0 \\uBABB\\uD558\\uB3C4\\uB85D \\uD0C0\\uC6CC\\uB97C \\uBC30\\uCE58\\uD574\\uC11C \\uB9C9\\uC544\\uBCF4\\uC138\\uC694!\"})]})]});};","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","jsx","_jsx","jsxs","_jsxs","TowerDefenseGame","_ref","onAction","playerStats","setPlayerStats","currentUser","canvasRef","gameLoopRef","gamePath","x","y","gameState","setGameState","wave","lives","gold","score","waveProgress","gameStatus","selectedTowerType","towers","setTowers","enemies","setEnemies","projectiles","setProjectiles","frameCount","setFrameCount","nextEnemySpawn","setNextEnemySpawn","towerTypes","archer","cost","damage","range","speed","color","cannon","magic","ice","enemyTypes","goblin","health","reward","orc","troll","dragon","handleKeyDown","e","includes","key","preventDefault","stopPropagation","prev","startNextWave","handleCanvasClick","canvas","current","rect","getBoundingClientRect","clientX","left","clientY","top","canPlaceTower","placeTower","point","distance","Math","sqrt","tower","type","towerConfig","reason","required_gold","current_gold","tower_type","newTower","id","Date","now","random","toString","substr","level","attackSpeed","lastAttack","kills","tower_id","position_x","position_y","remaining_gold","wave_number","current_lives","towers_count","length","spawnEnemy","waveTypes","typeIndex","min","floor","enemyType","enemyConfig","newEnemy","maxHealth","pathIndex","alive","effects","enemy_type","enemy_id","enemy_health","enemy_reward","updateEnemies","map","enemy","currentTarget","dx","dy","prevState","lives_lost","remaining_lives","moveX","moveY","filter","updateTowers","forEach","enemiesInRange","target","reduce","best","newProjectile","targetX","targetY","towerId","target_enemy_id","target_enemy_type","updateProjectiles","proj","prevEnemies","enemyDistance","newHealth","max","killed","experience","prevTowers","damage_dealt","gold_gained","exp_gained","enemy_health_remaining","enemiesThisWave","spawnedCount","bonus_gold","total_gold","final_wave","final_score","towers_built","total_kills","sum","drawPath","ctx","strokeStyle","lineWidth","lineCap","lineJoin","beginPath","moveTo","slice","lineTo","stroke","drawTower","config","fillStyle","arc","PI","fill","font","textAlign","symbols","fillText","setLineDash","drawEnemy","size","barWidth","barHeight","healthPercent","fillRect","drawProjectile","projectile","colors","drawUI","width","height","towerButtons","button","isSelected","canAfford","toUpperCase","draw","getContext","gameLoop","requestAnimationFrame","cancelAnimationFrame","document","addEventListener","removeEventListener","style","display","flexDirection","alignItems","background","borderRadius","padding","border","children","ref","cursor","onClick","tabIndex","marginTop","fontSize","maxWidth"],"sources":["/Users/jegaljin-u/workspace/thinking-guide/src/components/TowerDefenseGame.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\n\ninterface GameProps {\n  onAction: (eventType: string, data: any) => void;\n  isSimulating: boolean;\n  currentAction: string | null;\n  playerStats: any;\n  setPlayerStats: (stats: any) => void;\n  currentUser: any;\n}\n\ninterface Tower {\n  id: string;\n  x: number;\n  y: number;\n  type: 'archer' | 'cannon' | 'magic' | 'ice';\n  level: number;\n  damage: number;\n  range: number;\n  attackSpeed: number;\n  lastAttack: number;\n  cost: number;\n  kills: number;\n}\n\ninterface Enemy {\n  id: string;\n  x: number;\n  y: number;\n  health: number;\n  maxHealth: number;\n  speed: number;\n  type: 'goblin' | 'orc' | 'troll' | 'dragon';\n  reward: number;\n  pathIndex: number;\n  alive: boolean;\n  effects: string[];\n}\n\ninterface Projectile {\n  id: string;\n  x: number;\n  y: number;\n  targetX: number;\n  targetY: number;\n  speed: number;\n  damage: number;\n  type: string;\n  towerId: string;\n}\n\ninterface GameState {\n  wave: number;\n  lives: number;\n  gold: number;\n  score: number;\n  waveProgress: number;\n  gameStatus: 'playing' | 'paused' | 'gameOver' | 'victory';\n  selectedTowerType: Tower['type'] | null;\n}\n\nexport const TowerDefenseGame: React.FC<GameProps> = ({\n  onAction,\n  playerStats,\n  setPlayerStats,\n  currentUser\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const gameLoopRef = useRef<number>();\n  \n  // Game path (enemy route)\n  const gamePath = [\n    { x: 0, y: 200 },\n    { x: 150, y: 200 },\n    { x: 150, y: 100 },\n    { x: 300, y: 100 },\n    { x: 300, y: 300 },\n    { x: 450, y: 300 },\n    { x: 450, y: 150 },\n    { x: 600, y: 150 },\n  ];\n\n  // Game state\n  const [gameState, setGameState] = useState<GameState>({\n    wave: 1,\n    lives: 20,\n    gold: 500,\n    score: 0,\n    waveProgress: 0,\n    gameStatus: 'playing',\n    selectedTowerType: null,\n  });\n\n  const [towers, setTowers] = useState<Tower[]>([]);\n  const [enemies, setEnemies] = useState<Enemy[]>([]);\n  const [projectiles, setProjectiles] = useState<Projectile[]>([]);\n  const [frameCount, setFrameCount] = useState(0);\n  const [nextEnemySpawn, setNextEnemySpawn] = useState(0);\n\n  // Tower types configuration\n  const towerTypes = {\n    archer: { cost: 100, damage: 25, range: 120, speed: 30, color: '#8B4513' },\n    cannon: { cost: 200, damage: 60, range: 100, speed: 60, color: '#696969' },\n    magic: { cost: 300, damage: 40, range: 140, speed: 40, color: '#9400D3' },\n    ice: { cost: 250, damage: 20, range: 110, speed: 45, color: '#00BFFF' }\n  };\n\n  // Enemy types configuration\n  const enemyTypes = {\n    goblin: { health: 80, speed: 2, reward: 15, color: '#228B22' },\n    orc: { health: 150, speed: 1.5, reward: 25, color: '#8B4513' },\n    troll: { health: 300, speed: 1, reward: 40, color: '#2F4F4F' },\n    dragon: { health: 500, speed: 0.8, reward: 80, color: '#DC143C' }\n  };\n\n  // Prevent default keyboard actions\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    // Prevent default for game keys to avoid page scrolling\n    if (['1', '2', '3', '4', ' ', 'Enter', 'Escape'].includes(e.key)) {\n      e.preventDefault();\n      e.stopPropagation();\n      \n      // Handle tower selection\n      switch(e.key) {\n        case '1':\n          setGameState(prev => ({ ...prev, selectedTowerType: 'archer' }));\n          break;\n        case '2':\n          setGameState(prev => ({ ...prev, selectedTowerType: 'cannon' }));\n          break;\n        case '3':\n          setGameState(prev => ({ ...prev, selectedTowerType: 'magic' }));\n          break;\n        case '4':\n          setGameState(prev => ({ ...prev, selectedTowerType: 'ice' }));\n          break;\n        case ' ':\n          startNextWave();\n          break;\n        case 'Escape':\n          setGameState(prev => ({ ...prev, selectedTowerType: null }));\n          break;\n      }\n    }\n  }, []);\n\n  // Canvas click handler\n  const handleCanvasClick = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas || !gameState.selectedTowerType) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    // Check if click is valid tower placement\n    if (canPlaceTower(x, y)) {\n      placeTower(x, y, gameState.selectedTowerType);\n    }\n  }, [gameState.selectedTowerType]);\n\n  const canPlaceTower = (x: number, y: number): boolean => {\n    // Check if too close to path\n    for (const point of gamePath) {\n      const distance = Math.sqrt((x - point.x) ** 2 + (y - point.y) ** 2);\n      if (distance < 40) return false;\n    }\n\n    // Check if too close to existing towers\n    for (const tower of towers) {\n      const distance = Math.sqrt((x - tower.x) ** 2 + (y - tower.y) ** 2);\n      if (distance < 50) return false;\n    }\n\n    return true;\n  };\n\n  const placeTower = (x: number, y: number, type: Tower['type']) => {\n    const towerConfig = towerTypes[type];\n    \n    if (gameState.gold < towerConfig.cost) {\n      onAction('tower_placement_failed', {\n        reason: 'insufficient_gold',\n        required_gold: towerConfig.cost,\n        current_gold: gameState.gold,\n        tower_type: type,\n      });\n      return;\n    }\n\n    const newTower: Tower = {\n      id: `tower_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      x,\n      y,\n      type,\n      level: 1,\n      damage: towerConfig.damage,\n      range: towerConfig.range,\n      attackSpeed: towerConfig.speed,\n      lastAttack: 0,\n      cost: towerConfig.cost,\n      kills: 0,\n    };\n\n    setTowers(prev => [...prev, newTower]);\n    setGameState(prev => ({ \n      ...prev, \n      gold: prev.gold - towerConfig.cost,\n      selectedTowerType: null \n    }));\n\n    setPlayerStats((prev: any) => ({\n      ...prev,\n      gold: gameState.gold - towerConfig.cost,\n    }));\n\n    onAction('tower_placed', {\n      tower_type: type,\n      tower_id: newTower.id,\n      position_x: x,\n      position_y: y,\n      cost: towerConfig.cost,\n      remaining_gold: gameState.gold - towerConfig.cost,\n      wave: gameState.wave,\n    });\n  };\n\n  const startNextWave = () => {\n    if (gameState.waveProgress > 0) return; // Wave already in progress\n\n    setGameState(prev => ({ ...prev, waveProgress: 1 }));\n    setNextEnemySpawn(frameCount + 60); // Start spawning in 1 second\n\n    onAction('wave_started', {\n      wave_number: gameState.wave,\n      current_gold: gameState.gold,\n      current_lives: gameState.lives,\n      towers_count: towers.length,\n    });\n  };\n\n  const spawnEnemy = () => {\n    const waveTypes = ['goblin', 'orc', 'troll', 'dragon'] as Enemy['type'][];\n    const typeIndex = Math.min(Math.floor(gameState.wave / 2), waveTypes.length - 1);\n    const enemyType = waveTypes[Math.floor(Math.random() * (typeIndex + 1))];\n    const enemyConfig = enemyTypes[enemyType];\n\n    const newEnemy: Enemy = {\n      id: `enemy_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n      x: gamePath[0].x,\n      y: gamePath[0].y,\n      health: enemyConfig.health + (gameState.wave - 1) * 20,\n      maxHealth: enemyConfig.health + (gameState.wave - 1) * 20,\n      speed: enemyConfig.speed,\n      type: enemyType,\n      reward: enemyConfig.reward + gameState.wave * 2,\n      pathIndex: 0,\n      alive: true,\n      effects: [],\n    };\n\n    setEnemies(prev => [...prev, newEnemy]);\n\n    onAction('enemy_spawned', {\n      enemy_type: enemyType,\n      enemy_id: newEnemy.id,\n      wave: gameState.wave,\n      enemy_health: newEnemy.health,\n      enemy_reward: newEnemy.reward,\n    });\n  };\n\n  const updateEnemies = useCallback(() => {\n    setEnemies(prev => prev.map(enemy => {\n      if (!enemy.alive) return enemy;\n\n      // Move along path\n      const currentTarget = gamePath[enemy.pathIndex + 1];\n      if (currentTarget) {\n        const dx = currentTarget.x - enemy.x;\n        const dy = currentTarget.y - enemy.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        if (distance < 5) {\n          enemy.pathIndex++;\n          if (enemy.pathIndex >= gamePath.length - 1) {\n            // Enemy reached the end\n            setGameState(prevState => ({ \n              ...prevState, \n              lives: prevState.lives - 1 \n            }));\n\n            onAction('enemy_reached_end', {\n              enemy_type: enemy.type,\n              enemy_id: enemy.id,\n              lives_lost: 1,\n              remaining_lives: gameState.lives - 1,\n              wave: gameState.wave,\n            });\n\n            return { ...enemy, alive: false };\n          }\n        } else {\n          const moveX = (dx / distance) * enemy.speed;\n          const moveY = (dy / distance) * enemy.speed;\n          enemy.x += moveX;\n          enemy.y += moveY;\n        }\n      }\n\n      return enemy;\n    }).filter(enemy => enemy.alive || enemy.pathIndex < gamePath.length - 1));\n  }, [gameState.lives, gameState.wave, onAction]);\n\n  const updateTowers = useCallback(() => {\n    towers.forEach(tower => {\n      if (frameCount - tower.lastAttack < tower.attackSpeed) return;\n\n      // Find target\n      const enemiesInRange = enemies.filter(enemy => {\n        if (!enemy.alive) return false;\n        const distance = Math.sqrt((enemy.x - tower.x) ** 2 + (enemy.y - tower.y) ** 2);\n        return distance <= tower.range;\n      });\n\n      if (enemiesInRange.length > 0) {\n        // Target the enemy furthest along the path\n        const target = enemiesInRange.reduce((best, current) => \n          current.pathIndex > best.pathIndex ? current : best\n        );\n\n        // Create projectile\n        const newProjectile: Projectile = {\n          id: `proj_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,\n          x: tower.x,\n          y: tower.y,\n          targetX: target.x,\n          targetY: target.y,\n          speed: 8,\n          damage: tower.damage,\n          type: tower.type,\n          towerId: tower.id,\n        };\n\n        setProjectiles(prev => [...prev, newProjectile]);\n        tower.lastAttack = frameCount;\n\n        onAction('tower_attack', {\n          tower_type: tower.type,\n          tower_id: tower.id,\n          target_enemy_id: target.id,\n          target_enemy_type: target.type,\n          damage: tower.damage,\n          wave: gameState.wave,\n        });\n      }\n    });\n  }, [towers, enemies, frameCount, gameState.wave, onAction]);\n\n  const updateProjectiles = useCallback(() => {\n    setProjectiles(prev => prev.filter(proj => {\n      const dx = proj.targetX - proj.x;\n      const dy = proj.targetY - proj.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      if (distance < 5) {\n        // Hit target - find enemy and damage\n        setEnemies(prevEnemies => prevEnemies.map(enemy => {\n          const enemyDistance = Math.sqrt((enemy.x - proj.targetX) ** 2 + (enemy.y - proj.targetY) ** 2);\n          if (enemyDistance < 30 && enemy.alive) {\n            const newHealth = Math.max(0, enemy.health - proj.damage);\n            const killed = newHealth <= 0;\n\n            if (killed) {\n              // Enemy killed\n              setGameState(prevState => ({ \n                ...prevState, \n                gold: prevState.gold + enemy.reward,\n                score: prevState.score + enemy.reward * 10\n              }));\n\n              setPlayerStats((prev: any) => ({\n                ...prev,\n                gold: gameState.gold + enemy.reward,\n                experience: prev.experience + enemy.reward,\n              }));\n\n              // Update tower kill count\n              setTowers(prevTowers => prevTowers.map(tower => \n                tower.id === proj.towerId \n                  ? { ...tower, kills: tower.kills + 1 }\n                  : tower\n              ));\n\n              onAction('enemy_defeated', {\n                enemy_type: enemy.type,\n                enemy_id: enemy.id,\n                tower_type: proj.type,\n                tower_id: proj.towerId,\n                damage_dealt: proj.damage,\n                gold_gained: enemy.reward,\n                exp_gained: enemy.reward,\n                wave: gameState.wave,\n              });\n\n              return { ...enemy, health: 0, alive: false };\n            } else {\n              onAction('enemy_damaged', {\n                enemy_type: enemy.type,\n                enemy_id: enemy.id,\n                tower_type: proj.type,\n                damage_dealt: proj.damage,\n                enemy_health_remaining: newHealth,\n                wave: gameState.wave,\n              });\n\n              return { ...enemy, health: newHealth };\n            }\n          }\n          return enemy;\n        }));\n\n        return false; // Remove projectile\n      }\n\n      // Move projectile\n      const moveX = (dx / distance) * proj.speed;\n      const moveY = (dy / distance) * proj.speed;\n      proj.x += moveX;\n      proj.y += moveY;\n\n      return true; // Keep projectile\n    }));\n  }, [gameState.gold, gameState.wave, onAction, setPlayerStats]);\n\n  // Wave management\n  useEffect(() => {\n    if (gameState.waveProgress > 0 && frameCount >= nextEnemySpawn) {\n      const enemiesThisWave = 5 + gameState.wave * 2;\n      const spawnedCount = enemies.filter(e => e.alive).length;\n      \n      if (spawnedCount < enemiesThisWave) {\n        spawnEnemy();\n        setNextEnemySpawn(frameCount + 45 - Math.min(gameState.wave, 30)); // Faster spawning as waves progress\n      } else if (enemies.filter(e => e.alive).length === 0) {\n        // Wave complete\n        setGameState(prev => ({ \n          ...prev, \n          wave: prev.wave + 1, \n          waveProgress: 0,\n          gold: prev.gold + 50 + prev.wave * 10 // Wave completion bonus\n        }));\n\n        onAction('wave_completed', {\n          wave_number: gameState.wave,\n          bonus_gold: 50 + gameState.wave * 10,\n          total_gold: gameState.gold + 50 + gameState.wave * 10,\n          score: gameState.score,\n          towers_count: towers.length,\n        });\n      }\n    }\n  }, [frameCount, nextEnemySpawn, gameState.waveProgress, gameState.wave, enemies, gameState.gold, gameState.score, towers.length, onAction]);\n\n  // Game over check\n  useEffect(() => {\n    if (gameState.lives <= 0) {\n      setGameState(prev => ({ ...prev, gameStatus: 'gameOver' }));\n      \n      onAction('game_over', {\n        final_wave: gameState.wave,\n        final_score: gameState.score,\n        towers_built: towers.length,\n        total_kills: towers.reduce((sum, tower) => sum + tower.kills, 0),\n      });\n    }\n  }, [gameState.lives, gameState.wave, gameState.score, towers, onAction]);\n\n  // Drawing functions\n  const drawPath = (ctx: CanvasRenderingContext2D) => {\n    ctx.strokeStyle = '#8B4513';\n    ctx.lineWidth = 30;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    \n    ctx.beginPath();\n    ctx.moveTo(gamePath[0].x, gamePath[0].y);\n    gamePath.slice(1).forEach(point => {\n      ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n\n    // Path decorations\n    ctx.strokeStyle = '#DEB887';\n    ctx.lineWidth = 20;\n    ctx.beginPath();\n    ctx.moveTo(gamePath[0].x, gamePath[0].y);\n    gamePath.slice(1).forEach(point => {\n      ctx.lineTo(point.x, point.y);\n    });\n    ctx.stroke();\n  };\n\n  const drawTower = (ctx: CanvasRenderingContext2D, tower: Tower) => {\n    const config = towerTypes[tower.type];\n    \n    // Tower base\n    ctx.fillStyle = '#696969';\n    ctx.beginPath();\n    ctx.arc(tower.x, tower.y, 20, 0, 2 * Math.PI);\n    ctx.fill();\n\n    // Tower top\n    ctx.fillStyle = config.color;\n    ctx.beginPath();\n    ctx.arc(tower.x, tower.y, 15, 0, 2 * Math.PI);\n    ctx.fill();\n\n    // Tower details based on type\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n    \n    const symbols = { archer: '🏹', cannon: '💣', magic: '✨', ice: '❄️' };\n    ctx.fillText(symbols[tower.type], tower.x, tower.y + 4);\n\n    // Range indicator for selected tower type\n    if (gameState.selectedTowerType === tower.type) {\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n      ctx.lineWidth = 2;\n      ctx.setLineDash([5, 5]);\n      ctx.beginPath();\n      ctx.arc(tower.x, tower.y, tower.range, 0, 2 * Math.PI);\n      ctx.stroke();\n      ctx.setLineDash([]);\n    }\n\n    // Kill count\n    if (tower.kills > 0) {\n      ctx.fillStyle = '#FFD700';\n      ctx.font = '10px Arial';\n      ctx.fillText(tower.kills.toString(), tower.x, tower.y - 25);\n    }\n  };\n\n  const drawEnemy = (ctx: CanvasRenderingContext2D, enemy: Enemy) => {\n    if (!enemy.alive) return;\n\n    const config = enemyTypes[enemy.type];\n    const size = { goblin: 12, orc: 16, troll: 20, dragon: 24 }[enemy.type];\n\n    // Enemy body\n    ctx.fillStyle = config.color;\n    ctx.beginPath();\n    ctx.arc(enemy.x, enemy.y, size, 0, 2 * Math.PI);\n    ctx.fill();\n\n    // Enemy details\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'center';\n    \n    const symbols = { goblin: '👹', orc: '🗡️', troll: '🏔️', dragon: '🐉' };\n    ctx.fillText(symbols[enemy.type], enemy.x, enemy.y + 4);\n\n    // Health bar\n    const barWidth = size * 2;\n    const barHeight = 4;\n    const healthPercent = enemy.health / enemy.maxHealth;\n    \n    ctx.fillStyle = '#FF0000';\n    ctx.fillRect(enemy.x - barWidth/2, enemy.y - size - 10, barWidth, barHeight);\n    ctx.fillStyle = '#00FF00';\n    ctx.fillRect(enemy.x - barWidth/2, enemy.y - size - 10, barWidth * healthPercent, barHeight);\n  };\n\n  const drawProjectile = (ctx: CanvasRenderingContext2D, projectile: Projectile) => {\n    const colors = { archer: '#8B4513', cannon: '#000000', magic: '#9400D3', ice: '#00BFFF' };\n    \n    ctx.fillStyle = colors[projectile.type as keyof typeof colors];\n    ctx.beginPath();\n    ctx.arc(projectile.x, projectile.y, 4, 0, 2 * Math.PI);\n    ctx.fill();\n\n    // Trail effect\n    ctx.fillStyle = colors[projectile.type as keyof typeof colors] + '80';\n    ctx.beginPath();\n    ctx.arc(projectile.x - 2, projectile.y - 2, 2, 0, 2 * Math.PI);\n    ctx.fill();\n  };\n\n  const drawUI = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    // Game stats panel\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    ctx.fillRect(0, 0, canvas.width, 60);\n    \n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '16px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText(`Wave: ${gameState.wave}`, 10, 25);\n    ctx.fillText(`Lives: ${gameState.lives}`, 10, 45);\n    ctx.fillText(`Gold: ${gameState.gold}`, 120, 25);\n    ctx.fillText(`Score: ${gameState.score}`, 120, 45);\n\n    // Tower selection panel\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    ctx.fillRect(0, canvas.height - 80, canvas.width, 80);\n\n    const towerButtons = [\n      { type: 'archer', x: 50, key: '1' },\n      { type: 'cannon', x: 150, key: '2' },\n      { type: 'magic', x: 250, key: '3' },\n      { type: 'ice', x: 350, key: '4' }\n    ];\n\n    towerButtons.forEach(button => {\n      const config = towerTypes[button.type as keyof typeof towerTypes];\n      const isSelected = gameState.selectedTowerType === button.type;\n      const canAfford = gameState.gold >= config.cost;\n\n      // Button background\n      ctx.fillStyle = isSelected ? 'rgba(255, 255, 0, 0.5)' : \n                     canAfford ? 'rgba(255, 255, 255, 0.2)' : 'rgba(255, 0, 0, 0.2)';\n      ctx.fillRect(button.x - 25, canvas.height - 70, 50, 60);\n\n      // Tower icon\n      ctx.fillStyle = config.color;\n      ctx.beginPath();\n      ctx.arc(button.x, canvas.height - 55, 12, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Tower info\n      ctx.fillStyle = canAfford ? '#FFFFFF' : '#FF6666';\n      ctx.font = '12px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(`${button.key}: $${config.cost}`, button.x, canvas.height - 20);\n      ctx.fillText(button.type.toUpperCase(), button.x, canvas.height - 8);\n    });\n\n    // Instructions\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = '14px Arial';\n    ctx.textAlign = 'right';\n    ctx.fillText('SPACE: Next Wave', canvas.width - 10, canvas.height - 45);\n    ctx.fillText('ESC: Cancel', canvas.width - 10, canvas.height - 25);\n    ctx.fillText('1-4: Select Tower', canvas.width - 10, canvas.height - 5);\n\n    // Wave progress\n    if (gameState.waveProgress > 0) {\n      ctx.fillStyle = 'rgba(255, 255, 0, 0.8)';\n      ctx.font = '20px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('WAVE IN PROGRESS', canvas.width / 2, 35);\n    }\n\n    // Game over screen\n    if (gameState.gameStatus === 'gameOver') {\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      ctx.fillStyle = '#FF0000';\n      ctx.font = '32px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText('GAME OVER', canvas.width / 2, canvas.height / 2 - 50);\n      \n      ctx.fillStyle = '#FFFFFF';\n      ctx.font = '18px Arial';\n      ctx.fillText(`Final Wave: ${gameState.wave}`, canvas.width / 2, canvas.height / 2);\n      ctx.fillText(`Final Score: ${gameState.score}`, canvas.width / 2, canvas.height / 2 + 30);\n    }\n  };\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas with background\n    ctx.fillStyle = '#1a4c2e';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw game elements\n    drawPath(ctx);\n    \n    towers.forEach(tower => drawTower(ctx, tower));\n    enemies.forEach(enemy => drawEnemy(ctx, enemy));\n    projectiles.forEach(proj => drawProjectile(ctx, proj));\n    \n    drawUI(ctx, canvas);\n\n    // Show placement preview\n    if (gameState.selectedTowerType && canvas) {\n      const rect = canvas.getBoundingClientRect();\n      // This would need mouse position tracking for preview\n    }\n  }, [towers, enemies, projectiles, gameState]);\n\n  // Game loop\n  useEffect(() => {\n    const gameLoop = () => {\n      updateEnemies();\n      updateTowers();\n      updateProjectiles();\n      draw();\n      setFrameCount(prev => prev + 1);\n      gameLoopRef.current = requestAnimationFrame(gameLoop);\n    };\n\n    gameLoopRef.current = requestAnimationFrame(gameLoop);\n\n    return () => {\n      if (gameLoopRef.current) {\n        cancelAnimationFrame(gameLoopRef.current);\n      }\n    };\n  }, [updateEnemies, updateTowers, updateProjectiles, draw]);\n\n  // Event listeners\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown);\n    \n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n\n  return (\n    <div style={{ \n      display: 'flex', \n      flexDirection: 'column', \n      alignItems: 'center',\n      background: '#0f2419',\n      borderRadius: '12px',\n      padding: '16px',\n      border: '2px solid #2d5016',\n    }}>\n      <canvas\n        ref={canvasRef}\n        width={600}\n        height={400}\n        style={{\n          border: '2px solid #4a6741',\n          borderRadius: '8px',\n          background: '#1a4c2e',\n          cursor: gameState.selectedTowerType ? 'crosshair' : 'default',\n        }}\n        onClick={handleCanvasClick}\n        tabIndex={0}\n      />\n      \n      <div style={{\n        marginTop: '12px',\n        color: '#ffffff',\n        fontSize: '14px',\n        textAlign: 'center',\n        maxWidth: '600px',\n      }}>\n        <p>🏰 <strong>Tower Defense</strong> - 키보드 1-4로 타워 선택, 클릭으로 배치, Space로 웨이브 시작!</p>\n        <p>적들이 끝까지 가지 못하도록 타워를 배치해서 막아보세요!</p>\n      </div>\n    </div>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}