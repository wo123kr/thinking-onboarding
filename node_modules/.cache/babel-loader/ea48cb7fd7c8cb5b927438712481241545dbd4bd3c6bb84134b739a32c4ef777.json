{"ast":null,"code":"var _jsxFileName = \"/Users/jegaljin-u/workspace/thinking-guide/src/components/ActionRPGGame.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ActionRPGGame = ({\n  onAction,\n  playerStats,\n  setPlayerStats,\n  currentUser\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const gameLoopRef = useRef();\n  const keysRef = useRef(new Set());\n\n  // Game state\n  const [gameState, setGameState] = useState({\n    scene: 'playing',\n    cameraX: 0,\n    cameraY: 0,\n    worldWidth: 1200,\n    worldHeight: 800\n  });\n\n  // Player state\n  const [player, setPlayer] = useState({\n    x: 300,\n    y: 250,\n    width: 32,\n    height: 32,\n    health: playerStats.health || 100,\n    maxHealth: 100,\n    direction: 'down',\n    isMoving: false,\n    animationFrame: 0,\n    attackCooldown: 0\n  });\n\n  // Enemies state\n  const [enemies, setEnemies] = useState([]);\n\n  // Items state\n  const [items, setItems] = useState([]);\n\n  // Animation frame counter\n  const [frameCount, setFrameCount] = useState(0);\n\n  // Initialize game world\n  useEffect(() => {\n    generateEnemies();\n    generateItems();\n  }, []);\n  const generateEnemies = () => {\n    const newEnemies = [];\n    const enemyTypes = ['slime', 'orc', 'goblin', 'skeleton'];\n    for (let i = 0; i < 8; i++) {\n      newEnemies.push({\n        id: `enemy_${i}`,\n        x: Math.random() * (gameState.worldWidth - 100) + 50,\n        y: Math.random() * (gameState.worldHeight - 100) + 50,\n        width: 28,\n        height: 28,\n        health: 30 + Math.random() * 40,\n        maxHealth: 50,\n        type: enemyTypes[Math.floor(Math.random() * enemyTypes.length)],\n        lastAttack: 0,\n        direction: Math.random() * Math.PI * 2,\n        speed: 0.5 + Math.random() * 1,\n        alive: true\n      });\n    }\n    setEnemies(newEnemies);\n  };\n  const generateItems = () => {\n    const newItems = [];\n    const itemTypes = ['potion', 'gold', 'gem'];\n    for (let i = 0; i < 12; i++) {\n      newItems.push({\n        id: `item_${i}`,\n        x: Math.random() * (gameState.worldWidth - 100) + 50,\n        y: Math.random() * (gameState.worldHeight - 100) + 50,\n        type: itemTypes[Math.floor(Math.random() * itemTypes.length)],\n        collected: false\n      });\n    }\n    setItems(newItems);\n  };\n\n  // Keyboard handling\n  useEffect(() => {\n    const handleKeyDown = e => {\n      keysRef.current.add(e.key.toLowerCase());\n    };\n    const handleKeyUp = e => {\n      keysRef.current.delete(e.key.toLowerCase());\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, []);\n\n  // Game logic\n  const updatePlayer = useCallback(() => {\n    setPlayer(prev => {\n      const newPlayer = {\n        ...prev\n      };\n      const keys = keysRef.current;\n      const speed = 3;\n      let moving = false;\n      let newX = newPlayer.x;\n      let newY = newPlayer.y;\n\n      // Movement\n      if (keys.has('w') || keys.has('arrowup')) {\n        newY -= speed;\n        newPlayer.direction = 'up';\n        moving = true;\n      }\n      if (keys.has('s') || keys.has('arrowdown')) {\n        newY += speed;\n        newPlayer.direction = 'down';\n        moving = true;\n      }\n      if (keys.has('a') || keys.has('arrowleft')) {\n        newX -= speed;\n        newPlayer.direction = 'left';\n        moving = true;\n      }\n      if (keys.has('d') || keys.has('arrowright')) {\n        newX += speed;\n        newPlayer.direction = 'right';\n        moving = true;\n      }\n\n      // Boundary checking\n      newX = Math.max(16, Math.min(gameState.worldWidth - 16, newX));\n      newY = Math.max(16, Math.min(gameState.worldHeight - 16, newY));\n      newPlayer.x = newX;\n      newPlayer.y = newY;\n      newPlayer.isMoving = moving;\n\n      // Attack\n      if (keys.has(' ') && newPlayer.attackCooldown <= 0) {\n        newPlayer.attackCooldown = 30; // 30 frames cooldown\n        performAttack(newPlayer);\n      }\n      if (newPlayer.attackCooldown > 0) {\n        newPlayer.attackCooldown--;\n      }\n\n      // Animation\n      if (moving) {\n        newPlayer.animationFrame = (newPlayer.animationFrame + 1) % 60;\n      } else {\n        newPlayer.animationFrame = 0;\n      }\n      return newPlayer;\n    });\n  }, [gameState.worldWidth, gameState.worldHeight]);\n  const performAttack = playerState => {\n    const attackRange = 50;\n    const attackDamage = 15 + Math.random() * 10;\n    setEnemies(prev => prev.map(enemy => {\n      if (!enemy.alive) return enemy;\n      const dx = enemy.x - playerState.x;\n      const dy = enemy.y - playerState.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      if (distance <= attackRange) {\n        const newHealth = Math.max(0, enemy.health - attackDamage);\n        const killed = newHealth <= 0;\n        if (killed) {\n          // Enemy defeated\n          const expGain = 25 + Math.random() * 15;\n          const goldGain = 10 + Math.random() * 20;\n          setPlayerStats(prev => ({\n            ...prev,\n            experience: prev.experience + expGain,\n            gold: prev.gold + goldGain\n          }));\n          onAction('enemy_defeated', {\n            enemy_type: enemy.type,\n            enemy_id: enemy.id,\n            damage_dealt: attackDamage,\n            exp_gained: expGain,\n            gold_gained: goldGain,\n            player_x: playerState.x,\n            player_y: playerState.y,\n            enemy_x: enemy.x,\n            enemy_y: enemy.y\n          });\n          return {\n            ...enemy,\n            health: 0,\n            alive: false\n          };\n        } else {\n          onAction('enemy_attacked', {\n            enemy_type: enemy.type,\n            enemy_id: enemy.id,\n            damage_dealt: attackDamage,\n            enemy_health_remaining: newHealth,\n            player_x: playerState.x,\n            player_y: playerState.y\n          });\n          return {\n            ...enemy,\n            health: newHealth\n          };\n        }\n      }\n      return enemy;\n    }));\n  };\n  const updateEnemies = useCallback(() => {\n    setEnemies(prev => prev.map(enemy => {\n      if (!enemy.alive) return enemy;\n      const dx = player.x - enemy.x;\n      const dy = player.y - enemy.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      // AI behavior\n      if (distance < 100) {\n        // Chase player\n        const angle = Math.atan2(dy, dx);\n        enemy.x += Math.cos(angle) * enemy.speed;\n        enemy.y += Math.sin(angle) * enemy.speed;\n\n        // Attack player if close enough\n        if (distance < 35 && Date.now() - enemy.lastAttack > 1500) {\n          const damage = 8 + Math.random() * 12;\n          setPlayer(prev => ({\n            ...prev,\n            health: Math.max(0, prev.health - damage)\n          }));\n          setPlayerStats(prev => ({\n            ...prev,\n            health: Math.max(0, prev.health - damage)\n          }));\n          onAction('player_damaged', {\n            damage_taken: damage,\n            enemy_type: enemy.type,\n            enemy_id: enemy.id,\n            player_health_remaining: Math.max(0, player.health - damage)\n          });\n          enemy.lastAttack = Date.now();\n        }\n      } else {\n        // Wander randomly\n        enemy.direction += (Math.random() - 0.5) * 0.2;\n        enemy.x += Math.cos(enemy.direction) * enemy.speed * 0.3;\n        enemy.y += Math.sin(enemy.direction) * enemy.speed * 0.3;\n      }\n\n      // Keep enemies in bounds\n      enemy.x = Math.max(14, Math.min(gameState.worldWidth - 14, enemy.x));\n      enemy.y = Math.max(14, Math.min(gameState.worldHeight - 14, enemy.y));\n      return enemy;\n    }));\n  }, [player.x, player.y, player.health, gameState.worldWidth, gameState.worldHeight, onAction, setPlayerStats]);\n  const checkItemCollisions = useCallback(() => {\n    setItems(prev => prev.map(item => {\n      if (item.collected) return item;\n      const dx = item.x - player.x;\n      const dy = item.y - player.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      if (distance < 25) {\n        // Collect item\n        let goldGain = 0;\n        let healthGain = 0;\n        switch (item.type) {\n          case 'gold':\n            goldGain = 15 + Math.random() * 25;\n            setPlayerStats(prev => ({\n              ...prev,\n              gold: prev.gold + goldGain\n            }));\n            break;\n          case 'potion':\n            healthGain = 30 + Math.random() * 20;\n            setPlayerStats(prev => ({\n              ...prev,\n              health: Math.min(100, prev.health + healthGain)\n            }));\n            break;\n          case 'gem':\n            goldGain = 50 + Math.random() * 50;\n            setPlayerStats(prev => ({\n              ...prev,\n              gold: prev.gold + goldGain\n            }));\n            break;\n        }\n        onAction('item_collected', {\n          item_type: item.type,\n          item_id: item.id,\n          gold_gained: goldGain,\n          health_gained: healthGain,\n          player_x: player.x,\n          player_y: player.y,\n          item_x: item.x,\n          item_y: item.y\n        });\n        return {\n          ...item,\n          collected: true\n        };\n      }\n      return item;\n    }));\n  }, [player.x, player.y, onAction, setPlayerStats]);\n\n  // Drawing functions\n  const drawPlayer = (ctx, x, y) => {\n    const size = player.width;\n\n    // Body\n    ctx.fillStyle = '#4a90e2';\n    ctx.fillRect(x - size / 2, y - size / 2, size, size);\n\n    // Direction indicator\n    ctx.fillStyle = '#2c5aa0';\n    const dirOffset = 8;\n    switch (player.direction) {\n      case 'up':\n        ctx.fillRect(x - 4, y - size / 2 - dirOffset, 8, 6);\n        break;\n      case 'down':\n        ctx.fillRect(x - 4, y + size / 2 + dirOffset - 6, 8, 6);\n        break;\n      case 'left':\n        ctx.fillRect(x - size / 2 - dirOffset, y - 4, 6, 8);\n        break;\n      case 'right':\n        ctx.fillRect(x + size / 2 + dirOffset - 6, y - 4, 6, 8);\n        break;\n    }\n\n    // Animation effect when moving\n    if (player.isMoving) {\n      const wobble = Math.sin(player.animationFrame * 0.3) * 2;\n      ctx.fillStyle = 'rgba(74, 144, 226, 0.3)';\n      ctx.fillRect(x - size / 2 + wobble, y - size / 2, size, size);\n    }\n\n    // Health bar\n    const barWidth = 40;\n    const barHeight = 6;\n    const healthPercent = player.health / player.maxHealth;\n    ctx.fillStyle = '#ff4757';\n    ctx.fillRect(x - barWidth / 2, y - size / 2 - 15, barWidth, barHeight);\n    ctx.fillStyle = '#2ed573';\n    ctx.fillRect(x - barWidth / 2, y - size / 2 - 15, barWidth * healthPercent, barHeight);\n  };\n  const drawEnemy = (ctx, enemy) => {\n    if (!enemy.alive) return;\n    const colors = {\n      slime: '#47c83e',\n      orc: '#8b4513',\n      goblin: '#9b59b6',\n      skeleton: '#95a5a6'\n    };\n    const x = enemy.x - gameState.cameraX;\n    const y = enemy.y - gameState.cameraY;\n    const size = enemy.width;\n\n    // Enemy body\n    ctx.fillStyle = colors[enemy.type];\n    ctx.fillRect(x - size / 2, y - size / 2, size, size);\n\n    // Enemy eyes\n    ctx.fillStyle = '#ff4757';\n    ctx.fillRect(x - 6, y - 8, 4, 4);\n    ctx.fillRect(x + 2, y - 8, 4, 4);\n\n    // Health bar\n    const barWidth = 30;\n    const barHeight = 4;\n    const healthPercent = enemy.health / enemy.maxHealth;\n    ctx.fillStyle = '#ff4757';\n    ctx.fillRect(x - barWidth / 2, y - size / 2 - 10, barWidth, barHeight);\n    ctx.fillStyle = '#2ed573';\n    ctx.fillRect(x - barWidth / 2, y - size / 2 - 10, barWidth * healthPercent, barHeight);\n  };\n  const drawItem = (ctx, item) => {\n    if (item.collected) return;\n    const x = item.x - gameState.cameraX;\n    const y = item.y - gameState.cameraY;\n    const colors = {\n      potion: '#e74c3c',\n      gold: '#f1c40f',\n      gem: '#9b59b6'\n    };\n\n    // Item glow effect\n    const glowIntensity = Math.sin(frameCount * 0.1) * 0.3 + 0.7;\n    ctx.fillStyle = colors[item.type];\n    ctx.globalAlpha = glowIntensity;\n    ctx.fillRect(x - 8, y - 8, 16, 16);\n    ctx.globalAlpha = 1;\n\n    // Item core\n    ctx.fillStyle = colors[item.type];\n    ctx.fillRect(x - 6, y - 6, 12, 12);\n  };\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.fillStyle = '#2d5016';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Update camera to follow player\n    const targetCameraX = player.x - canvas.width / 2;\n    const targetCameraY = player.y - canvas.height / 2;\n    setGameState(prev => ({\n      ...prev,\n      cameraX: Math.max(0, Math.min(prev.worldWidth - canvas.width, targetCameraX)),\n      cameraY: Math.max(0, Math.min(prev.worldHeight - canvas.height, targetCameraY))\n    }));\n\n    // Draw grid\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\n    ctx.lineWidth = 1;\n    for (let x = 0; x < gameState.worldWidth; x += 50) {\n      const screenX = x - gameState.cameraX;\n      if (screenX >= -50 && screenX <= canvas.width + 50) {\n        ctx.beginPath();\n        ctx.moveTo(screenX, 0);\n        ctx.lineTo(screenX, canvas.height);\n        ctx.stroke();\n      }\n    }\n    for (let y = 0; y < gameState.worldHeight; y += 50) {\n      const screenY = y - gameState.cameraY;\n      if (screenY >= -50 && screenY <= canvas.height + 50) {\n        ctx.beginPath();\n        ctx.moveTo(0, screenY);\n        ctx.lineTo(canvas.width, screenY);\n        ctx.stroke();\n      }\n    }\n\n    // Draw items\n    items.forEach(item => drawItem(ctx, item));\n\n    // Draw enemies\n    enemies.forEach(enemy => drawEnemy(ctx, enemy));\n\n    // Draw player\n    drawPlayer(ctx, player.x - gameState.cameraX, player.y - gameState.cameraY);\n\n    // Draw UI\n    drawUI(ctx, canvas);\n  }, [player, enemies, items, gameState, frameCount]);\n  const drawUI = (ctx, canvas) => {\n    // Stats panel\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n    ctx.fillRect(10, 10, 200, 120);\n    ctx.fillStyle = '#ffffff';\n    ctx.font = '14px Arial';\n    ctx.fillText(`Level: ${playerStats.level}`, 20, 30);\n    ctx.fillText(`Health: ${player.health}/100`, 20, 50);\n    ctx.fillText(`Gold: ${playerStats.gold}`, 20, 70);\n    ctx.fillText(`Experience: ${playerStats.experience}`, 20, 90);\n\n    // Controls\n    ctx.fillStyle = '#ffffff';\n    ctx.font = '12px Arial';\n    ctx.fillText('WASD: Move', 20, 110);\n    ctx.fillText('Space: Attack', 20, 125);\n\n    // Enemy count\n    const aliveEnemies = enemies.filter(e => e.alive).length;\n    ctx.fillText(`Enemies: ${aliveEnemies}`, 20, 145);\n  };\n\n  // Game loop\n  useEffect(() => {\n    const gameLoop = () => {\n      updatePlayer();\n      updateEnemies();\n      checkItemCollisions();\n      draw();\n      setFrameCount(prev => prev + 1);\n      gameLoopRef.current = requestAnimationFrame(gameLoop);\n    };\n    gameLoopRef.current = requestAnimationFrame(gameLoop);\n    return () => {\n      if (gameLoopRef.current) {\n        cancelAnimationFrame(gameLoopRef.current);\n      }\n    };\n  }, [updatePlayer, updateEnemies, checkItemCollisions, draw]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      background: '#1a1a1a',\n      borderRadius: '12px',\n      padding: '16px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 600,\n      height: 400,\n      style: {\n        border: '2px solid #444',\n        borderRadius: '8px',\n        background: '#2d5016',\n        cursor: 'crosshair'\n      },\n      tabIndex: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '12px',\n        color: '#ffffff',\n        fontSize: '14px',\n        textAlign: 'center',\n        maxWidth: '600px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD83C\\uDFAE \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"2D Action RPG\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 15\n        }, this), \" - WASD\\uB85C \\uC774\\uB3D9, Space\\uB85C \\uACF5\\uACA9!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uBAAC\\uC2A4\\uD130\\uB97C \\uCC98\\uCE58\\uD558\\uACE0 \\uC544\\uC774\\uD15C\\uC744 \\uC218\\uC9D1\\uD558\\uBA74\\uC11C \\uB808\\uBCA8\\uC5C5\\uD558\\uC138\\uC694!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 582,\n    columnNumber: 5\n  }, this);\n};\n_s(ActionRPGGame, \"KXfNMuBxmcUsgI9l1G1yDDbvvu4=\");\n_c = ActionRPGGame;\nvar _c;\n$RefreshReg$(_c, \"ActionRPGGame\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","jsxDEV","_jsxDEV","ActionRPGGame","onAction","playerStats","setPlayerStats","currentUser","_s","canvasRef","gameLoopRef","keysRef","Set","gameState","setGameState","scene","cameraX","cameraY","worldWidth","worldHeight","player","setPlayer","x","y","width","height","health","maxHealth","direction","isMoving","animationFrame","attackCooldown","enemies","setEnemies","items","setItems","frameCount","setFrameCount","generateEnemies","generateItems","newEnemies","enemyTypes","i","push","id","Math","random","type","floor","length","lastAttack","PI","speed","alive","newItems","itemTypes","collected","handleKeyDown","e","current","add","key","toLowerCase","handleKeyUp","delete","window","addEventListener","removeEventListener","updatePlayer","prev","newPlayer","keys","moving","newX","newY","has","max","min","performAttack","playerState","attackRange","attackDamage","map","enemy","dx","dy","distance","sqrt","newHealth","killed","expGain","goldGain","experience","gold","enemy_type","enemy_id","damage_dealt","exp_gained","gold_gained","player_x","player_y","enemy_x","enemy_y","enemy_health_remaining","updateEnemies","angle","atan2","cos","sin","Date","now","damage","damage_taken","player_health_remaining","checkItemCollisions","item","healthGain","item_type","item_id","health_gained","item_x","item_y","drawPlayer","ctx","size","fillStyle","fillRect","dirOffset","wobble","barWidth","barHeight","healthPercent","drawEnemy","colors","slime","orc","goblin","skeleton","drawItem","potion","gem","glowIntensity","globalAlpha","draw","canvas","getContext","targetCameraX","targetCameraY","strokeStyle","lineWidth","screenX","beginPath","moveTo","lineTo","stroke","screenY","forEach","drawUI","font","fillText","level","aliveEnemies","filter","gameLoop","requestAnimationFrame","cancelAnimationFrame","style","display","flexDirection","alignItems","background","borderRadius","padding","children","ref","border","cursor","tabIndex","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","color","fontSize","textAlign","maxWidth","_c","$RefreshReg$"],"sources":["/Users/jegaljin-u/workspace/thinking-guide/src/components/ActionRPGGame.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\n\ninterface GameProps {\n  onAction: (eventType: string, data: any) => void;\n  isSimulating: boolean;\n  currentAction: string | null;\n  playerStats: any;\n  setPlayerStats: (stats: any) => void;\n  currentUser: any;\n}\n\ninterface Player {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  health: number;\n  maxHealth: number;\n  direction: 'up' | 'down' | 'left' | 'right';\n  isMoving: boolean;\n  animationFrame: number;\n  attackCooldown: number;\n}\n\ninterface Enemy {\n  id: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  health: number;\n  maxHealth: number;\n  type: 'slime' | 'orc' | 'goblin' | 'skeleton';\n  lastAttack: number;\n  direction: number;\n  speed: number;\n  alive: boolean;\n}\n\ninterface GameItem {\n  id: string;\n  x: number;\n  y: number;\n  type: 'potion' | 'gold' | 'gem';\n  collected: boolean;\n}\n\nexport const ActionRPGGame: React.FC<GameProps> = ({\n  onAction,\n  playerStats,\n  setPlayerStats,\n  currentUser\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const gameLoopRef = useRef<number>();\n  const keysRef = useRef<Set<string>>(new Set());\n  \n  // Game state\n  const [gameState, setGameState] = useState({\n    scene: 'playing' as 'playing' | 'paused' | 'inventory',\n    cameraX: 0,\n    cameraY: 0,\n    worldWidth: 1200,\n    worldHeight: 800,\n  });\n\n  // Player state\n  const [player, setPlayer] = useState<Player>({\n    x: 300,\n    y: 250,\n    width: 32,\n    height: 32,\n    health: playerStats.health || 100,\n    maxHealth: 100,\n    direction: 'down',\n    isMoving: false,\n    animationFrame: 0,\n    attackCooldown: 0,\n  });\n\n  // Enemies state\n  const [enemies, setEnemies] = useState<Enemy[]>([]);\n  \n  // Items state\n  const [items, setItems] = useState<GameItem[]>([]);\n\n  // Animation frame counter\n  const [frameCount, setFrameCount] = useState(0);\n\n  // Initialize game world\n  useEffect(() => {\n    generateEnemies();\n    generateItems();\n  }, []);\n\n  const generateEnemies = () => {\n    const newEnemies: Enemy[] = [];\n    const enemyTypes: Enemy['type'][] = ['slime', 'orc', 'goblin', 'skeleton'];\n    \n    for (let i = 0; i < 8; i++) {\n      newEnemies.push({\n        id: `enemy_${i}`,\n        x: Math.random() * (gameState.worldWidth - 100) + 50,\n        y: Math.random() * (gameState.worldHeight - 100) + 50,\n        width: 28,\n        height: 28,\n        health: 30 + Math.random() * 40,\n        maxHealth: 50,\n        type: enemyTypes[Math.floor(Math.random() * enemyTypes.length)],\n        lastAttack: 0,\n        direction: Math.random() * Math.PI * 2,\n        speed: 0.5 + Math.random() * 1,\n        alive: true,\n      });\n    }\n    setEnemies(newEnemies);\n  };\n\n  const generateItems = () => {\n    const newItems: GameItem[] = [];\n    const itemTypes: GameItem['type'][] = ['potion', 'gold', 'gem'];\n    \n    for (let i = 0; i < 12; i++) {\n      newItems.push({\n        id: `item_${i}`,\n        x: Math.random() * (gameState.worldWidth - 100) + 50,\n        y: Math.random() * (gameState.worldHeight - 100) + 50,\n        type: itemTypes[Math.floor(Math.random() * itemTypes.length)],\n        collected: false,\n      });\n    }\n    setItems(newItems);\n  };\n\n  // Keyboard handling\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      keysRef.current.add(e.key.toLowerCase());\n    };\n\n    const handleKeyUp = (e: KeyboardEvent) => {\n      keysRef.current.delete(e.key.toLowerCase());\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, []);\n\n  // Game logic\n  const updatePlayer = useCallback(() => {\n    setPlayer(prev => {\n      const newPlayer = { ...prev };\n      const keys = keysRef.current;\n      const speed = 3;\n      \n      let moving = false;\n      let newX = newPlayer.x;\n      let newY = newPlayer.y;\n\n      // Movement\n      if (keys.has('w') || keys.has('arrowup')) {\n        newY -= speed;\n        newPlayer.direction = 'up';\n        moving = true;\n      }\n      if (keys.has('s') || keys.has('arrowdown')) {\n        newY += speed;\n        newPlayer.direction = 'down';\n        moving = true;\n      }\n      if (keys.has('a') || keys.has('arrowleft')) {\n        newX -= speed;\n        newPlayer.direction = 'left';\n        moving = true;\n      }\n      if (keys.has('d') || keys.has('arrowright')) {\n        newX += speed;\n        newPlayer.direction = 'right';\n        moving = true;\n      }\n\n      // Boundary checking\n      newX = Math.max(16, Math.min(gameState.worldWidth - 16, newX));\n      newY = Math.max(16, Math.min(gameState.worldHeight - 16, newY));\n\n      newPlayer.x = newX;\n      newPlayer.y = newY;\n      newPlayer.isMoving = moving;\n\n      // Attack\n      if (keys.has(' ') && newPlayer.attackCooldown <= 0) {\n        newPlayer.attackCooldown = 30; // 30 frames cooldown\n        performAttack(newPlayer);\n      }\n\n      if (newPlayer.attackCooldown > 0) {\n        newPlayer.attackCooldown--;\n      }\n\n      // Animation\n      if (moving) {\n        newPlayer.animationFrame = (newPlayer.animationFrame + 1) % 60;\n      } else {\n        newPlayer.animationFrame = 0;\n      }\n\n      return newPlayer;\n    });\n  }, [gameState.worldWidth, gameState.worldHeight]);\n\n  const performAttack = (playerState: Player) => {\n    const attackRange = 50;\n    const attackDamage = 15 + Math.random() * 10;\n\n    setEnemies(prev => prev.map(enemy => {\n      if (!enemy.alive) return enemy;\n\n      const dx = enemy.x - playerState.x;\n      const dy = enemy.y - playerState.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      if (distance <= attackRange) {\n        const newHealth = Math.max(0, enemy.health - attackDamage);\n        const killed = newHealth <= 0;\n\n        if (killed) {\n          // Enemy defeated\n          const expGain = 25 + Math.random() * 15;\n          const goldGain = 10 + Math.random() * 20;\n          \n          setPlayerStats((prev: any) => ({\n            ...prev,\n            experience: prev.experience + expGain,\n            gold: prev.gold + goldGain,\n          }));\n\n          onAction('enemy_defeated', {\n            enemy_type: enemy.type,\n            enemy_id: enemy.id,\n            damage_dealt: attackDamage,\n            exp_gained: expGain,\n            gold_gained: goldGain,\n            player_x: playerState.x,\n            player_y: playerState.y,\n            enemy_x: enemy.x,\n            enemy_y: enemy.y,\n          });\n\n          return { ...enemy, health: 0, alive: false };\n        } else {\n          onAction('enemy_attacked', {\n            enemy_type: enemy.type,\n            enemy_id: enemy.id,\n            damage_dealt: attackDamage,\n            enemy_health_remaining: newHealth,\n            player_x: playerState.x,\n            player_y: playerState.y,\n          });\n\n          return { ...enemy, health: newHealth };\n        }\n      }\n\n      return enemy;\n    }));\n  };\n\n  const updateEnemies = useCallback(() => {\n    setEnemies(prev => prev.map(enemy => {\n      if (!enemy.alive) return enemy;\n\n      const dx = player.x - enemy.x;\n      const dy = player.y - enemy.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      // AI behavior\n      if (distance < 100) {\n        // Chase player\n        const angle = Math.atan2(dy, dx);\n        enemy.x += Math.cos(angle) * enemy.speed;\n        enemy.y += Math.sin(angle) * enemy.speed;\n\n        // Attack player if close enough\n        if (distance < 35 && Date.now() - enemy.lastAttack > 1500) {\n          const damage = 8 + Math.random() * 12;\n          setPlayer(prev => ({\n            ...prev,\n            health: Math.max(0, prev.health - damage)\n          }));\n\n          setPlayerStats((prev: any) => ({\n            ...prev,\n            health: Math.max(0, prev.health - damage)\n          }));\n\n          onAction('player_damaged', {\n            damage_taken: damage,\n            enemy_type: enemy.type,\n            enemy_id: enemy.id,\n            player_health_remaining: Math.max(0, player.health - damage),\n          });\n\n          enemy.lastAttack = Date.now();\n        }\n      } else {\n        // Wander randomly\n        enemy.direction += (Math.random() - 0.5) * 0.2;\n        enemy.x += Math.cos(enemy.direction) * enemy.speed * 0.3;\n        enemy.y += Math.sin(enemy.direction) * enemy.speed * 0.3;\n      }\n\n      // Keep enemies in bounds\n      enemy.x = Math.max(14, Math.min(gameState.worldWidth - 14, enemy.x));\n      enemy.y = Math.max(14, Math.min(gameState.worldHeight - 14, enemy.y));\n\n      return enemy;\n    }));\n  }, [player.x, player.y, player.health, gameState.worldWidth, gameState.worldHeight, onAction, setPlayerStats]);\n\n  const checkItemCollisions = useCallback(() => {\n    setItems(prev => prev.map(item => {\n      if (item.collected) return item;\n\n      const dx = item.x - player.x;\n      const dy = item.y - player.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      if (distance < 25) {\n        // Collect item\n        let goldGain = 0;\n        let healthGain = 0;\n\n        switch (item.type) {\n          case 'gold':\n            goldGain = 15 + Math.random() * 25;\n            setPlayerStats((prev: any) => ({\n              ...prev,\n              gold: prev.gold + goldGain,\n            }));\n            break;\n          case 'potion':\n            healthGain = 30 + Math.random() * 20;\n            setPlayerStats((prev: any) => ({\n              ...prev,\n              health: Math.min(100, prev.health + healthGain),\n            }));\n            break;\n          case 'gem':\n            goldGain = 50 + Math.random() * 50;\n            setPlayerStats((prev: any) => ({\n              ...prev,\n              gold: prev.gold + goldGain,\n            }));\n            break;\n        }\n\n        onAction('item_collected', {\n          item_type: item.type,\n          item_id: item.id,\n          gold_gained: goldGain,\n          health_gained: healthGain,\n          player_x: player.x,\n          player_y: player.y,\n          item_x: item.x,\n          item_y: item.y,\n        });\n\n        return { ...item, collected: true };\n      }\n\n      return item;\n    }));\n  }, [player.x, player.y, onAction, setPlayerStats]);\n\n  // Drawing functions\n  const drawPlayer = (ctx: CanvasRenderingContext2D, x: number, y: number) => {\n    const size = player.width;\n    \n    // Body\n    ctx.fillStyle = '#4a90e2';\n    ctx.fillRect(x - size/2, y - size/2, size, size);\n    \n    // Direction indicator\n    ctx.fillStyle = '#2c5aa0';\n    const dirOffset = 8;\n    switch (player.direction) {\n      case 'up':\n        ctx.fillRect(x - 4, y - size/2 - dirOffset, 8, 6);\n        break;\n      case 'down':\n        ctx.fillRect(x - 4, y + size/2 + dirOffset - 6, 8, 6);\n        break;\n      case 'left':\n        ctx.fillRect(x - size/2 - dirOffset, y - 4, 6, 8);\n        break;\n      case 'right':\n        ctx.fillRect(x + size/2 + dirOffset - 6, y - 4, 6, 8);\n        break;\n    }\n\n    // Animation effect when moving\n    if (player.isMoving) {\n      const wobble = Math.sin(player.animationFrame * 0.3) * 2;\n      ctx.fillStyle = 'rgba(74, 144, 226, 0.3)';\n      ctx.fillRect(x - size/2 + wobble, y - size/2, size, size);\n    }\n\n    // Health bar\n    const barWidth = 40;\n    const barHeight = 6;\n    const healthPercent = player.health / player.maxHealth;\n    \n    ctx.fillStyle = '#ff4757';\n    ctx.fillRect(x - barWidth/2, y - size/2 - 15, barWidth, barHeight);\n    ctx.fillStyle = '#2ed573';\n    ctx.fillRect(x - barWidth/2, y - size/2 - 15, barWidth * healthPercent, barHeight);\n  };\n\n  const drawEnemy = (ctx: CanvasRenderingContext2D, enemy: Enemy) => {\n    if (!enemy.alive) return;\n\n    const colors = {\n      slime: '#47c83e',\n      orc: '#8b4513',\n      goblin: '#9b59b6',\n      skeleton: '#95a5a6'\n    };\n\n    const x = enemy.x - gameState.cameraX;\n    const y = enemy.y - gameState.cameraY;\n    const size = enemy.width;\n\n    // Enemy body\n    ctx.fillStyle = colors[enemy.type];\n    ctx.fillRect(x - size/2, y - size/2, size, size);\n\n    // Enemy eyes\n    ctx.fillStyle = '#ff4757';\n    ctx.fillRect(x - 6, y - 8, 4, 4);\n    ctx.fillRect(x + 2, y - 8, 4, 4);\n\n    // Health bar\n    const barWidth = 30;\n    const barHeight = 4;\n    const healthPercent = enemy.health / enemy.maxHealth;\n    \n    ctx.fillStyle = '#ff4757';\n    ctx.fillRect(x - barWidth/2, y - size/2 - 10, barWidth, barHeight);\n    ctx.fillStyle = '#2ed573';\n    ctx.fillRect(x - barWidth/2, y - size/2 - 10, barWidth * healthPercent, barHeight);\n  };\n\n  const drawItem = (ctx: CanvasRenderingContext2D, item: GameItem) => {\n    if (item.collected) return;\n\n    const x = item.x - gameState.cameraX;\n    const y = item.y - gameState.cameraY;\n\n    const colors = {\n      potion: '#e74c3c',\n      gold: '#f1c40f',\n      gem: '#9b59b6'\n    };\n\n    // Item glow effect\n    const glowIntensity = Math.sin(frameCount * 0.1) * 0.3 + 0.7;\n    ctx.fillStyle = colors[item.type];\n    ctx.globalAlpha = glowIntensity;\n    ctx.fillRect(x - 8, y - 8, 16, 16);\n    ctx.globalAlpha = 1;\n\n    // Item core\n    ctx.fillStyle = colors[item.type];\n    ctx.fillRect(x - 6, y - 6, 12, 12);\n  };\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.fillStyle = '#2d5016';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Update camera to follow player\n    const targetCameraX = player.x - canvas.width / 2;\n    const targetCameraY = player.y - canvas.height / 2;\n    \n    setGameState(prev => ({\n      ...prev,\n      cameraX: Math.max(0, Math.min(prev.worldWidth - canvas.width, targetCameraX)),\n      cameraY: Math.max(0, Math.min(prev.worldHeight - canvas.height, targetCameraY))\n    }));\n\n    // Draw grid\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\n    ctx.lineWidth = 1;\n    for (let x = 0; x < gameState.worldWidth; x += 50) {\n      const screenX = x - gameState.cameraX;\n      if (screenX >= -50 && screenX <= canvas.width + 50) {\n        ctx.beginPath();\n        ctx.moveTo(screenX, 0);\n        ctx.lineTo(screenX, canvas.height);\n        ctx.stroke();\n      }\n    }\n    for (let y = 0; y < gameState.worldHeight; y += 50) {\n      const screenY = y - gameState.cameraY;\n      if (screenY >= -50 && screenY <= canvas.height + 50) {\n        ctx.beginPath();\n        ctx.moveTo(0, screenY);\n        ctx.lineTo(canvas.width, screenY);\n        ctx.stroke();\n      }\n    }\n\n    // Draw items\n    items.forEach(item => drawItem(ctx, item));\n\n    // Draw enemies\n    enemies.forEach(enemy => drawEnemy(ctx, enemy));\n\n    // Draw player\n    drawPlayer(ctx, player.x - gameState.cameraX, player.y - gameState.cameraY);\n\n    // Draw UI\n    drawUI(ctx, canvas);\n  }, [player, enemies, items, gameState, frameCount]);\n\n  const drawUI = (ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) => {\n    // Stats panel\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';\n    ctx.fillRect(10, 10, 200, 120);\n    \n    ctx.fillStyle = '#ffffff';\n    ctx.font = '14px Arial';\n    ctx.fillText(`Level: ${playerStats.level}`, 20, 30);\n    ctx.fillText(`Health: ${player.health}/100`, 20, 50);\n    ctx.fillText(`Gold: ${playerStats.gold}`, 20, 70);\n    ctx.fillText(`Experience: ${playerStats.experience}`, 20, 90);\n    \n    // Controls\n    ctx.fillStyle = '#ffffff';\n    ctx.font = '12px Arial';\n    ctx.fillText('WASD: Move', 20, 110);\n    ctx.fillText('Space: Attack', 20, 125);\n\n    // Enemy count\n    const aliveEnemies = enemies.filter(e => e.alive).length;\n    ctx.fillText(`Enemies: ${aliveEnemies}`, 20, 145);\n  };\n\n  // Game loop\n  useEffect(() => {\n    const gameLoop = () => {\n      updatePlayer();\n      updateEnemies();\n      checkItemCollisions();\n      draw();\n      setFrameCount(prev => prev + 1);\n      gameLoopRef.current = requestAnimationFrame(gameLoop);\n    };\n\n    gameLoopRef.current = requestAnimationFrame(gameLoop);\n\n    return () => {\n      if (gameLoopRef.current) {\n        cancelAnimationFrame(gameLoopRef.current);\n      }\n    };\n  }, [updatePlayer, updateEnemies, checkItemCollisions, draw]);\n\n  return (\n    <div style={{ \n      display: 'flex', \n      flexDirection: 'column', \n      alignItems: 'center',\n      background: '#1a1a1a',\n      borderRadius: '12px',\n      padding: '16px',\n    }}>\n      <canvas\n        ref={canvasRef}\n        width={600}\n        height={400}\n        style={{\n          border: '2px solid #444',\n          borderRadius: '8px',\n          background: '#2d5016',\n          cursor: 'crosshair',\n        }}\n        tabIndex={0}\n      />\n      \n      <div style={{\n        marginTop: '12px',\n        color: '#ffffff',\n        fontSize: '14px',\n        textAlign: 'center',\n        maxWidth: '600px',\n      }}>\n        <p>🎮 <strong>2D Action RPG</strong> - WASD로 이동, Space로 공격!</p>\n        <p>몬스터를 처치하고 아이템을 수집하면서 레벨업하세요!</p>\n      </div>\n    </div>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AA+CxE,OAAO,MAAMC,aAAkC,GAAGA,CAAC;EACjDC,QAAQ;EACRC,WAAW;EACXC,cAAc;EACdC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,SAAS,GAAGZ,MAAM,CAAoB,IAAI,CAAC;EACjD,MAAMa,WAAW,GAAGb,MAAM,CAAS,CAAC;EACpC,MAAMc,OAAO,GAAGd,MAAM,CAAc,IAAIe,GAAG,CAAC,CAAC,CAAC;;EAE9C;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC;IACzCgB,KAAK,EAAE,SAA+C;IACtDC,OAAO,EAAE,CAAC;IACVC,OAAO,EAAE,CAAC;IACVC,UAAU,EAAE,IAAI;IAChBC,WAAW,EAAE;EACf,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGtB,QAAQ,CAAS;IAC3CuB,CAAC,EAAE,GAAG;IACNC,CAAC,EAAE,GAAG;IACNC,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAErB,WAAW,CAACqB,MAAM,IAAI,GAAG;IACjCC,SAAS,EAAE,GAAG;IACdC,SAAS,EAAE,MAAM;IACjBC,QAAQ,EAAE,KAAK;IACfC,cAAc,EAAE,CAAC;IACjBC,cAAc,EAAE;EAClB,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGlC,QAAQ,CAAU,EAAE,CAAC;;EAEnD;EACA,MAAM,CAACmC,KAAK,EAAEC,QAAQ,CAAC,GAAGpC,QAAQ,CAAa,EAAE,CAAC;;EAElD;EACA,MAAM,CAACqC,UAAU,EAAEC,aAAa,CAAC,GAAGtC,QAAQ,CAAC,CAAC,CAAC;;EAE/C;EACAD,SAAS,CAAC,MAAM;IACdwC,eAAe,CAAC,CAAC;IACjBC,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMD,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAME,UAAmB,GAAG,EAAE;IAC9B,MAAMC,UAA2B,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC;IAE1E,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BF,UAAU,CAACG,IAAI,CAAC;QACdC,EAAE,EAAE,SAASF,CAAC,EAAE;QAChBpB,CAAC,EAAEuB,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIjC,SAAS,CAACK,UAAU,GAAG,GAAG,CAAC,GAAG,EAAE;QACpDK,CAAC,EAAEsB,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIjC,SAAS,CAACM,WAAW,GAAG,GAAG,CAAC,GAAG,EAAE;QACrDK,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE,EAAE;QACVC,MAAM,EAAE,EAAE,GAAGmB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE;QAC/BnB,SAAS,EAAE,EAAE;QACboB,IAAI,EAAEN,UAAU,CAACI,IAAI,CAACG,KAAK,CAACH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGL,UAAU,CAACQ,MAAM,CAAC,CAAC;QAC/DC,UAAU,EAAE,CAAC;QACbtB,SAAS,EAAEiB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGD,IAAI,CAACM,EAAE,GAAG,CAAC;QACtCC,KAAK,EAAE,GAAG,GAAGP,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC;QAC9BO,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;IACApB,UAAU,CAACO,UAAU,CAAC;EACxB,CAAC;EAED,MAAMD,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMe,QAAoB,GAAG,EAAE;IAC/B,MAAMC,SAA6B,GAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC;IAE/D,KAAK,IAAIb,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3BY,QAAQ,CAACX,IAAI,CAAC;QACZC,EAAE,EAAE,QAAQF,CAAC,EAAE;QACfpB,CAAC,EAAEuB,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIjC,SAAS,CAACK,UAAU,GAAG,GAAG,CAAC,GAAG,EAAE;QACpDK,CAAC,EAAEsB,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIjC,SAAS,CAACM,WAAW,GAAG,GAAG,CAAC,GAAG,EAAE;QACrD4B,IAAI,EAAEQ,SAAS,CAACV,IAAI,CAACG,KAAK,CAACH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGS,SAAS,CAACN,MAAM,CAAC,CAAC;QAC7DO,SAAS,EAAE;MACb,CAAC,CAAC;IACJ;IACArB,QAAQ,CAACmB,QAAQ,CAAC;EACpB,CAAC;;EAED;EACAxD,SAAS,CAAC,MAAM;IACd,MAAM2D,aAAa,GAAIC,CAAgB,IAAK;MAC1C/C,OAAO,CAACgD,OAAO,CAACC,GAAG,CAACF,CAAC,CAACG,GAAG,CAACC,WAAW,CAAC,CAAC,CAAC;IAC1C,CAAC;IAED,MAAMC,WAAW,GAAIL,CAAgB,IAAK;MACxC/C,OAAO,CAACgD,OAAO,CAACK,MAAM,CAACN,CAAC,CAACG,GAAG,CAACC,WAAW,CAAC,CAAC,CAAC;IAC7C,CAAC;IAEDG,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAET,aAAa,CAAC;IACjDQ,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEH,WAAW,CAAC;IAE7C,OAAO,MAAM;MACXE,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEV,aAAa,CAAC;MACpDQ,MAAM,CAACE,mBAAmB,CAAC,OAAO,EAAEJ,WAAW,CAAC;IAClD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMK,YAAY,GAAGpE,WAAW,CAAC,MAAM;IACrCqB,SAAS,CAACgD,IAAI,IAAI;MAChB,MAAMC,SAAS,GAAG;QAAE,GAAGD;MAAK,CAAC;MAC7B,MAAME,IAAI,GAAG5D,OAAO,CAACgD,OAAO;MAC5B,MAAMP,KAAK,GAAG,CAAC;MAEf,IAAIoB,MAAM,GAAG,KAAK;MAClB,IAAIC,IAAI,GAAGH,SAAS,CAAChD,CAAC;MACtB,IAAIoD,IAAI,GAAGJ,SAAS,CAAC/C,CAAC;;MAEtB;MACA,IAAIgD,IAAI,CAACI,GAAG,CAAC,GAAG,CAAC,IAAIJ,IAAI,CAACI,GAAG,CAAC,SAAS,CAAC,EAAE;QACxCD,IAAI,IAAItB,KAAK;QACbkB,SAAS,CAAC1C,SAAS,GAAG,IAAI;QAC1B4C,MAAM,GAAG,IAAI;MACf;MACA,IAAID,IAAI,CAACI,GAAG,CAAC,GAAG,CAAC,IAAIJ,IAAI,CAACI,GAAG,CAAC,WAAW,CAAC,EAAE;QAC1CD,IAAI,IAAItB,KAAK;QACbkB,SAAS,CAAC1C,SAAS,GAAG,MAAM;QAC5B4C,MAAM,GAAG,IAAI;MACf;MACA,IAAID,IAAI,CAACI,GAAG,CAAC,GAAG,CAAC,IAAIJ,IAAI,CAACI,GAAG,CAAC,WAAW,CAAC,EAAE;QAC1CF,IAAI,IAAIrB,KAAK;QACbkB,SAAS,CAAC1C,SAAS,GAAG,MAAM;QAC5B4C,MAAM,GAAG,IAAI;MACf;MACA,IAAID,IAAI,CAACI,GAAG,CAAC,GAAG,CAAC,IAAIJ,IAAI,CAACI,GAAG,CAAC,YAAY,CAAC,EAAE;QAC3CF,IAAI,IAAIrB,KAAK;QACbkB,SAAS,CAAC1C,SAAS,GAAG,OAAO;QAC7B4C,MAAM,GAAG,IAAI;MACf;;MAEA;MACAC,IAAI,GAAG5B,IAAI,CAAC+B,GAAG,CAAC,EAAE,EAAE/B,IAAI,CAACgC,GAAG,CAAChE,SAAS,CAACK,UAAU,GAAG,EAAE,EAAEuD,IAAI,CAAC,CAAC;MAC9DC,IAAI,GAAG7B,IAAI,CAAC+B,GAAG,CAAC,EAAE,EAAE/B,IAAI,CAACgC,GAAG,CAAChE,SAAS,CAACM,WAAW,GAAG,EAAE,EAAEuD,IAAI,CAAC,CAAC;MAE/DJ,SAAS,CAAChD,CAAC,GAAGmD,IAAI;MAClBH,SAAS,CAAC/C,CAAC,GAAGmD,IAAI;MAClBJ,SAAS,CAACzC,QAAQ,GAAG2C,MAAM;;MAE3B;MACA,IAAID,IAAI,CAACI,GAAG,CAAC,GAAG,CAAC,IAAIL,SAAS,CAACvC,cAAc,IAAI,CAAC,EAAE;QAClDuC,SAAS,CAACvC,cAAc,GAAG,EAAE,CAAC,CAAC;QAC/B+C,aAAa,CAACR,SAAS,CAAC;MAC1B;MAEA,IAAIA,SAAS,CAACvC,cAAc,GAAG,CAAC,EAAE;QAChCuC,SAAS,CAACvC,cAAc,EAAE;MAC5B;;MAEA;MACA,IAAIyC,MAAM,EAAE;QACVF,SAAS,CAACxC,cAAc,GAAG,CAACwC,SAAS,CAACxC,cAAc,GAAG,CAAC,IAAI,EAAE;MAChE,CAAC,MAAM;QACLwC,SAAS,CAACxC,cAAc,GAAG,CAAC;MAC9B;MAEA,OAAOwC,SAAS;IAClB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACzD,SAAS,CAACK,UAAU,EAAEL,SAAS,CAACM,WAAW,CAAC,CAAC;EAEjD,MAAM2D,aAAa,GAAIC,WAAmB,IAAK;IAC7C,MAAMC,WAAW,GAAG,EAAE;IACtB,MAAMC,YAAY,GAAG,EAAE,GAAGpC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE;IAE5Cb,UAAU,CAACoC,IAAI,IAAIA,IAAI,CAACa,GAAG,CAACC,KAAK,IAAI;MACnC,IAAI,CAACA,KAAK,CAAC9B,KAAK,EAAE,OAAO8B,KAAK;MAE9B,MAAMC,EAAE,GAAGD,KAAK,CAAC7D,CAAC,GAAGyD,WAAW,CAACzD,CAAC;MAClC,MAAM+D,EAAE,GAAGF,KAAK,CAAC5D,CAAC,GAAGwD,WAAW,CAACxD,CAAC;MAClC,MAAM+D,QAAQ,GAAGzC,IAAI,CAAC0C,IAAI,CAACH,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;MAE7C,IAAIC,QAAQ,IAAIN,WAAW,EAAE;QAC3B,MAAMQ,SAAS,GAAG3C,IAAI,CAAC+B,GAAG,CAAC,CAAC,EAAEO,KAAK,CAACzD,MAAM,GAAGuD,YAAY,CAAC;QAC1D,MAAMQ,MAAM,GAAGD,SAAS,IAAI,CAAC;QAE7B,IAAIC,MAAM,EAAE;UACV;UACA,MAAMC,OAAO,GAAG,EAAE,GAAG7C,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE;UACvC,MAAM6C,QAAQ,GAAG,EAAE,GAAG9C,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE;UAExCxC,cAAc,CAAE+D,IAAS,KAAM;YAC7B,GAAGA,IAAI;YACPuB,UAAU,EAAEvB,IAAI,CAACuB,UAAU,GAAGF,OAAO;YACrCG,IAAI,EAAExB,IAAI,CAACwB,IAAI,GAAGF;UACpB,CAAC,CAAC,CAAC;UAEHvF,QAAQ,CAAC,gBAAgB,EAAE;YACzB0F,UAAU,EAAEX,KAAK,CAACpC,IAAI;YACtBgD,QAAQ,EAAEZ,KAAK,CAACvC,EAAE;YAClBoD,YAAY,EAAEf,YAAY;YAC1BgB,UAAU,EAAEP,OAAO;YACnBQ,WAAW,EAAEP,QAAQ;YACrBQ,QAAQ,EAAEpB,WAAW,CAACzD,CAAC;YACvB8E,QAAQ,EAAErB,WAAW,CAACxD,CAAC;YACvB8E,OAAO,EAAElB,KAAK,CAAC7D,CAAC;YAChBgF,OAAO,EAAEnB,KAAK,CAAC5D;UACjB,CAAC,CAAC;UAEF,OAAO;YAAE,GAAG4D,KAAK;YAAEzD,MAAM,EAAE,CAAC;YAAE2B,KAAK,EAAE;UAAM,CAAC;QAC9C,CAAC,MAAM;UACLjD,QAAQ,CAAC,gBAAgB,EAAE;YACzB0F,UAAU,EAAEX,KAAK,CAACpC,IAAI;YACtBgD,QAAQ,EAAEZ,KAAK,CAACvC,EAAE;YAClBoD,YAAY,EAAEf,YAAY;YAC1BsB,sBAAsB,EAAEf,SAAS;YACjCW,QAAQ,EAAEpB,WAAW,CAACzD,CAAC;YACvB8E,QAAQ,EAAErB,WAAW,CAACxD;UACxB,CAAC,CAAC;UAEF,OAAO;YAAE,GAAG4D,KAAK;YAAEzD,MAAM,EAAE8D;UAAU,CAAC;QACxC;MACF;MAEA,OAAOL,KAAK;IACd,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMqB,aAAa,GAAGxG,WAAW,CAAC,MAAM;IACtCiC,UAAU,CAACoC,IAAI,IAAIA,IAAI,CAACa,GAAG,CAACC,KAAK,IAAI;MACnC,IAAI,CAACA,KAAK,CAAC9B,KAAK,EAAE,OAAO8B,KAAK;MAE9B,MAAMC,EAAE,GAAGhE,MAAM,CAACE,CAAC,GAAG6D,KAAK,CAAC7D,CAAC;MAC7B,MAAM+D,EAAE,GAAGjE,MAAM,CAACG,CAAC,GAAG4D,KAAK,CAAC5D,CAAC;MAC7B,MAAM+D,QAAQ,GAAGzC,IAAI,CAAC0C,IAAI,CAACH,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;;MAE7C;MACA,IAAIC,QAAQ,GAAG,GAAG,EAAE;QAClB;QACA,MAAMmB,KAAK,GAAG5D,IAAI,CAAC6D,KAAK,CAACrB,EAAE,EAAED,EAAE,CAAC;QAChCD,KAAK,CAAC7D,CAAC,IAAIuB,IAAI,CAAC8D,GAAG,CAACF,KAAK,CAAC,GAAGtB,KAAK,CAAC/B,KAAK;QACxC+B,KAAK,CAAC5D,CAAC,IAAIsB,IAAI,CAAC+D,GAAG,CAACH,KAAK,CAAC,GAAGtB,KAAK,CAAC/B,KAAK;;QAExC;QACA,IAAIkC,QAAQ,GAAG,EAAE,IAAIuB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG3B,KAAK,CAACjC,UAAU,GAAG,IAAI,EAAE;UACzD,MAAM6D,MAAM,GAAG,CAAC,GAAGlE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE;UACrCzB,SAAS,CAACgD,IAAI,KAAK;YACjB,GAAGA,IAAI;YACP3C,MAAM,EAAEmB,IAAI,CAAC+B,GAAG,CAAC,CAAC,EAAEP,IAAI,CAAC3C,MAAM,GAAGqF,MAAM;UAC1C,CAAC,CAAC,CAAC;UAEHzG,cAAc,CAAE+D,IAAS,KAAM;YAC7B,GAAGA,IAAI;YACP3C,MAAM,EAAEmB,IAAI,CAAC+B,GAAG,CAAC,CAAC,EAAEP,IAAI,CAAC3C,MAAM,GAAGqF,MAAM;UAC1C,CAAC,CAAC,CAAC;UAEH3G,QAAQ,CAAC,gBAAgB,EAAE;YACzB4G,YAAY,EAAED,MAAM;YACpBjB,UAAU,EAAEX,KAAK,CAACpC,IAAI;YACtBgD,QAAQ,EAAEZ,KAAK,CAACvC,EAAE;YAClBqE,uBAAuB,EAAEpE,IAAI,CAAC+B,GAAG,CAAC,CAAC,EAAExD,MAAM,CAACM,MAAM,GAAGqF,MAAM;UAC7D,CAAC,CAAC;UAEF5B,KAAK,CAACjC,UAAU,GAAG2D,IAAI,CAACC,GAAG,CAAC,CAAC;QAC/B;MACF,CAAC,MAAM;QACL;QACA3B,KAAK,CAACvD,SAAS,IAAI,CAACiB,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG;QAC9CqC,KAAK,CAAC7D,CAAC,IAAIuB,IAAI,CAAC8D,GAAG,CAACxB,KAAK,CAACvD,SAAS,CAAC,GAAGuD,KAAK,CAAC/B,KAAK,GAAG,GAAG;QACxD+B,KAAK,CAAC5D,CAAC,IAAIsB,IAAI,CAAC+D,GAAG,CAACzB,KAAK,CAACvD,SAAS,CAAC,GAAGuD,KAAK,CAAC/B,KAAK,GAAG,GAAG;MAC1D;;MAEA;MACA+B,KAAK,CAAC7D,CAAC,GAAGuB,IAAI,CAAC+B,GAAG,CAAC,EAAE,EAAE/B,IAAI,CAACgC,GAAG,CAAChE,SAAS,CAACK,UAAU,GAAG,EAAE,EAAEiE,KAAK,CAAC7D,CAAC,CAAC,CAAC;MACpE6D,KAAK,CAAC5D,CAAC,GAAGsB,IAAI,CAAC+B,GAAG,CAAC,EAAE,EAAE/B,IAAI,CAACgC,GAAG,CAAChE,SAAS,CAACM,WAAW,GAAG,EAAE,EAAEgE,KAAK,CAAC5D,CAAC,CAAC,CAAC;MAErE,OAAO4D,KAAK;IACd,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAAC/D,MAAM,CAACE,CAAC,EAAEF,MAAM,CAACG,CAAC,EAAEH,MAAM,CAACM,MAAM,EAAEb,SAAS,CAACK,UAAU,EAAEL,SAAS,CAACM,WAAW,EAAEf,QAAQ,EAAEE,cAAc,CAAC,CAAC;EAE9G,MAAM4G,mBAAmB,GAAGlH,WAAW,CAAC,MAAM;IAC5CmC,QAAQ,CAACkC,IAAI,IAAIA,IAAI,CAACa,GAAG,CAACiC,IAAI,IAAI;MAChC,IAAIA,IAAI,CAAC3D,SAAS,EAAE,OAAO2D,IAAI;MAE/B,MAAM/B,EAAE,GAAG+B,IAAI,CAAC7F,CAAC,GAAGF,MAAM,CAACE,CAAC;MAC5B,MAAM+D,EAAE,GAAG8B,IAAI,CAAC5F,CAAC,GAAGH,MAAM,CAACG,CAAC;MAC5B,MAAM+D,QAAQ,GAAGzC,IAAI,CAAC0C,IAAI,CAACH,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;MAE7C,IAAIC,QAAQ,GAAG,EAAE,EAAE;QACjB;QACA,IAAIK,QAAQ,GAAG,CAAC;QAChB,IAAIyB,UAAU,GAAG,CAAC;QAElB,QAAQD,IAAI,CAACpE,IAAI;UACf,KAAK,MAAM;YACT4C,QAAQ,GAAG,EAAE,GAAG9C,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE;YAClCxC,cAAc,CAAE+D,IAAS,KAAM;cAC7B,GAAGA,IAAI;cACPwB,IAAI,EAAExB,IAAI,CAACwB,IAAI,GAAGF;YACpB,CAAC,CAAC,CAAC;YACH;UACF,KAAK,QAAQ;YACXyB,UAAU,GAAG,EAAE,GAAGvE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE;YACpCxC,cAAc,CAAE+D,IAAS,KAAM;cAC7B,GAAGA,IAAI;cACP3C,MAAM,EAAEmB,IAAI,CAACgC,GAAG,CAAC,GAAG,EAAER,IAAI,CAAC3C,MAAM,GAAG0F,UAAU;YAChD,CAAC,CAAC,CAAC;YACH;UACF,KAAK,KAAK;YACRzB,QAAQ,GAAG,EAAE,GAAG9C,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE;YAClCxC,cAAc,CAAE+D,IAAS,KAAM;cAC7B,GAAGA,IAAI;cACPwB,IAAI,EAAExB,IAAI,CAACwB,IAAI,GAAGF;YACpB,CAAC,CAAC,CAAC;YACH;QACJ;QAEAvF,QAAQ,CAAC,gBAAgB,EAAE;UACzBiH,SAAS,EAAEF,IAAI,CAACpE,IAAI;UACpBuE,OAAO,EAAEH,IAAI,CAACvE,EAAE;UAChBsD,WAAW,EAAEP,QAAQ;UACrB4B,aAAa,EAAEH,UAAU;UACzBjB,QAAQ,EAAE/E,MAAM,CAACE,CAAC;UAClB8E,QAAQ,EAAEhF,MAAM,CAACG,CAAC;UAClBiG,MAAM,EAAEL,IAAI,CAAC7F,CAAC;UACdmG,MAAM,EAAEN,IAAI,CAAC5F;QACf,CAAC,CAAC;QAEF,OAAO;UAAE,GAAG4F,IAAI;UAAE3D,SAAS,EAAE;QAAK,CAAC;MACrC;MAEA,OAAO2D,IAAI;IACb,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAAC/F,MAAM,CAACE,CAAC,EAAEF,MAAM,CAACG,CAAC,EAAEnB,QAAQ,EAAEE,cAAc,CAAC,CAAC;;EAElD;EACA,MAAMoH,UAAU,GAAGA,CAACC,GAA6B,EAAErG,CAAS,EAAEC,CAAS,KAAK;IAC1E,MAAMqG,IAAI,GAAGxG,MAAM,CAACI,KAAK;;IAEzB;IACAmG,GAAG,CAACE,SAAS,GAAG,SAAS;IACzBF,GAAG,CAACG,QAAQ,CAACxG,CAAC,GAAGsG,IAAI,GAAC,CAAC,EAAErG,CAAC,GAAGqG,IAAI,GAAC,CAAC,EAAEA,IAAI,EAAEA,IAAI,CAAC;;IAEhD;IACAD,GAAG,CAACE,SAAS,GAAG,SAAS;IACzB,MAAME,SAAS,GAAG,CAAC;IACnB,QAAQ3G,MAAM,CAACQ,SAAS;MACtB,KAAK,IAAI;QACP+F,GAAG,CAACG,QAAQ,CAACxG,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGqG,IAAI,GAAC,CAAC,GAAGG,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;QACjD;MACF,KAAK,MAAM;QACTJ,GAAG,CAACG,QAAQ,CAACxG,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGqG,IAAI,GAAC,CAAC,GAAGG,SAAS,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACrD;MACF,KAAK,MAAM;QACTJ,GAAG,CAACG,QAAQ,CAACxG,CAAC,GAAGsG,IAAI,GAAC,CAAC,GAAGG,SAAS,EAAExG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACjD;MACF,KAAK,OAAO;QACVoG,GAAG,CAACG,QAAQ,CAACxG,CAAC,GAAGsG,IAAI,GAAC,CAAC,GAAGG,SAAS,GAAG,CAAC,EAAExG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACrD;IACJ;;IAEA;IACA,IAAIH,MAAM,CAACS,QAAQ,EAAE;MACnB,MAAMmG,MAAM,GAAGnF,IAAI,CAAC+D,GAAG,CAACxF,MAAM,CAACU,cAAc,GAAG,GAAG,CAAC,GAAG,CAAC;MACxD6F,GAAG,CAACE,SAAS,GAAG,yBAAyB;MACzCF,GAAG,CAACG,QAAQ,CAACxG,CAAC,GAAGsG,IAAI,GAAC,CAAC,GAAGI,MAAM,EAAEzG,CAAC,GAAGqG,IAAI,GAAC,CAAC,EAAEA,IAAI,EAAEA,IAAI,CAAC;IAC3D;;IAEA;IACA,MAAMK,QAAQ,GAAG,EAAE;IACnB,MAAMC,SAAS,GAAG,CAAC;IACnB,MAAMC,aAAa,GAAG/G,MAAM,CAACM,MAAM,GAAGN,MAAM,CAACO,SAAS;IAEtDgG,GAAG,CAACE,SAAS,GAAG,SAAS;IACzBF,GAAG,CAACG,QAAQ,CAACxG,CAAC,GAAG2G,QAAQ,GAAC,CAAC,EAAE1G,CAAC,GAAGqG,IAAI,GAAC,CAAC,GAAG,EAAE,EAAEK,QAAQ,EAAEC,SAAS,CAAC;IAClEP,GAAG,CAACE,SAAS,GAAG,SAAS;IACzBF,GAAG,CAACG,QAAQ,CAACxG,CAAC,GAAG2G,QAAQ,GAAC,CAAC,EAAE1G,CAAC,GAAGqG,IAAI,GAAC,CAAC,GAAG,EAAE,EAAEK,QAAQ,GAAGE,aAAa,EAAED,SAAS,CAAC;EACpF,CAAC;EAED,MAAME,SAAS,GAAGA,CAACT,GAA6B,EAAExC,KAAY,KAAK;IACjE,IAAI,CAACA,KAAK,CAAC9B,KAAK,EAAE;IAElB,MAAMgF,MAAM,GAAG;MACbC,KAAK,EAAE,SAAS;MAChBC,GAAG,EAAE,SAAS;MACdC,MAAM,EAAE,SAAS;MACjBC,QAAQ,EAAE;IACZ,CAAC;IAED,MAAMnH,CAAC,GAAG6D,KAAK,CAAC7D,CAAC,GAAGT,SAAS,CAACG,OAAO;IACrC,MAAMO,CAAC,GAAG4D,KAAK,CAAC5D,CAAC,GAAGV,SAAS,CAACI,OAAO;IACrC,MAAM2G,IAAI,GAAGzC,KAAK,CAAC3D,KAAK;;IAExB;IACAmG,GAAG,CAACE,SAAS,GAAGQ,MAAM,CAAClD,KAAK,CAACpC,IAAI,CAAC;IAClC4E,GAAG,CAACG,QAAQ,CAACxG,CAAC,GAAGsG,IAAI,GAAC,CAAC,EAAErG,CAAC,GAAGqG,IAAI,GAAC,CAAC,EAAEA,IAAI,EAAEA,IAAI,CAAC;;IAEhD;IACAD,GAAG,CAACE,SAAS,GAAG,SAAS;IACzBF,GAAG,CAACG,QAAQ,CAACxG,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAChCoG,GAAG,CAACG,QAAQ,CAACxG,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;IAEhC;IACA,MAAM0G,QAAQ,GAAG,EAAE;IACnB,MAAMC,SAAS,GAAG,CAAC;IACnB,MAAMC,aAAa,GAAGhD,KAAK,CAACzD,MAAM,GAAGyD,KAAK,CAACxD,SAAS;IAEpDgG,GAAG,CAACE,SAAS,GAAG,SAAS;IACzBF,GAAG,CAACG,QAAQ,CAACxG,CAAC,GAAG2G,QAAQ,GAAC,CAAC,EAAE1G,CAAC,GAAGqG,IAAI,GAAC,CAAC,GAAG,EAAE,EAAEK,QAAQ,EAAEC,SAAS,CAAC;IAClEP,GAAG,CAACE,SAAS,GAAG,SAAS;IACzBF,GAAG,CAACG,QAAQ,CAACxG,CAAC,GAAG2G,QAAQ,GAAC,CAAC,EAAE1G,CAAC,GAAGqG,IAAI,GAAC,CAAC,GAAG,EAAE,EAAEK,QAAQ,GAAGE,aAAa,EAAED,SAAS,CAAC;EACpF,CAAC;EAED,MAAMQ,QAAQ,GAAGA,CAACf,GAA6B,EAAER,IAAc,KAAK;IAClE,IAAIA,IAAI,CAAC3D,SAAS,EAAE;IAEpB,MAAMlC,CAAC,GAAG6F,IAAI,CAAC7F,CAAC,GAAGT,SAAS,CAACG,OAAO;IACpC,MAAMO,CAAC,GAAG4F,IAAI,CAAC5F,CAAC,GAAGV,SAAS,CAACI,OAAO;IAEpC,MAAMoH,MAAM,GAAG;MACbM,MAAM,EAAE,SAAS;MACjB9C,IAAI,EAAE,SAAS;MACf+C,GAAG,EAAE;IACP,CAAC;;IAED;IACA,MAAMC,aAAa,GAAGhG,IAAI,CAAC+D,GAAG,CAACxE,UAAU,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG;IAC5DuF,GAAG,CAACE,SAAS,GAAGQ,MAAM,CAAClB,IAAI,CAACpE,IAAI,CAAC;IACjC4E,GAAG,CAACmB,WAAW,GAAGD,aAAa;IAC/BlB,GAAG,CAACG,QAAQ,CAACxG,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;IAClCoG,GAAG,CAACmB,WAAW,GAAG,CAAC;;IAEnB;IACAnB,GAAG,CAACE,SAAS,GAAGQ,MAAM,CAAClB,IAAI,CAACpE,IAAI,CAAC;IACjC4E,GAAG,CAACG,QAAQ,CAACxG,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC;EACpC,CAAC;EAED,MAAMwH,IAAI,GAAG/I,WAAW,CAAC,MAAM;IAC7B,MAAMgJ,MAAM,GAAGvI,SAAS,CAACkD,OAAO;IAChC,IAAI,CAACqF,MAAM,EAAE;IAEb,MAAMrB,GAAG,GAAGqB,MAAM,CAACC,UAAU,CAAC,IAAI,CAAC;IACnC,IAAI,CAACtB,GAAG,EAAE;;IAEV;IACAA,GAAG,CAACE,SAAS,GAAG,SAAS;IACzBF,GAAG,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEkB,MAAM,CAACxH,KAAK,EAAEwH,MAAM,CAACvH,MAAM,CAAC;;IAE/C;IACA,MAAMyH,aAAa,GAAG9H,MAAM,CAACE,CAAC,GAAG0H,MAAM,CAACxH,KAAK,GAAG,CAAC;IACjD,MAAM2H,aAAa,GAAG/H,MAAM,CAACG,CAAC,GAAGyH,MAAM,CAACvH,MAAM,GAAG,CAAC;IAElDX,YAAY,CAACuD,IAAI,KAAK;MACpB,GAAGA,IAAI;MACPrD,OAAO,EAAE6B,IAAI,CAAC+B,GAAG,CAAC,CAAC,EAAE/B,IAAI,CAACgC,GAAG,CAACR,IAAI,CAACnD,UAAU,GAAG8H,MAAM,CAACxH,KAAK,EAAE0H,aAAa,CAAC,CAAC;MAC7EjI,OAAO,EAAE4B,IAAI,CAAC+B,GAAG,CAAC,CAAC,EAAE/B,IAAI,CAACgC,GAAG,CAACR,IAAI,CAAClD,WAAW,GAAG6H,MAAM,CAACvH,MAAM,EAAE0H,aAAa,CAAC;IAChF,CAAC,CAAC,CAAC;;IAEH;IACAxB,GAAG,CAACyB,WAAW,GAAG,0BAA0B;IAC5CzB,GAAG,CAAC0B,SAAS,GAAG,CAAC;IACjB,KAAK,IAAI/H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,SAAS,CAACK,UAAU,EAAEI,CAAC,IAAI,EAAE,EAAE;MACjD,MAAMgI,OAAO,GAAGhI,CAAC,GAAGT,SAAS,CAACG,OAAO;MACrC,IAAIsI,OAAO,IAAI,CAAC,EAAE,IAAIA,OAAO,IAAIN,MAAM,CAACxH,KAAK,GAAG,EAAE,EAAE;QAClDmG,GAAG,CAAC4B,SAAS,CAAC,CAAC;QACf5B,GAAG,CAAC6B,MAAM,CAACF,OAAO,EAAE,CAAC,CAAC;QACtB3B,GAAG,CAAC8B,MAAM,CAACH,OAAO,EAAEN,MAAM,CAACvH,MAAM,CAAC;QAClCkG,GAAG,CAAC+B,MAAM,CAAC,CAAC;MACd;IACF;IACA,KAAK,IAAInI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,SAAS,CAACM,WAAW,EAAEI,CAAC,IAAI,EAAE,EAAE;MAClD,MAAMoI,OAAO,GAAGpI,CAAC,GAAGV,SAAS,CAACI,OAAO;MACrC,IAAI0I,OAAO,IAAI,CAAC,EAAE,IAAIA,OAAO,IAAIX,MAAM,CAACvH,MAAM,GAAG,EAAE,EAAE;QACnDkG,GAAG,CAAC4B,SAAS,CAAC,CAAC;QACf5B,GAAG,CAAC6B,MAAM,CAAC,CAAC,EAAEG,OAAO,CAAC;QACtBhC,GAAG,CAAC8B,MAAM,CAACT,MAAM,CAACxH,KAAK,EAAEmI,OAAO,CAAC;QACjChC,GAAG,CAAC+B,MAAM,CAAC,CAAC;MACd;IACF;;IAEA;IACAxH,KAAK,CAAC0H,OAAO,CAACzC,IAAI,IAAIuB,QAAQ,CAACf,GAAG,EAAER,IAAI,CAAC,CAAC;;IAE1C;IACAnF,OAAO,CAAC4H,OAAO,CAACzE,KAAK,IAAIiD,SAAS,CAACT,GAAG,EAAExC,KAAK,CAAC,CAAC;;IAE/C;IACAuC,UAAU,CAACC,GAAG,EAAEvG,MAAM,CAACE,CAAC,GAAGT,SAAS,CAACG,OAAO,EAAEI,MAAM,CAACG,CAAC,GAAGV,SAAS,CAACI,OAAO,CAAC;;IAE3E;IACA4I,MAAM,CAAClC,GAAG,EAAEqB,MAAM,CAAC;EACrB,CAAC,EAAE,CAAC5H,MAAM,EAAEY,OAAO,EAAEE,KAAK,EAAErB,SAAS,EAAEuB,UAAU,CAAC,CAAC;EAEnD,MAAMyH,MAAM,GAAGA,CAAClC,GAA6B,EAAEqB,MAAyB,KAAK;IAC3E;IACArB,GAAG,CAACE,SAAS,GAAG,oBAAoB;IACpCF,GAAG,CAACG,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;IAE9BH,GAAG,CAACE,SAAS,GAAG,SAAS;IACzBF,GAAG,CAACmC,IAAI,GAAG,YAAY;IACvBnC,GAAG,CAACoC,QAAQ,CAAC,UAAU1J,WAAW,CAAC2J,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACnDrC,GAAG,CAACoC,QAAQ,CAAC,WAAW3I,MAAM,CAACM,MAAM,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC;IACpDiG,GAAG,CAACoC,QAAQ,CAAC,SAAS1J,WAAW,CAACwF,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACjD8B,GAAG,CAACoC,QAAQ,CAAC,eAAe1J,WAAW,CAACuF,UAAU,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;;IAE7D;IACA+B,GAAG,CAACE,SAAS,GAAG,SAAS;IACzBF,GAAG,CAACmC,IAAI,GAAG,YAAY;IACvBnC,GAAG,CAACoC,QAAQ,CAAC,YAAY,EAAE,EAAE,EAAE,GAAG,CAAC;IACnCpC,GAAG,CAACoC,QAAQ,CAAC,eAAe,EAAE,EAAE,EAAE,GAAG,CAAC;;IAEtC;IACA,MAAME,YAAY,GAAGjI,OAAO,CAACkI,MAAM,CAACxG,CAAC,IAAIA,CAAC,CAACL,KAAK,CAAC,CAACJ,MAAM;IACxD0E,GAAG,CAACoC,QAAQ,CAAC,YAAYE,YAAY,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;EACnD,CAAC;;EAED;EACAnK,SAAS,CAAC,MAAM;IACd,MAAMqK,QAAQ,GAAGA,CAAA,KAAM;MACrB/F,YAAY,CAAC,CAAC;MACdoC,aAAa,CAAC,CAAC;MACfU,mBAAmB,CAAC,CAAC;MACrB6B,IAAI,CAAC,CAAC;MACN1G,aAAa,CAACgC,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;MAC/B3D,WAAW,CAACiD,OAAO,GAAGyG,qBAAqB,CAACD,QAAQ,CAAC;IACvD,CAAC;IAEDzJ,WAAW,CAACiD,OAAO,GAAGyG,qBAAqB,CAACD,QAAQ,CAAC;IAErD,OAAO,MAAM;MACX,IAAIzJ,WAAW,CAACiD,OAAO,EAAE;QACvB0G,oBAAoB,CAAC3J,WAAW,CAACiD,OAAO,CAAC;MAC3C;IACF,CAAC;EACH,CAAC,EAAE,CAACS,YAAY,EAAEoC,aAAa,EAAEU,mBAAmB,EAAE6B,IAAI,CAAC,CAAC;EAE5D,oBACE7I,OAAA;IAAKoK,KAAK,EAAE;MACVC,OAAO,EAAE,MAAM;MACfC,aAAa,EAAE,QAAQ;MACvBC,UAAU,EAAE,QAAQ;MACpBC,UAAU,EAAE,SAAS;MACrBC,YAAY,EAAE,MAAM;MACpBC,OAAO,EAAE;IACX,CAAE;IAAAC,QAAA,gBACA3K,OAAA;MACE4K,GAAG,EAAErK,SAAU;MACfe,KAAK,EAAE,GAAI;MACXC,MAAM,EAAE,GAAI;MACZ6I,KAAK,EAAE;QACLS,MAAM,EAAE,gBAAgB;QACxBJ,YAAY,EAAE,KAAK;QACnBD,UAAU,EAAE,SAAS;QACrBM,MAAM,EAAE;MACV,CAAE;MACFC,QAAQ,EAAE;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC,eAEFnL,OAAA;MAAKoK,KAAK,EAAE;QACVgB,SAAS,EAAE,MAAM;QACjBC,KAAK,EAAE,SAAS;QAChBC,QAAQ,EAAE,MAAM;QAChBC,SAAS,EAAE,QAAQ;QACnBC,QAAQ,EAAE;MACZ,CAAE;MAAAb,QAAA,gBACA3K,OAAA;QAAA2K,QAAA,GAAG,eAAG,eAAA3K,OAAA;UAAA2K,QAAA,EAAQ;QAAa;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,yDAAuB;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC/DnL,OAAA;QAAA2K,QAAA,EAAG;MAA4B;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC7K,EAAA,CAvjBWL,aAAkC;AAAAwL,EAAA,GAAlCxL,aAAkC;AAAA,IAAAwL,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}